{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/29.jpg","path":"medias/featureimages/29.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/30.jpg","path":"medias/featureimages/30.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/31.jpg","path":"medias/featureimages/31.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/33.jpg","path":"medias/featureimages/33.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/32.jpg","path":"medias/featureimages/32.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/34.jpg","path":"medias/featureimages/34.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/35.jpg","path":"medias/featureimages/35.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"dac62db47fd77ce8590f4f5744a4c2486651f068","modified":1619334677837},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1619334677909},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1619334677909},{"_id":"themes/matery/_config.yml","hash":"0528508808efe583d0379abf3adb4c4c1e3e4097","modified":1619335996062},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1619334677912},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1619334677912},{"_id":"source/_posts/ACM-Freshmen-Mistake-Collection.md","hash":"e475d34c79c9f4a39033fa929d3c4b31bb9d2178","modified":1619334677845},{"_id":"source/_posts/Binary-Indexed-Tree.md","hash":"f613dc4ca66552989ae801de4f88523e65e16701","modified":1619334677845},{"_id":"source/_posts/CTF-List-and-JarvisOJ-stheasy.md","hash":"082dd2b2bcdd8f2380cb9f5ec558082a1481ec02","modified":1619334677853},{"_id":"source/_posts/Higher-Mathematics.md","hash":"47680bb653273a257a4e89b51cd7dba10a73d8c0","modified":1619334677877},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking.md","hash":"de2bda108d93192e164b3eaa22e6695a8222321f","modified":1619334677853},{"_id":"source/_posts/Knapsack-Problem.md","hash":"93a81647ded4096a6109f9486a987cf5265979fe","modified":1619334677880},{"_id":"source/_posts/Longest-Monotone-Subsequence.md","hash":"457ffe15a7338c7ca8fe412a45452af43b3ad2e0","modified":1619334677885},{"_id":"source/_posts/Minimum-Spanning-Tree.md","hash":"32e49fd67ab6a0c4a5ebc96be5cc656e418059a4","modified":1619334677885},{"_id":"source/_posts/Post-Blogs-With-Hexo.md","hash":"910885e748abafbf2a02c0719d2b49cdda176318","modified":1619334677885},{"_id":"source/_posts/Prefix-Sum-and-Finite-Difference.md","hash":"bc9b4e6a3aaabc3281f9537a9fdb4c9357f056a3","modified":1619334677885},{"_id":"source/_posts/RMQ.md","hash":"537de22120d9bad0ef1a762c19c8bf8ac47de25d","modified":1619334677896},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1619334677837},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1619334677899},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1619334677905},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1619334677902},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1619334677920},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1619334677989},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1619334677989},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1619334677997},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1619334677997},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1619334677997},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1619334677997},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1619334677997},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1619334678005},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1619334678005},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1619334678005},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1619334678005},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1619334677912},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1619334677920},{"_id":"themes/matery/source/favicon.png","hash":"6126e3f6885550ae1622db08c6567f4a9682619f","modified":1619334678021},{"_id":"source/_posts/Binary-Indexed-Tree/binary-indexed-tree.png","hash":"85e7fad0154bbce42fee80695286ebfac86ff240","modified":1619334677845},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/2D_array.png","hash":"b1c2a939046d12322657a6fbd53298edba5f1a1c","modified":1619334677853},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/array.png","hash":"2306bf3691b453aeccc3d19bc51957e08c54fb3e","modified":1619334677862},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_1.png","hash":"3d3b2010653f44871ebb1b3056cbb9a8aa317eb3","modified":1619334677862},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_2.png","hash":"871c2dbf05977ad0ee1942e9bce3518c2a8ffa85","modified":1619334677862},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_5.png","hash":"d31b9c24d32128e5f30e1f244ad26a034f714b43","modified":1619334677877},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_3.png","hash":"b8246aecf69903ebb05f1fd236555716876b6b22","modified":1619334677872},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_4.png","hash":"bea12777e6ff8f6d5ca64563b89871d3f2f9c92a","modified":1619334677872},{"_id":"source/_posts/Prefix-Sum-and-Finite-Difference/Inclusion–exclusion principle.png","hash":"65612bb4db25da15457d78a7b9bb48e5776f39a2","modified":1619334677893},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1619334677920},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"ab610754bf6aea844b5ae0802ed37c73b5f1dc9f","modified":1619334677920},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1619334677928},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"291783ff8be918705a197364b430ef5a80e712a3","modified":1619334677928},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1619334677928},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1619334677928},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1619334677939},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1619334677936},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1619334677936},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1619334677943},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"0208c72410620be3ab619d8b997bd5de1af71996","modified":1619334677941},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1619334677943},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1619334677943},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1619334677943},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1619334677943},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1619334677951},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1619334677951},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1619334677951},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1619334677951},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1619334677959},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1619334677959},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1619334677959},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1619334677964},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1619334677964},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1619334677959},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"5ba8306a27ff77cb374d68f6e46f94f24f6cd6a0","modified":1619334677964},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1619334677964},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1619334677973},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1619334677973},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1619334677973},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1619334677973},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1619334677973},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1619334677981},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1619334677981},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1619334677981},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1619334677981},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1619334677989},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1619334677989},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1619334677981},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1619334677989},{"_id":"themes/matery/source/css/matery.css","hash":"c8d1f7fbc93f01c9d2615ed184036dee7d3a2396","modified":1619334678013},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1619334678013},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1619334678013},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1619334678013},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1619334678021},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1619334678021},{"_id":"themes/matery/source/medias/logo.png","hash":"6126e3f6885550ae1622db08c6567f4a9682619f","modified":1619334678764},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1619334678029},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1619334678032},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1619334678041},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1619334678032},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1619334678029},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"98f626d784a94ebe653b13f3a4c79e483264cae7","modified":1619334678089},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1619334678089},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"d54f6205b35dceba1d66da761c00ff9fad9cf857","modified":1619334678089},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"6ad8984746f0ff4e2fc81f0c04f12874fa752683","modified":1619334678089},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"743114dcd6f3addc973778b1b248f88d42b05278","modified":1619334678097},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1619334678097},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1619334678097},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1619334678129},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1619334678137},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1619334678138},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1619334678138},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1619334678171},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1619334678187},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1619334678187},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1619334678187},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1619334678187},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1619334678187},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1619334678195},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1619334678195},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1619334678219},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1619334678219},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1619334678105},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1619334678138},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1619334678146},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1619334678219},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1619334678041},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1619334678129},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1619334678154},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1619334678154},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1619334678154},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1619334678162},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1619334678171},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1619334678162},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1619334678162},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1619334678162},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1619334678162},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1619334678162},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1619334678179},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1619334678179},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1619334678203},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1619334678203},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1619334678203},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1619334678203},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1619334678211},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1619334678211},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1619334678211},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1619334678227},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1619334678081},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1619334678081},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"53e9730a518b70b1df71ebd31267fe5aff77ea4c","modified":1619334678324},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1619334678057},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1619334678049},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1619334678073},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"fc8df20e1303e47c3de61c7d7778bc804c87c8ac","modified":1619334678235},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"939307851cfe06c1d4a8b9fd58354f78f39a899b","modified":1619334678243},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"c4aac5bcb7978ebdf0b6e51d786fa220ea88003f","modified":1619334678332},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"b6d976eff51f73c056a882b22971bb576d198cc8","modified":1619334678584},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"d9602b4eb9b15926a4174a7c0bd1d36b9283aaec","modified":1619334678251},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"e2c1914eee7ed8877697d61bfba60b306c8994c0","modified":1619334678444},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"b814eae29764813c37f06408f777f6eab870fd92","modified":1619334678716},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"0b2642936f3fcceb8f60fead16986999344b4ca5","modified":1619334678739},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"676cb1f69e819663b0f470003d0308ee98a66cf9","modified":1619334678726},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"c3931faced3a89e7b101d15c1630ad0ab4e57fb8","modified":1619334678756},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"3ac7b8591bc648a4906b7dd16b5a750a1ccd791d","modified":1619334678748},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"6e0068580d7360b792cf8e6c0319d7889a726319","modified":1619334678340},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"0575abd2f2da4ffe7fc903ed30bb2b5696f39152","modified":1619334678381},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"faa93fa7107888f1e17f0684ff25201fc9980d73","modified":1619334678764},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"ea4b7b92eb0acb0ae0e643939d344c5ea2f7d1d1","modified":1619334678349},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"057b3080208af7c4ff8d2be8e943c03d0218c09d","modified":1619334678365},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"b4217985bf2ce3368b01ebd225f80da03f665540","modified":1619334678389},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"391e73e0be1cba55195191a2e5325e8b7c38ee2b","modified":1619334678373},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"3688a40a5de975e44432b35f0d20216cb5342f4d","modified":1619334678430},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"f5fa7ec94e856ae3c9ba634e350268ec2e316c18","modified":1619334678452},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"3f6e0aa7b7b6e4468e7982511ce930c33e5e05bd","modified":1619334678467},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"303fd21bce9f590e42e8eb74ff4503d21e29a716","modified":1619334678480},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"3911fb561383f5aac43ca323e531193603642dca","modified":1619334678488},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"53f0b107175a9819d00b6db53e685226e3c0b0a4","modified":1619334678267},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"4b834428796ba3e4853420a2bc4b5f4334befc27","modified":1619334678435},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"fe25b58d8aa93a2e0c510d23458f5aff72116298","modified":1619334678504},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1619334678065},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"009d19731078cb8b6a3ff7f947f37445bc3e73ba","modified":1619334678405},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"e7edc29c0365fa953f369c867de438624a843904","modified":1619334678413},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"28d84b499809220a71e9aed3b3489ff51cd4b449","modified":1619334678512},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1619334678121},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"430647d9b12fb8c46635b48ff36bd8c2b0f50100","modified":1619334678528},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"ab3a4c6b7feac4fecb124ed9f39c47d52c108f84","modified":1619334678563},{"_id":"themes/matery/source/medias/featureimages/29.jpg","hash":"ab3a4c6b7feac4fecb124ed9f39c47d52c108f84","modified":1619334678579},{"_id":"themes/matery/source/medias/featureimages/30.jpg","hash":"3dac1caa2dfe1f5e80f55f55d86c8d4ca2494158","modified":1619334678601},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"43e730f653c4bc85f2c56fed52b35d463d30c662","modified":1619334678539},{"_id":"themes/matery/source/medias/featureimages/31.jpg","hash":"13e8d44a012139a29fbecf89cf9e39cae656b399","modified":1619334678617},{"_id":"themes/matery/source/medias/featureimages/33.jpg","hash":"93121df870ca35e0304179dc29338d1c559674a0","modified":1619334678657},{"_id":"themes/matery/source/medias/featureimages/32.jpg","hash":"7a12b9d6d2c343ca3fc7009bef44e41489f907a5","modified":1619334678641},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"ec108e4736fde241b42218a398ca806c3ad74a4b","modified":1619334678275},{"_id":"themes/matery/source/medias/featureimages/34.jpg","hash":"ea30bd2f725cdda67aa36bbdfb26509434aef310","modified":1619334678681},{"_id":"themes/matery/source/medias/featureimages/35.jpg","hash":"1a0ae1d5c5a49adcf26b848d814028998358d2e6","modified":1619334678715},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"e15e4b66197d8d4f7a229a19dd632f3d4db469a3","modified":1619334678300},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"1c15022c05cd5e3b3841ed4ef20b802ffba98b70","modified":1619334678316},{"_id":"public/baidusitemap.xml","hash":"6e767e0c28d839b90029f003d8b99d8f0ee628a8","modified":1619336014977},{"_id":"public/atom.xml","hash":"c567dc9f8c396859dfb4c90395ea70f76f507885","modified":1619336014979},{"_id":"public/search.xml","hash":"45ec37827c2ddb393e74287c09f1d3a2783d2f75","modified":1619336015880},{"_id":"public/sitemap.xml","hash":"cb393e3fed670e89bf2d4ee7ef3f250daa3d9885","modified":1619336016003},{"_id":"public/404.html","hash":"d7db251ded96bc001186f2cac55358568058b1dd","modified":1619336016033},{"_id":"public/categories/index.html","hash":"2d37cb76afc28915319c9fcda8db02b4df1d3afd","modified":1619336016033},{"_id":"public/categories/ACM/index.html","hash":"2fcc4815014c212664cd3bb2e69a961b8b0a5faa","modified":1619336016033},{"_id":"public/categories/笔记/index.html","hash":"c553a80dca9a068772c2b97b23ad445a48f4eaf1","modified":1619336016033},{"_id":"public/categories/博客维护/index.html","hash":"c5bad28cab42bfc622e1cc543f393fa8402d0e35","modified":1619336016033},{"_id":"public/archives/index.html","hash":"108919a63b1eb2dd6a14a8a24dcabd7c68ae9cd9","modified":1619336016033},{"_id":"public/tags/index.html","hash":"af5d6470d0f054c1e06d0caf1c84392da7be867b","modified":1619336016033},{"_id":"public/rmq/index.html","hash":"468ed96bf65ecb188925e6874149959cde4f8ecb","modified":1619336016033},{"_id":"public/higher-mathematics/index.html","hash":"7585949fba48b1a20aad26dd36e25a8d0eed86fb","modified":1619336016033},{"_id":"public/prefix-sum-and-finite-difference/index.html","hash":"b8b3eaf4e5aa967ac002a86a77937fdd82abb9c5","modified":1619336016033},{"_id":"public/knapsack-problem/index.html","hash":"a0e3132d82fb22c62e1326bab387e1b86154ab66","modified":1619336016033},{"_id":"public/binary-indexed-tree/index.html","hash":"8a04278d748b093b6d6e9228652108fd52862311","modified":1619336016033},{"_id":"public/acm-freshmen-mistake-collection/index.html","hash":"582d8b8e56a6bf4b14bf0c92dcfe52abd220637f","modified":1619336016034},{"_id":"public/minimum-spanning-tree/index.html","hash":"7c60a57440d53e2ba035b040951a1ecc41bb2153","modified":1619336016034},{"_id":"public/longest-monotone-subsequence/index.html","hash":"51bb99cdf7444d212a2471ada1ac6389c77ecd82","modified":1619336016034},{"_id":"public/ctf-list-and-jarvisoj-stheasy/index.html","hash":"96b9353776d98bef5e6e797f178e8e022166b599","modified":1619336016034},{"_id":"public/ctf-tictactoe-game-ce-hacking/index.html","hash":"3068f956a925922c6bd29aacb8e251f9e38897ec","modified":1619336016034},{"_id":"public/post-blogs-with-hexo/index.html","hash":"c3b2bf6fdbebc41fa11c7cfd779ef57ebcc87c94","modified":1619336016034},{"_id":"public/categories/算法/index.html","hash":"81ad3a6628570210e704789e8b1055dacba128ca","modified":1619336016034},{"_id":"public/categories/二进制/index.html","hash":"826af3e6487acbcb792e1b031bf2d40d9ffd7ca3","modified":1619336016034},{"_id":"public/index.html","hash":"72feba2a455ce037c7638b40ec06a878e2716cb5","modified":1619336016034},{"_id":"public/tags/ACM/index.html","hash":"25b51819aed761020824d9d7de6623758009299f","modified":1619336016034},{"_id":"public/tags/树状数组/index.html","hash":"282ad2260733f1c8b76b5fef3d97e75d98c3829f","modified":1619336016034},{"_id":"public/tags/错题本/index.html","hash":"b57f8d918602e983db8021df956dfbc95282ea84","modified":1619336016034},{"_id":"public/tags/高数/index.html","hash":"68507f1e5510b19a251355aa9b6b7d158c3bbd57","modified":1619336016034},{"_id":"public/tags/CTF/index.html","hash":"cc4c3f38bfb0371086783c4c69da9a2e47e3ab42","modified":1619336016034},{"_id":"public/tags/二进制/index.html","hash":"67b30eb49620ef405cbaa84965b0f38a53c71bf5","modified":1619336016034},{"_id":"public/tags/实验/index.html","hash":"3934042fc86e002084cf4134a5dd9dde9177b19f","modified":1619336016034},{"_id":"public/tags/动态规划/index.html","hash":"424cf93e0543b05ecbf0b3d474690e3bf6185792","modified":1619336016035},{"_id":"public/tags/贪心/index.html","hash":"f2428de6536bb191673ab318be5eeb6c702ace04","modified":1619336016035},{"_id":"public/tags/二分查找/index.html","hash":"5847ea6d9b3108437e1f88f124474223fdb97cd3","modified":1619336016035},{"_id":"public/tags/图论/index.html","hash":"2747b782029340431207b322dbbf599026bb7550","modified":1619336016035},{"_id":"public/tags/最小生成树/index.html","hash":"71b555d2051d017c3b0be2bb7caa5826bf99a267","modified":1619336016035},{"_id":"public/tags/并查集/index.html","hash":"690774154207311f23e95317563b7e9794f01371","modified":1619336016035},{"_id":"public/tags/堆排序/index.html","hash":"d918bb0b36126566030cf90fb70f50ed3bbac3b6","modified":1619336016035},{"_id":"public/tags/背包DP/index.html","hash":"e55f26d09c5d5bc91b37db731cc9781350f77dcb","modified":1619336016035},{"_id":"public/tags/教程/index.html","hash":"e5605d7f54777d703968255a46cc743864b5cc6e","modified":1619336016035},{"_id":"public/tags/博客/index.html","hash":"cb10cf378638fd12559432cbe2f9ff5b3cd69834","modified":1619336016035},{"_id":"public/tags/ST算法/index.html","hash":"ccb43e3bf8621256935cae96d654e2fccaf3af43","modified":1619336016035},{"_id":"public/tags/前缀和/index.html","hash":"157077952473e817238bc6e50cc483568a7961e4","modified":1619336016035},{"_id":"public/tags/差分/index.html","hash":"53cdcc9d14935ecae808e03df969c450e48ad79b","modified":1619336016035},{"_id":"public/archives/2020/index.html","hash":"ac4de73bb0b4c7403eda95ca43321c62fa629480","modified":1619336016035},{"_id":"public/archives/2020/11/index.html","hash":"7c0a3bfc6156e3b3ba6de2766eec7b02296ce22a","modified":1619336016035},{"_id":"public/archives/2020/12/index.html","hash":"eeb1528a6dadeb3f8673c4221bde0c8f73cd552a","modified":1619336016035},{"_id":"public/favicon.png","hash":"6126e3f6885550ae1622db08c6567f4a9682619f","modified":1619336016035},{"_id":"public/medias/logo.png","hash":"6126e3f6885550ae1622db08c6567f4a9682619f","modified":1619336016035},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1619336016036},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1619336016036},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1619336016036},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1619336016036},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1619336016036},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1619336016036},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1619336016036},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1619336016036},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1619336016036},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1619336016036},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1619336016036},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1619336016036},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1619336016059},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1619336016065},{"_id":"public/binary-indexed-tree/binary-indexed-tree.png","hash":"85e7fad0154bbce42fee80695286ebfac86ff240","modified":1619336016065},{"_id":"public/prefix-sum-and-finite-difference/Inclusion–exclusion principle.png","hash":"65612bb4db25da15457d78a7b9bb48e5776f39a2","modified":1619336016065},{"_id":"public/ctf-tictactoe-game-ce-hacking/2D_array.png","hash":"b1c2a939046d12322657a6fbd53298edba5f1a1c","modified":1619336016066},{"_id":"public/ctf-tictactoe-game-ce-hacking/array.png","hash":"2306bf3691b453aeccc3d19bc51957e08c54fb3e","modified":1619336016066},{"_id":"public/ctf-tictactoe-game-ce-hacking/ce_1.png","hash":"3d3b2010653f44871ebb1b3056cbb9a8aa317eb3","modified":1619336016066},{"_id":"public/ctf-tictactoe-game-ce-hacking/ce_2.png","hash":"871c2dbf05977ad0ee1942e9bce3518c2a8ffa85","modified":1619336016066},{"_id":"public/ctf-tictactoe-game-ce-hacking/ce_3.png","hash":"b8246aecf69903ebb05f1fd236555716876b6b22","modified":1619336016066},{"_id":"public/ctf-tictactoe-game-ce-hacking/ce_5.png","hash":"d31b9c24d32128e5f30e1f244ad26a034f714b43","modified":1619336016066},{"_id":"public/ctf-tictactoe-game-ce-hacking/ce_4.png","hash":"bea12777e6ff8f6d5ca64563b89871d3f2f9c92a","modified":1619336016066},{"_id":"public/css/prism-atom-dark.css","hash":"26a1a13837daac0c63a1770bb3c0e98a58fcf41c","modified":1619336016066},{"_id":"public/css/prism-line-numbers.css","hash":"2f60836bdbdd93e2adbd172dbd304a45c37942e6","modified":1619336016066},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1619336016076},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1619336016076},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1619336016076},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1619336016076},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1619336016077},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1619336016077},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1619336016077},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1619336016077},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1619336016077},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1619336016077},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1619336016077},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1619336016077},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1619336016077},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1619336016077},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1619336016077},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1619336016077},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1619336016078},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1619336016078},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1619336016078},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1619336016078},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1619336016078},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1619336016078},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1619336016078},{"_id":"public/css/matery.css","hash":"6aa4c8b62139b1efe378b6c5e3e804c1528da006","modified":1619336016078},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1619336016078},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1619336016078},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1619336016078},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1619336016078},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1619336016079},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1619336016080},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1619336016080},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1619336016080},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1619336016080},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1619336016080},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1619336016080},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1619336016080},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1619336016080},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1619336016080},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1619336016080},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1619336016080},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1619336016080},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1619336016081},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1619336016081},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1619336016081},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1619336016081},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1619336016081},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1619336016081},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1619336016081},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1619336016081},{"_id":"public/medias/featureimages/0.jpg","hash":"53e9730a518b70b1df71ebd31267fe5aff77ea4c","modified":1619336016099},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1619336016116},{"_id":"public/medias/banner/1.jpg","hash":"939307851cfe06c1d4a8b9fd58354f78f39a899b","modified":1619336016125},{"_id":"public/medias/banner/2.jpg","hash":"d9602b4eb9b15926a4174a7c0bd1d36b9283aaec","modified":1619336016125},{"_id":"public/medias/featureimages/1.jpg","hash":"c4aac5bcb7978ebdf0b6e51d786fa220ea88003f","modified":1619336016125},{"_id":"public/medias/featureimages/2.jpg","hash":"e2c1914eee7ed8877697d61bfba60b306c8994c0","modified":1619336016126},{"_id":"public/medias/banner/0.jpg","hash":"fc8df20e1303e47c3de61c7d7778bc804c87c8ac","modified":1619336016142},{"_id":"public/medias/featureimages/3.jpg","hash":"b6d976eff51f73c056a882b22971bb576d198cc8","modified":1619336016142},{"_id":"public/medias/featureimages/4.jpg","hash":"b814eae29764813c37f06408f777f6eab870fd92","modified":1619336016142},{"_id":"public/medias/featureimages/6.jpg","hash":"0b2642936f3fcceb8f60fead16986999344b4ca5","modified":1619336016154},{"_id":"public/medias/featureimages/7.jpg","hash":"3ac7b8591bc648a4906b7dd16b5a750a1ccd791d","modified":1619336016154},{"_id":"public/medias/featureimages/10.jpg","hash":"6e0068580d7360b792cf8e6c0319d7889a726319","modified":1619336016154},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1619336016154},{"_id":"public/medias/featureimages/14.jpg","hash":"0575abd2f2da4ffe7fc903ed30bb2b5696f39152","modified":1619336016173},{"_id":"public/medias/featureimages/8.jpg","hash":"c3931faced3a89e7b101d15c1630ad0ab4e57fb8","modified":1619336016173},{"_id":"public/medias/featureimages/9.jpg","hash":"faa93fa7107888f1e17f0684ff25201fc9980d73","modified":1619336016173},{"_id":"public/medias/featureimages/12.jpg","hash":"057b3080208af7c4ff8d2be8e943c03d0218c09d","modified":1619336016173},{"_id":"public/medias/featureimages/11.jpg","hash":"ea4b7b92eb0acb0ae0e643939d344c5ea2f7d1d1","modified":1619336016173},{"_id":"public/medias/featureimages/13.jpg","hash":"391e73e0be1cba55195191a2e5325e8b7c38ee2b","modified":1619336016174},{"_id":"public/medias/banner/3.jpg","hash":"53f0b107175a9819d00b6db53e685226e3c0b0a4","modified":1619336016174},{"_id":"public/medias/featureimages/5.jpg","hash":"676cb1f69e819663b0f470003d0308ee98a66cf9","modified":1619336016202},{"_id":"public/medias/featureimages/15.jpg","hash":"b4217985bf2ce3368b01ebd225f80da03f665540","modified":1619336016202},{"_id":"public/medias/featureimages/18.jpg","hash":"3688a40a5de975e44432b35f0d20216cb5342f4d","modified":1619336016202},{"_id":"public/medias/featureimages/19.jpg","hash":"4b834428796ba3e4853420a2bc4b5f4334befc27","modified":1619336016202},{"_id":"public/medias/featureimages/16.jpg","hash":"009d19731078cb8b6a3ff7f947f37445bc3e73ba","modified":1619336016202},{"_id":"public/medias/featureimages/22.jpg","hash":"303fd21bce9f590e42e8eb74ff4503d21e29a716","modified":1619336016214},{"_id":"public/medias/featureimages/23.jpg","hash":"3911fb561383f5aac43ca323e531193603642dca","modified":1619336016214},{"_id":"public/medias/featureimages/21.jpg","hash":"3f6e0aa7b7b6e4468e7982511ce930c33e5e05bd","modified":1619336016238},{"_id":"public/medias/featureimages/24.jpg","hash":"fe25b58d8aa93a2e0c510d23458f5aff72116298","modified":1619336016238},{"_id":"public/medias/featureimages/17.jpg","hash":"e7edc29c0365fa953f369c867de438624a843904","modified":1619336016238},{"_id":"public/medias/featureimages/20.jpg","hash":"f5fa7ec94e856ae3c9ba634e350268ec2e316c18","modified":1619336016264},{"_id":"public/medias/featureimages/26.jpg","hash":"430647d9b12fb8c46635b48ff36bd8c2b0f50100","modified":1619336016299},{"_id":"public/medias/featureimages/25.jpg","hash":"28d84b499809220a71e9aed3b3489ff51cd4b449","modified":1619336016303},{"_id":"public/medias/featureimages/30.jpg","hash":"3dac1caa2dfe1f5e80f55f55d86c8d4ca2494158","modified":1619336016303},{"_id":"public/medias/featureimages/29.jpg","hash":"ab3a4c6b7feac4fecb124ed9f39c47d52c108f84","modified":1619336016303},{"_id":"public/medias/featureimages/27.jpg","hash":"43e730f653c4bc85f2c56fed52b35d463d30c662","modified":1619336016303},{"_id":"public/medias/banner/4.jpg","hash":"ec108e4736fde241b42218a398ca806c3ad74a4b","modified":1619336016309},{"_id":"public/medias/featureimages/28.jpg","hash":"ab3a4c6b7feac4fecb124ed9f39c47d52c108f84","modified":1619336016311},{"_id":"public/medias/featureimages/32.jpg","hash":"7a12b9d6d2c343ca3fc7009bef44e41489f907a5","modified":1619336016311},{"_id":"public/medias/featureimages/31.jpg","hash":"13e8d44a012139a29fbecf89cf9e39cae656b399","modified":1619336016313},{"_id":"public/medias/featureimages/33.jpg","hash":"93121df870ca35e0304179dc29338d1c559674a0","modified":1619336016313},{"_id":"public/medias/featureimages/34.jpg","hash":"ea30bd2f725cdda67aa36bbdfb26509434aef310","modified":1619336016313},{"_id":"public/medias/featureimages/35.jpg","hash":"1a0ae1d5c5a49adcf26b848d814028998358d2e6","modified":1619336016325},{"_id":"public/medias/banner/5.jpg","hash":"e15e4b66197d8d4f7a229a19dd632f3d4db469a3","modified":1619336016328},{"_id":"public/medias/banner/6.jpg","hash":"1c15022c05cd5e3b3841ed4ef20b802ffba98b70","modified":1619336016328}],"Category":[{"name":"ACM","_id":"cknwuuoud0005zcl0f22p9xl3"},{"name":"算法","_id":"cknwuuoul000bzcl0tw5sbl68"},{"name":"笔记","_id":"cknwuuoup000gzcl05xvqfemx"},{"name":"二进制","_id":"cknwuuouu000nzcl0wilwy7i1"},{"name":"博客维护","_id":"cknwuuov0000zzcl0dxk43taa"}],"Data":[{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"404 Not Found :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"404 Not Found :(\"\n---\n","updated":"2021-04-25T07:11:17.837Z","path":"404.html","comments":1,"_id":"cknwuuosy0000zcl0w6z6r2zz","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2021-04-25T07:11:17.899Z","path":"archives/index.html","comments":1,"_id":"cknwuuou90002zcl0ec0t2d3q","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-04-25T07:11:17.905Z","path":"tags/index.html","comments":1,"_id":"cknwuuouc0004zcl0sbj7zfx1","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-04-25T07:11:17.902Z","path":"categories/index.html","comments":1,"_id":"cknwuuouh0008zcl0qzwwz0pl","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"ACM Freshmen Mistake Collection","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-27T07:30:37.000Z","password":null,"summary":"ACM新生赛错题本","_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=551339691&auto=1&height=66\"></iframe></div>\n\n## 做梦\n\n### 题目\n\n#### Problem Description\n\n忙碌了一天的lzh疲惫地躺在床上，但还念念不忘白天的习题，渐渐地，他的视野逐渐模糊，随之而来的是另一幅场景......\n\n在一片祥和的森林里，有一群头顶为黑色菌盖(菌盖就是像顶帽子的那部分)或者白色菌盖的蘑菇人，它们是lzh梦中的生物，其中黑色的蘑菇人有3个、白色的蘑菇人有5个，它们除了头顶的蘑菇颜色不同外，没有什么不同，甚至连思维方式都是一样的！它们通过视觉可以看到除自己以外的其它所有蘑菇人的颜色，现在它们想按颜色分类，白色的蘑菇人为一堆，黑色的蘑菇人为另一堆，但是它们不会说话，也看不到自己的颜色，所以现在它们散乱的坐在一块草坪上，仿佛在思考着什么。\n\n不知过了多久，处于上帝视角的lzh随口说了句“至少有1个黑色的”，突然蘑菇人们都站了起来，第1分钟过去了，所有蘑菇人没有什么行动......第2分钟过去了，蘑菇人还是没有什么行动......第3分钟后，3个黑色的蘑菇人突然想懂了什么，一蹦一跳地跳出了草坪，坐在了一棵树桩下。作为梦的主人的lzh，也突然明白了这些蘑菇人的行为，因为刚刚谈论的是黑色的蘑菇人，所以当黑色的蘑菇人意识到自己是黑色的时候，就会离开草坪，而蘑菇人思考得很慢，1分钟才能想懂一个问题，但是它们的换位思考能力和逻辑推理能力很不错，并且lzh相信蘑菇人十分聪明，不会相信毫无逻辑的话。\n\n又不知过了多久，清晨7点的闹钟像往常一样将lzh唤醒，lzh对这个梦还意犹未尽，觉得这个梦真的是太有趣了，所以他将这个梦分享给你，并笑着问你如果总共有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”，那么至少在多少分钟后蘑菇人能分成黑白两部分（草坪内的为一部分，草坪外的为另一部分，黑白蘑菇人不在同一部分时则认为是分成黑白两部分了）。\n\n#### Input\n\n输入只有一行，输入3个整数，依次为a，b，c。(1≤a≤100),(0≤b≤a),(1≤c≤1000)。\n表示有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”。\n\n#### Output\n\n如果你认为在lzh说话之前，蘑菇人早已经分成两部分，那么输出整数0;\n如果你认为在lzh说完话后，蘑菇人仍然不能分成两部分，那么输出lzh的一小段记忆片段“0x3f3f3f3f......”（不包括引号，但是包括省略号）;\n如果你认为在lzh说完话后的ans分钟后，蘑菇人才能分成两部分，输出ans。\n\n#### Sample Input\n\n1 1 1\n2 1 1000\n8 5 1\n3 1 1\n\n#### Sample Output\n\n0\n0x3f3f3f3f......\n3\n2\n\n#### Hint\n\n对于a=3,b=1,num=1的情况，也就是只有1个白色蘑菇人，2个黑色蘑菇人的情况，它们听到“至少有1个黑色蘑菇人”。\n它们的心理活动如下：\n在听到lzh说话之前，\nA(黑)：abab......\nB(黑)：abab......\nC(白)：abab......\n在听到lzh说话之后，\nA(黑)：我要走吗？\nB(黑)：我要走吗？\nC(白)：我要走吗？\n第一分钟后，\nA(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？\nB(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？\nC(白)：有2个黑色的，它们应该会在下一分钟后走。\n第二分钟后，\nA(黑)：哦，我也是黑色的，溜了溜了。\nB(黑)：哦，我也是黑色的，溜了溜了。\nC(白)：(~O~)，继续睡觉吧！\n\n### 错点\n\n- 5小时实在是累得，没看到**黑蘑菇是从草坪上离开，结果判了`if (a-b == b == 1) ans = 0`**\n- 蘑菇们都长着眼睛，那“至少有c个蘑菇”这个信息其实是没有用的；因为**蘑菇们看到的是a-b或a-b-1个黑蘑菇**\n- 所以在解题时，没有用到c，猜数据直接输出了a-b。。导致AK失败\n\n### 题解\n\n#### 首先处理两个特殊情况：\n\n- 当蘑菇人只有一种颜色时，`ans=0`（**注意，题意是黑蘑菇离开草坪；当`黑=白=1`时，他们都在草坪上而没有分开**）\n- 当`c`大于`黑色的数量`时，输出`0x3f3f3f3f......`\n\n####  然后是错点\n\n- **蘑菇们看到的是a-b或a-b-1个黑蘑菇**，***但其实，谁也无法确定究竟是多少，也就是薛定谔的猫***\n- 所有蘑菇都很懒，它们都会优先认为自己是白的\n- 一个白/黑的蘑菇看到了n个黑蘑菇，那么它会认为这些黑蘑菇只看到了n-1个黑蘑菇\n- 同时，它将这个想法套用到它看到的黑蘑菇身上，也就是说，它认为这些黑蘑菇认为它的同伴们看到了n-2个\n- 这就是一个递归，而在没有c时，结束条件是0：最后有一个蘑菇**被认为**看到0个黑蘑菇，这样大家都认为自己是白的。\n- 而当至少有c个黑蘑菇时，递归结束条件是c：有蘑菇**被认为看到了c-1个黑蘑菇**，它一定会发现自己是黑的。\n\n#### c=1的情况\n\n- 只有1个时，那么第一分钟会有1个唯一的黑蘑菇反应，因为这个黑蘑菇只能看到白的\n- 而如果它没有反应，只看到1个黑蘑菇的就会有反应：这个黑的没反应，是因为它觉得我应该有反应，那么我是黑的\n- 而如果2个黑蘑菇都没反应：是因为看到2个黑蘑菇的蘑菇希望他们在第2分钟反应。说明在他们以外也看到了2个黑的，那么我是黑的\n- 而3个、4个、N个同理。\n\n最后是c>1，其实就是加速了进程：从有c个蘑菇开始上面的递推。\n\n**最后得出结果：`ans=a-b-c+1`**\n\n### AC代码\n\n```cpp\n#include <iostream>\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  for (int a, b, c; std::cin >> a >> b >> c; std::cout << \"\\n\") {\n    if (b == 0 || a - b == 0) {\n      std::cout << \"0\";\n    } else if (a - b < c) {\n      std::cout << \"0x3f3f3f3f......\";\n    } else {\n      std::cout << a - b - c + 1;\n    }\n  }\n\n  return 0;\n}\n\n```\n\n## 合唱队形\n\n### 题目\n\n#### Description\n\nN位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。\n合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK，则他们的身高满足T1 < T2 < … < Ti , Ti > Ti+1 > … > TK (1 <= i <= K)。\n你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。\n\n#### Input\n\n输入的第一行是一个整数N（2 <= N <= 100），表示同学的总数。\n第一行有n个整数，用空格分隔，第i个整数Ti（130 <= Ti <= 230）是第i位同学的身高（厘米）。\n\n#### Output\n\n可能包括多组测试数据，对于每组数据，\n输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。\n\n#### Sample Input 1 \n\n3\n174 208 219 \n6\n145 206 193 171 187 167 \n0\n\n#### Sample Output 1\n\n0\n1\n\n### 错点\n\n好好人想什么区间DP呢。。。还是做过的原题。。\n\n### 题解\n\n{% post_link Longest-Monotone-Subsequence 最长单调子序列 %}\n\n- 队形呈现一个峰\n- 考虑身高严单增时：那么就是求最长严单增子序列\n- 考虑身高严单减时：将其反序求最长严单增子序列即可\n- 最后合并两者，取出最大值\n\n### AC代码\n\n```cpp\n#include <iostream>\n\nint32_t n, a[2][100];\nint32_t dp[2][100];\n\nvoid LongestIncreasingSubsequence(const int32_t *a, const size_t &n, int32_t *dp) {\n  for (int i = 0; i < n; ++i) {\n    dp[i] = 1;\n    for (int j = 0; j < i; ++j)\n      if (a[j] < a[i] && dp[i] <= dp[j]) dp[i] = dp[j] + 1;\n  }\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> n;\n  for (int i = 0; i < n; ++i) { \n    std::cin >> a[0][i];\n    a[1][n - 1 - i] = a[0][i];\n  }\n\n  LongestIncreasingSubsequence(a[0], n, dp[0]);\n  LongestIncreasingSubsequence(a[1], n, dp[1]);\n\n  int32_t res = 0;\n  for (int i = 0; i < n; ++i) res = std::max(res, dp[0][i] + dp[1][n - 1 - i]);\n\n  std::cout << n - res + 1 << \"\\n\";\n\n  return 0;\n}\n\n```\n\n## 建设电力系统\n\n### 题目\n\n#### Description\n\n小明所在的城市由于下暴雪的原因，电力系统严重受损。许多电力线路被破坏，因此许多村庄与主电网失去了联系。政府想尽快重建电力系统，所以，身为程序员的你被赋予了一项任务，就是编程计算重建电力系统的最少花费，重建的电力系统必须保证任意两个村庄之间至少存在一条通路。\n\n#### Input\n\n输入的第一行为一个整数T（1<=T<=50），表示有T组测试数据。\n\n每组输入第一行是两个正整数N，E（2<=N<=500，N<=E<=N*(N-1)/2），分别表示村庄的个数和原有电力线路的个数。\n\n接下来的E行，每行包含三个整数A，B，K（0<=A,B<N，0<=K<1000）。A和B分别表示电力线路的起始村庄代号。如果K=0，表示这条线路仍然正常。如果K是一个正整数，表示这条线路需要花费K的代价来重建。\n\n题目保证输入中没有重边，也没有起始村庄相同的边。\n\n#### Output\n\n对于每组输入，输出重建电力系统所需的最小花费，以此来保证任意两个村庄之间至少存在一条通路。\n\n#### Sample Input 1 \n\n1\n3 3\n0 1 5\n0 2 0\n1 2 9\n\n#### Sample Output 1\n\n5\n\n### 错点\n\n看出来是最小生成树了，但是忘了怎么写\n\n### 题解\n\n最小生成树的模板题\n\n{% post_link Minimum-Spanning-Tree 最小生成树 %}\n\n### AC代码\n\n```cpp\n#include <algorithm>\n#include <iostream>\n\nconst int kN = 500, kM = kN * (kN - 1) / 2;\nint T, N, E;\nint fa[kN];\n\nstruct Edge {\n  int src, dst, val;\n  bool operator<(const Edge &other) const { return val < other.val; }\n} edges[kM];\n\nint Find(const int &x) { return x == fa[x] ? x : fa[x] = Find(fa[x]); }\nvoid Merge(const int &x, const int &y) { fa[Find(x)] = fa[Find(y)]; }\n\nint Kruskal() {\n  int res = 0;\n  std::sort(edges, edges + E);\n\n  for (int i = 0; i < E; ++i) {\n    int32_t src = Find(edges[i].src), dst = Find(edges[i].dst);\n    if (src == dst) continue;\n    Merge(src, dst);\n    res += edges[i].val;\n  }\n  return res;\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  for (std::cin >> T; T--;) {\n    std::cin >> N >> E;\n    for (int i = 0; i < E; ++i)\n      std::cin >> edges[i].src >> edges[i].dst >> edges[i].val;\n\n    for (int i = 0; i < N; ++i) fa[i] = i;\n    std::cout << Kruskal() << \"\\n\";\n  }\n\n  return 0;\n}\n\n```\n","source":"_posts/ACM-Freshmen-Mistake-Collection.md","raw":"---\ntitle: ACM Freshmen Mistake Collection\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-27 15:30:37\npassword:\nsummary: ACM新生赛错题本\ntags:\n- ACM\n- 错题本\ncategories:\n- ACM\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=551339691&auto=1&height=66\"></iframe></div>\n\n## 做梦\n\n### 题目\n\n#### Problem Description\n\n忙碌了一天的lzh疲惫地躺在床上，但还念念不忘白天的习题，渐渐地，他的视野逐渐模糊，随之而来的是另一幅场景......\n\n在一片祥和的森林里，有一群头顶为黑色菌盖(菌盖就是像顶帽子的那部分)或者白色菌盖的蘑菇人，它们是lzh梦中的生物，其中黑色的蘑菇人有3个、白色的蘑菇人有5个，它们除了头顶的蘑菇颜色不同外，没有什么不同，甚至连思维方式都是一样的！它们通过视觉可以看到除自己以外的其它所有蘑菇人的颜色，现在它们想按颜色分类，白色的蘑菇人为一堆，黑色的蘑菇人为另一堆，但是它们不会说话，也看不到自己的颜色，所以现在它们散乱的坐在一块草坪上，仿佛在思考着什么。\n\n不知过了多久，处于上帝视角的lzh随口说了句“至少有1个黑色的”，突然蘑菇人们都站了起来，第1分钟过去了，所有蘑菇人没有什么行动......第2分钟过去了，蘑菇人还是没有什么行动......第3分钟后，3个黑色的蘑菇人突然想懂了什么，一蹦一跳地跳出了草坪，坐在了一棵树桩下。作为梦的主人的lzh，也突然明白了这些蘑菇人的行为，因为刚刚谈论的是黑色的蘑菇人，所以当黑色的蘑菇人意识到自己是黑色的时候，就会离开草坪，而蘑菇人思考得很慢，1分钟才能想懂一个问题，但是它们的换位思考能力和逻辑推理能力很不错，并且lzh相信蘑菇人十分聪明，不会相信毫无逻辑的话。\n\n又不知过了多久，清晨7点的闹钟像往常一样将lzh唤醒，lzh对这个梦还意犹未尽，觉得这个梦真的是太有趣了，所以他将这个梦分享给你，并笑着问你如果总共有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”，那么至少在多少分钟后蘑菇人能分成黑白两部分（草坪内的为一部分，草坪外的为另一部分，黑白蘑菇人不在同一部分时则认为是分成黑白两部分了）。\n\n#### Input\n\n输入只有一行，输入3个整数，依次为a，b，c。(1≤a≤100),(0≤b≤a),(1≤c≤1000)。\n表示有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”。\n\n#### Output\n\n如果你认为在lzh说话之前，蘑菇人早已经分成两部分，那么输出整数0;\n如果你认为在lzh说完话后，蘑菇人仍然不能分成两部分，那么输出lzh的一小段记忆片段“0x3f3f3f3f......”（不包括引号，但是包括省略号）;\n如果你认为在lzh说完话后的ans分钟后，蘑菇人才能分成两部分，输出ans。\n\n#### Sample Input\n\n1 1 1\n2 1 1000\n8 5 1\n3 1 1\n\n#### Sample Output\n\n0\n0x3f3f3f3f......\n3\n2\n\n#### Hint\n\n对于a=3,b=1,num=1的情况，也就是只有1个白色蘑菇人，2个黑色蘑菇人的情况，它们听到“至少有1个黑色蘑菇人”。\n它们的心理活动如下：\n在听到lzh说话之前，\nA(黑)：abab......\nB(黑)：abab......\nC(白)：abab......\n在听到lzh说话之后，\nA(黑)：我要走吗？\nB(黑)：我要走吗？\nC(白)：我要走吗？\n第一分钟后，\nA(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？\nB(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？\nC(白)：有2个黑色的，它们应该会在下一分钟后走。\n第二分钟后，\nA(黑)：哦，我也是黑色的，溜了溜了。\nB(黑)：哦，我也是黑色的，溜了溜了。\nC(白)：(~O~)，继续睡觉吧！\n\n### 错点\n\n- 5小时实在是累得，没看到**黑蘑菇是从草坪上离开，结果判了`if (a-b == b == 1) ans = 0`**\n- 蘑菇们都长着眼睛，那“至少有c个蘑菇”这个信息其实是没有用的；因为**蘑菇们看到的是a-b或a-b-1个黑蘑菇**\n- 所以在解题时，没有用到c，猜数据直接输出了a-b。。导致AK失败\n\n### 题解\n\n#### 首先处理两个特殊情况：\n\n- 当蘑菇人只有一种颜色时，`ans=0`（**注意，题意是黑蘑菇离开草坪；当`黑=白=1`时，他们都在草坪上而没有分开**）\n- 当`c`大于`黑色的数量`时，输出`0x3f3f3f3f......`\n\n####  然后是错点\n\n- **蘑菇们看到的是a-b或a-b-1个黑蘑菇**，***但其实，谁也无法确定究竟是多少，也就是薛定谔的猫***\n- 所有蘑菇都很懒，它们都会优先认为自己是白的\n- 一个白/黑的蘑菇看到了n个黑蘑菇，那么它会认为这些黑蘑菇只看到了n-1个黑蘑菇\n- 同时，它将这个想法套用到它看到的黑蘑菇身上，也就是说，它认为这些黑蘑菇认为它的同伴们看到了n-2个\n- 这就是一个递归，而在没有c时，结束条件是0：最后有一个蘑菇**被认为**看到0个黑蘑菇，这样大家都认为自己是白的。\n- 而当至少有c个黑蘑菇时，递归结束条件是c：有蘑菇**被认为看到了c-1个黑蘑菇**，它一定会发现自己是黑的。\n\n#### c=1的情况\n\n- 只有1个时，那么第一分钟会有1个唯一的黑蘑菇反应，因为这个黑蘑菇只能看到白的\n- 而如果它没有反应，只看到1个黑蘑菇的就会有反应：这个黑的没反应，是因为它觉得我应该有反应，那么我是黑的\n- 而如果2个黑蘑菇都没反应：是因为看到2个黑蘑菇的蘑菇希望他们在第2分钟反应。说明在他们以外也看到了2个黑的，那么我是黑的\n- 而3个、4个、N个同理。\n\n最后是c>1，其实就是加速了进程：从有c个蘑菇开始上面的递推。\n\n**最后得出结果：`ans=a-b-c+1`**\n\n### AC代码\n\n```cpp\n#include <iostream>\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  for (int a, b, c; std::cin >> a >> b >> c; std::cout << \"\\n\") {\n    if (b == 0 || a - b == 0) {\n      std::cout << \"0\";\n    } else if (a - b < c) {\n      std::cout << \"0x3f3f3f3f......\";\n    } else {\n      std::cout << a - b - c + 1;\n    }\n  }\n\n  return 0;\n}\n\n```\n\n## 合唱队形\n\n### 题目\n\n#### Description\n\nN位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。\n合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK，则他们的身高满足T1 < T2 < … < Ti , Ti > Ti+1 > … > TK (1 <= i <= K)。\n你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。\n\n#### Input\n\n输入的第一行是一个整数N（2 <= N <= 100），表示同学的总数。\n第一行有n个整数，用空格分隔，第i个整数Ti（130 <= Ti <= 230）是第i位同学的身高（厘米）。\n\n#### Output\n\n可能包括多组测试数据，对于每组数据，\n输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。\n\n#### Sample Input 1 \n\n3\n174 208 219 \n6\n145 206 193 171 187 167 \n0\n\n#### Sample Output 1\n\n0\n1\n\n### 错点\n\n好好人想什么区间DP呢。。。还是做过的原题。。\n\n### 题解\n\n{% post_link Longest-Monotone-Subsequence 最长单调子序列 %}\n\n- 队形呈现一个峰\n- 考虑身高严单增时：那么就是求最长严单增子序列\n- 考虑身高严单减时：将其反序求最长严单增子序列即可\n- 最后合并两者，取出最大值\n\n### AC代码\n\n```cpp\n#include <iostream>\n\nint32_t n, a[2][100];\nint32_t dp[2][100];\n\nvoid LongestIncreasingSubsequence(const int32_t *a, const size_t &n, int32_t *dp) {\n  for (int i = 0; i < n; ++i) {\n    dp[i] = 1;\n    for (int j = 0; j < i; ++j)\n      if (a[j] < a[i] && dp[i] <= dp[j]) dp[i] = dp[j] + 1;\n  }\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> n;\n  for (int i = 0; i < n; ++i) { \n    std::cin >> a[0][i];\n    a[1][n - 1 - i] = a[0][i];\n  }\n\n  LongestIncreasingSubsequence(a[0], n, dp[0]);\n  LongestIncreasingSubsequence(a[1], n, dp[1]);\n\n  int32_t res = 0;\n  for (int i = 0; i < n; ++i) res = std::max(res, dp[0][i] + dp[1][n - 1 - i]);\n\n  std::cout << n - res + 1 << \"\\n\";\n\n  return 0;\n}\n\n```\n\n## 建设电力系统\n\n### 题目\n\n#### Description\n\n小明所在的城市由于下暴雪的原因，电力系统严重受损。许多电力线路被破坏，因此许多村庄与主电网失去了联系。政府想尽快重建电力系统，所以，身为程序员的你被赋予了一项任务，就是编程计算重建电力系统的最少花费，重建的电力系统必须保证任意两个村庄之间至少存在一条通路。\n\n#### Input\n\n输入的第一行为一个整数T（1<=T<=50），表示有T组测试数据。\n\n每组输入第一行是两个正整数N，E（2<=N<=500，N<=E<=N*(N-1)/2），分别表示村庄的个数和原有电力线路的个数。\n\n接下来的E行，每行包含三个整数A，B，K（0<=A,B<N，0<=K<1000）。A和B分别表示电力线路的起始村庄代号。如果K=0，表示这条线路仍然正常。如果K是一个正整数，表示这条线路需要花费K的代价来重建。\n\n题目保证输入中没有重边，也没有起始村庄相同的边。\n\n#### Output\n\n对于每组输入，输出重建电力系统所需的最小花费，以此来保证任意两个村庄之间至少存在一条通路。\n\n#### Sample Input 1 \n\n1\n3 3\n0 1 5\n0 2 0\n1 2 9\n\n#### Sample Output 1\n\n5\n\n### 错点\n\n看出来是最小生成树了，但是忘了怎么写\n\n### 题解\n\n最小生成树的模板题\n\n{% post_link Minimum-Spanning-Tree 最小生成树 %}\n\n### AC代码\n\n```cpp\n#include <algorithm>\n#include <iostream>\n\nconst int kN = 500, kM = kN * (kN - 1) / 2;\nint T, N, E;\nint fa[kN];\n\nstruct Edge {\n  int src, dst, val;\n  bool operator<(const Edge &other) const { return val < other.val; }\n} edges[kM];\n\nint Find(const int &x) { return x == fa[x] ? x : fa[x] = Find(fa[x]); }\nvoid Merge(const int &x, const int &y) { fa[Find(x)] = fa[Find(y)]; }\n\nint Kruskal() {\n  int res = 0;\n  std::sort(edges, edges + E);\n\n  for (int i = 0; i < E; ++i) {\n    int32_t src = Find(edges[i].src), dst = Find(edges[i].dst);\n    if (src == dst) continue;\n    Merge(src, dst);\n    res += edges[i].val;\n  }\n  return res;\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  for (std::cin >> T; T--;) {\n    std::cin >> N >> E;\n    for (int i = 0; i < E; ++i)\n      std::cin >> edges[i].src >> edges[i].dst >> edges[i].val;\n\n    for (int i = 0; i < N; ++i) fa[i] = i;\n    std::cout << Kruskal() << \"\\n\";\n  }\n\n  return 0;\n}\n\n```\n","slug":"ACM-Freshmen-Mistake-Collection","published":1,"updated":"2021-04-25T07:11:17.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuou20001zcl05ip9v2ut","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=551339691&auto=1&height=66\"></iframe></div>\n\n<h2 id=\"做梦\"><a href=\"#做梦\" class=\"headerlink\" title=\"做梦\"></a>做梦</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h4><p>忙碌了一天的lzh疲惫地躺在床上，但还念念不忘白天的习题，渐渐地，他的视野逐渐模糊，随之而来的是另一幅场景……</p>\n<p>在一片祥和的森林里，有一群头顶为黑色菌盖(菌盖就是像顶帽子的那部分)或者白色菌盖的蘑菇人，它们是lzh梦中的生物，其中黑色的蘑菇人有3个、白色的蘑菇人有5个，它们除了头顶的蘑菇颜色不同外，没有什么不同，甚至连思维方式都是一样的！它们通过视觉可以看到除自己以外的其它所有蘑菇人的颜色，现在它们想按颜色分类，白色的蘑菇人为一堆，黑色的蘑菇人为另一堆，但是它们不会说话，也看不到自己的颜色，所以现在它们散乱的坐在一块草坪上，仿佛在思考着什么。</p>\n<p>不知过了多久，处于上帝视角的lzh随口说了句“至少有1个黑色的”，突然蘑菇人们都站了起来，第1分钟过去了，所有蘑菇人没有什么行动……第2分钟过去了，蘑菇人还是没有什么行动……第3分钟后，3个黑色的蘑菇人突然想懂了什么，一蹦一跳地跳出了草坪，坐在了一棵树桩下。作为梦的主人的lzh，也突然明白了这些蘑菇人的行为，因为刚刚谈论的是黑色的蘑菇人，所以当黑色的蘑菇人意识到自己是黑色的时候，就会离开草坪，而蘑菇人思考得很慢，1分钟才能想懂一个问题，但是它们的换位思考能力和逻辑推理能力很不错，并且lzh相信蘑菇人十分聪明，不会相信毫无逻辑的话。</p>\n<p>又不知过了多久，清晨7点的闹钟像往常一样将lzh唤醒，lzh对这个梦还意犹未尽，觉得这个梦真的是太有趣了，所以他将这个梦分享给你，并笑着问你如果总共有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”，那么至少在多少分钟后蘑菇人能分成黑白两部分（草坪内的为一部分，草坪外的为另一部分，黑白蘑菇人不在同一部分时则认为是分成黑白两部分了）。</p>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入只有一行，输入3个整数，依次为a，b，c。(1≤a≤100),(0≤b≤a),(1≤c≤1000)。<br>表示有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”。</p>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>如果你认为在lzh说话之前，蘑菇人早已经分成两部分，那么输出整数0;<br>如果你认为在lzh说完话后，蘑菇人仍然不能分成两部分，那么输出lzh的一小段记忆片段“0x3f3f3f3f……”（不包括引号，但是包括省略号）;<br>如果你认为在lzh说完话后的ans分钟后，蘑菇人才能分成两部分，输出ans。</p>\n<h4 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h4><p>1 1 1<br>2 1 1000<br>8 5 1<br>3 1 1</p>\n<h4 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h4><p>0<br>0x3f3f3f3f……<br>3<br>2</p>\n<h4 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h4><p>对于a=3,b=1,num=1的情况，也就是只有1个白色蘑菇人，2个黑色蘑菇人的情况，它们听到“至少有1个黑色蘑菇人”。<br>它们的心理活动如下：<br>在听到lzh说话之前，<br>A(黑)：abab……<br>B(黑)：abab……<br>C(白)：abab……<br>在听到lzh说话之后，<br>A(黑)：我要走吗？<br>B(黑)：我要走吗？<br>C(白)：我要走吗？<br>第一分钟后，<br>A(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？<br>B(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？<br>C(白)：有2个黑色的，它们应该会在下一分钟后走。<br>第二分钟后，<br>A(黑)：哦，我也是黑色的，溜了溜了。<br>B(黑)：哦，我也是黑色的，溜了溜了。<br>C(白)：(<del>O</del>)，继续睡觉吧！</p>\n<h3 id=\"错点\"><a href=\"#错点\" class=\"headerlink\" title=\"错点\"></a>错点</h3><ul>\n<li>5小时实在是累得，没看到<strong>黑蘑菇是从草坪上离开，结果判了<code>if (a-b == b == 1) ans = 0</code></strong></li>\n<li>蘑菇们都长着眼睛，那“至少有c个蘑菇”这个信息其实是没有用的；因为<strong>蘑菇们看到的是a-b或a-b-1个黑蘑菇</strong></li>\n<li>所以在解题时，没有用到c，猜数据直接输出了a-b。。导致AK失败</li>\n</ul>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h4 id=\"首先处理两个特殊情况：\"><a href=\"#首先处理两个特殊情况：\" class=\"headerlink\" title=\"首先处理两个特殊情况：\"></a>首先处理两个特殊情况：</h4><ul>\n<li>当蘑菇人只有一种颜色时，<code>ans=0</code>（<strong>注意，题意是黑蘑菇离开草坪；当<code>黑=白=1</code>时，他们都在草坪上而没有分开</strong>）</li>\n<li>当<code>c</code>大于<code>黑色的数量</code>时，输出<code>0x3f3f3f3f......</code></li>\n</ul>\n<h4 id=\"然后是错点\"><a href=\"#然后是错点\" class=\"headerlink\" title=\"然后是错点\"></a>然后是错点</h4><ul>\n<li><strong>蘑菇们看到的是a-b或a-b-1个黑蘑菇</strong>，<strong><em>但其实，谁也无法确定究竟是多少，也就是薛定谔的猫</em></strong></li>\n<li>所有蘑菇都很懒，它们都会优先认为自己是白的</li>\n<li>一个白/黑的蘑菇看到了n个黑蘑菇，那么它会认为这些黑蘑菇只看到了n-1个黑蘑菇</li>\n<li>同时，它将这个想法套用到它看到的黑蘑菇身上，也就是说，它认为这些黑蘑菇认为它的同伴们看到了n-2个</li>\n<li>这就是一个递归，而在没有c时，结束条件是0：最后有一个蘑菇<strong>被认为</strong>看到0个黑蘑菇，这样大家都认为自己是白的。</li>\n<li>而当至少有c个黑蘑菇时，递归结束条件是c：有蘑菇<strong>被认为看到了c-1个黑蘑菇</strong>，它一定会发现自己是黑的。</li>\n</ul>\n<h4 id=\"c-1的情况\"><a href=\"#c-1的情况\" class=\"headerlink\" title=\"c=1的情况\"></a>c=1的情况</h4><ul>\n<li>只有1个时，那么第一分钟会有1个唯一的黑蘑菇反应，因为这个黑蘑菇只能看到白的</li>\n<li>而如果它没有反应，只看到1个黑蘑菇的就会有反应：这个黑的没反应，是因为它觉得我应该有反应，那么我是黑的</li>\n<li>而如果2个黑蘑菇都没反应：是因为看到2个黑蘑菇的蘑菇希望他们在第2分钟反应。说明在他们以外也看到了2个黑的，那么我是黑的</li>\n<li>而3个、4个、N个同理。</li>\n</ul>\n<p>最后是c&gt;1，其实就是加速了进程：从有c个蘑菇开始上面的递推。</p>\n<p><strong>最后得出结果：<code>ans=a-b-c+1</code></strong></p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span> std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> a <span class=\"token operator\">-</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"0x3f3f3f3f......\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">-</span> b <span class=\"token operator\">-</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"合唱队形\"><a href=\"#合唱队形\" class=\"headerlink\" title=\"合唱队形\"></a>合唱队形</h2><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h4><p>N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。<br>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK，则他们的身高满足T1 &lt; T2 &lt; … &lt; Ti , Ti &gt; Ti+1 &gt; … &gt; TK (1 &lt;= i &lt;= K)。<br>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p>\n<h4 id=\"Input-1\"><a href=\"#Input-1\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入的第一行是一个整数N（2 &lt;= N &lt;= 100），表示同学的总数。<br>第一行有n个整数，用空格分隔，第i个整数Ti（130 &lt;= Ti &lt;= 230）是第i位同学的身高（厘米）。</p>\n<h4 id=\"Output-1\"><a href=\"#Output-1\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>可能包括多组测试数据，对于每组数据，<br>输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。</p>\n<h4 id=\"Sample-Input-1\"><a href=\"#Sample-Input-1\" class=\"headerlink\" title=\"Sample Input 1\"></a>Sample Input 1</h4><p>3<br>174 208 219<br>6<br>145 206 193 171 187 167<br>0</p>\n<h4 id=\"Sample-Output-1\"><a href=\"#Sample-Output-1\" class=\"headerlink\" title=\"Sample Output 1\"></a>Sample Output 1</h4><p>0<br>1</p>\n<h3 id=\"错点-1\"><a href=\"#错点-1\" class=\"headerlink\" title=\"错点\"></a>错点</h3><p>好好人想什么区间DP呢。。。还是做过的原题。。</p>\n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3><a href=\"/longest-monotone-subsequence/\" title=\"最长单调子序列\">最长单调子序列</a>\n\n<ul>\n<li>队形呈现一个峰</li>\n<li>考虑身高严单增时：那么就是求最长严单增子序列</li>\n<li>考虑身高严单减时：将其反序求最长严单增子序列即可</li>\n<li>最后合并两者，取出最大值</li>\n</ul>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\nint32_t n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nint32_t dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">LongestIncreasingSubsequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> int32_t <span class=\"token operator\">*</span>dp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">LongestIncreasingSubsequence</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">LongestIncreasingSubsequence</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  int32_t res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> res <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">-</span> res <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"建设电力系统\"><a href=\"#建设电力系统\" class=\"headerlink\" title=\"建设电力系统\"></a>建设电力系统</h2><h3 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h4><p>小明所在的城市由于下暴雪的原因，电力系统严重受损。许多电力线路被破坏，因此许多村庄与主电网失去了联系。政府想尽快重建电力系统，所以，身为程序员的你被赋予了一项任务，就是编程计算重建电力系统的最少花费，重建的电力系统必须保证任意两个村庄之间至少存在一条通路。</p>\n<h4 id=\"Input-2\"><a href=\"#Input-2\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入的第一行为一个整数T（1&lt;=T&lt;=50），表示有T组测试数据。</p>\n<p>每组输入第一行是两个正整数N，E（2&lt;=N&lt;=500，N&lt;=E&lt;=N*(N-1)/2），分别表示村庄的个数和原有电力线路的个数。</p>\n<p>接下来的E行，每行包含三个整数A，B，K（0&lt;=A,B&lt;N，0&lt;=K&lt;1000）。A和B分别表示电力线路的起始村庄代号。如果K=0，表示这条线路仍然正常。如果K是一个正整数，表示这条线路需要花费K的代价来重建。</p>\n<p>题目保证输入中没有重边，也没有起始村庄相同的边。</p>\n<h4 id=\"Output-2\"><a href=\"#Output-2\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>对于每组输入，输出重建电力系统所需的最小花费，以此来保证任意两个村庄之间至少存在一条通路。</p>\n<h4 id=\"Sample-Input-1-1\"><a href=\"#Sample-Input-1-1\" class=\"headerlink\" title=\"Sample Input 1\"></a>Sample Input 1</h4><p>1<br>3 3<br>0 1 5<br>0 2 0<br>1 2 9</p>\n<h4 id=\"Sample-Output-1-1\"><a href=\"#Sample-Output-1-1\" class=\"headerlink\" title=\"Sample Output 1\"></a>Sample Output 1</h4><p>5</p>\n<h3 id=\"错点-2\"><a href=\"#错点-2\" class=\"headerlink\" title=\"错点\"></a>错点</h3><p>看出来是最小生成树了，但是忘了怎么写</p>\n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>最小生成树的模板题</p>\n<a href=\"/minimum-spanning-tree/\" title=\"最小生成树\">最小生成树</a>\n\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> kN <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> kM <span class=\"token operator\">=</span> kN <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>kN <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span>kN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Edge <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Edge <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> val <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> edges<span class=\"token punctuation\">[</span>kM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">==</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fa<span class=\"token punctuation\">[</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">[</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">,</span> edges <span class=\"token operator\">+</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    int32_t src <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dst <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> dst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span> T<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">>></span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dst <span class=\"token operator\">>></span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=551339691&auto=1&height=66\"></iframe></div>\n\n<h2 id=\"做梦\"><a href=\"#做梦\" class=\"headerlink\" title=\"做梦\"></a>做梦</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h4><p>忙碌了一天的lzh疲惫地躺在床上，但还念念不忘白天的习题，渐渐地，他的视野逐渐模糊，随之而来的是另一幅场景……</p>\n<p>在一片祥和的森林里，有一群头顶为黑色菌盖(菌盖就是像顶帽子的那部分)或者白色菌盖的蘑菇人，它们是lzh梦中的生物，其中黑色的蘑菇人有3个、白色的蘑菇人有5个，它们除了头顶的蘑菇颜色不同外，没有什么不同，甚至连思维方式都是一样的！它们通过视觉可以看到除自己以外的其它所有蘑菇人的颜色，现在它们想按颜色分类，白色的蘑菇人为一堆，黑色的蘑菇人为另一堆，但是它们不会说话，也看不到自己的颜色，所以现在它们散乱的坐在一块草坪上，仿佛在思考着什么。</p>\n<p>不知过了多久，处于上帝视角的lzh随口说了句“至少有1个黑色的”，突然蘑菇人们都站了起来，第1分钟过去了，所有蘑菇人没有什么行动……第2分钟过去了，蘑菇人还是没有什么行动……第3分钟后，3个黑色的蘑菇人突然想懂了什么，一蹦一跳地跳出了草坪，坐在了一棵树桩下。作为梦的主人的lzh，也突然明白了这些蘑菇人的行为，因为刚刚谈论的是黑色的蘑菇人，所以当黑色的蘑菇人意识到自己是黑色的时候，就会离开草坪，而蘑菇人思考得很慢，1分钟才能想懂一个问题，但是它们的换位思考能力和逻辑推理能力很不错，并且lzh相信蘑菇人十分聪明，不会相信毫无逻辑的话。</p>\n<p>又不知过了多久，清晨7点的闹钟像往常一样将lzh唤醒，lzh对这个梦还意犹未尽，觉得这个梦真的是太有趣了，所以他将这个梦分享给你，并笑着问你如果总共有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”，那么至少在多少分钟后蘑菇人能分成黑白两部分（草坪内的为一部分，草坪外的为另一部分，黑白蘑菇人不在同一部分时则认为是分成黑白两部分了）。</p>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入只有一行，输入3个整数，依次为a，b，c。(1≤a≤100),(0≤b≤a),(1≤c≤1000)。<br>表示有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”。</p>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>如果你认为在lzh说话之前，蘑菇人早已经分成两部分，那么输出整数0;<br>如果你认为在lzh说完话后，蘑菇人仍然不能分成两部分，那么输出lzh的一小段记忆片段“0x3f3f3f3f……”（不包括引号，但是包括省略号）;<br>如果你认为在lzh说完话后的ans分钟后，蘑菇人才能分成两部分，输出ans。</p>\n<h4 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h4><p>1 1 1<br>2 1 1000<br>8 5 1<br>3 1 1</p>\n<h4 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h4><p>0<br>0x3f3f3f3f……<br>3<br>2</p>\n<h4 id=\"Hint\"><a href=\"#Hint\" class=\"headerlink\" title=\"Hint\"></a>Hint</h4><p>对于a=3,b=1,num=1的情况，也就是只有1个白色蘑菇人，2个黑色蘑菇人的情况，它们听到“至少有1个黑色蘑菇人”。<br>它们的心理活动如下：<br>在听到lzh说话之前，<br>A(黑)：abab……<br>B(黑)：abab……<br>C(白)：abab……<br>在听到lzh说话之后，<br>A(黑)：我要走吗？<br>B(黑)：我要走吗？<br>C(白)：我要走吗？<br>第一分钟后，<br>A(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？<br>B(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？<br>C(白)：有2个黑色的，它们应该会在下一分钟后走。<br>第二分钟后，<br>A(黑)：哦，我也是黑色的，溜了溜了。<br>B(黑)：哦，我也是黑色的，溜了溜了。<br>C(白)：(<del>O</del>)，继续睡觉吧！</p>\n<h3 id=\"错点\"><a href=\"#错点\" class=\"headerlink\" title=\"错点\"></a>错点</h3><ul>\n<li>5小时实在是累得，没看到<strong>黑蘑菇是从草坪上离开，结果判了<code>if (a-b == b == 1) ans = 0</code></strong></li>\n<li>蘑菇们都长着眼睛，那“至少有c个蘑菇”这个信息其实是没有用的；因为<strong>蘑菇们看到的是a-b或a-b-1个黑蘑菇</strong></li>\n<li>所以在解题时，没有用到c，猜数据直接输出了a-b。。导致AK失败</li>\n</ul>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h4 id=\"首先处理两个特殊情况：\"><a href=\"#首先处理两个特殊情况：\" class=\"headerlink\" title=\"首先处理两个特殊情况：\"></a>首先处理两个特殊情况：</h4><ul>\n<li>当蘑菇人只有一种颜色时，<code>ans=0</code>（<strong>注意，题意是黑蘑菇离开草坪；当<code>黑=白=1</code>时，他们都在草坪上而没有分开</strong>）</li>\n<li>当<code>c</code>大于<code>黑色的数量</code>时，输出<code>0x3f3f3f3f......</code></li>\n</ul>\n<h4 id=\"然后是错点\"><a href=\"#然后是错点\" class=\"headerlink\" title=\"然后是错点\"></a>然后是错点</h4><ul>\n<li><strong>蘑菇们看到的是a-b或a-b-1个黑蘑菇</strong>，<strong><em>但其实，谁也无法确定究竟是多少，也就是薛定谔的猫</em></strong></li>\n<li>所有蘑菇都很懒，它们都会优先认为自己是白的</li>\n<li>一个白/黑的蘑菇看到了n个黑蘑菇，那么它会认为这些黑蘑菇只看到了n-1个黑蘑菇</li>\n<li>同时，它将这个想法套用到它看到的黑蘑菇身上，也就是说，它认为这些黑蘑菇认为它的同伴们看到了n-2个</li>\n<li>这就是一个递归，而在没有c时，结束条件是0：最后有一个蘑菇<strong>被认为</strong>看到0个黑蘑菇，这样大家都认为自己是白的。</li>\n<li>而当至少有c个黑蘑菇时，递归结束条件是c：有蘑菇<strong>被认为看到了c-1个黑蘑菇</strong>，它一定会发现自己是黑的。</li>\n</ul>\n<h4 id=\"c-1的情况\"><a href=\"#c-1的情况\" class=\"headerlink\" title=\"c=1的情况\"></a>c=1的情况</h4><ul>\n<li>只有1个时，那么第一分钟会有1个唯一的黑蘑菇反应，因为这个黑蘑菇只能看到白的</li>\n<li>而如果它没有反应，只看到1个黑蘑菇的就会有反应：这个黑的没反应，是因为它觉得我应该有反应，那么我是黑的</li>\n<li>而如果2个黑蘑菇都没反应：是因为看到2个黑蘑菇的蘑菇希望他们在第2分钟反应。说明在他们以外也看到了2个黑的，那么我是黑的</li>\n<li>而3个、4个、N个同理。</li>\n</ul>\n<p>最后是c&gt;1，其实就是加速了进程：从有c个蘑菇开始上面的递推。</p>\n<p><strong>最后得出结果：<code>ans=a-b-c+1</code></strong></p>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  for (int a, b, c; std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; std::cout &lt;&lt; &quot;\\n&quot;) {\n    if (b == 0 || a - b == 0) {\n      std::cout &lt;&lt; &quot;0&quot;;\n    } else if (a - b &lt; c) {\n      std::cout &lt;&lt; &quot;0x3f3f3f3f......&quot;;\n    } else {\n      std::cout &lt;&lt; a - b - c + 1;\n    }\n  }\n\n  return 0;\n}\n</code></pre>\n<h2 id=\"合唱队形\"><a href=\"#合唱队形\" class=\"headerlink\" title=\"合唱队形\"></a>合唱队形</h2><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h4><p>N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。<br>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK，则他们的身高满足T1 &lt; T2 &lt; … &lt; Ti , Ti &gt; Ti+1 &gt; … &gt; TK (1 &lt;= i &lt;= K)。<br>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p>\n<h4 id=\"Input-1\"><a href=\"#Input-1\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入的第一行是一个整数N（2 &lt;= N &lt;= 100），表示同学的总数。<br>第一行有n个整数，用空格分隔，第i个整数Ti（130 &lt;= Ti &lt;= 230）是第i位同学的身高（厘米）。</p>\n<h4 id=\"Output-1\"><a href=\"#Output-1\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>可能包括多组测试数据，对于每组数据，<br>输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。</p>\n<h4 id=\"Sample-Input-1\"><a href=\"#Sample-Input-1\" class=\"headerlink\" title=\"Sample Input 1\"></a>Sample Input 1</h4><p>3<br>174 208 219<br>6<br>145 206 193 171 187 167<br>0</p>\n<h4 id=\"Sample-Output-1\"><a href=\"#Sample-Output-1\" class=\"headerlink\" title=\"Sample Output 1\"></a>Sample Output 1</h4><p>0<br>1</p>\n<h3 id=\"错点-1\"><a href=\"#错点-1\" class=\"headerlink\" title=\"错点\"></a>错点</h3><p>好好人想什么区间DP呢。。。还是做过的原题。。</p>\n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3><a href=\"/longest-monotone-subsequence/\" title=\"最长单调子序列\">最长单调子序列</a>\n\n<ul>\n<li>队形呈现一个峰</li>\n<li>考虑身高严单增时：那么就是求最长严单增子序列</li>\n<li>考虑身高严单减时：将其反序求最长严单增子序列即可</li>\n<li>最后合并两者，取出最大值</li>\n</ul>\n<h3 id=\"AC代码-1\"><a href=\"#AC代码-1\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nint32_t n, a[2][100];\nint32_t dp[2][100];\n\nvoid LongestIncreasingSubsequence(const int32_t *a, const size_t &amp;n, int32_t *dp) {\n  for (int i = 0; i &lt; n; ++i) {\n    dp[i] = 1;\n    for (int j = 0; j &lt; i; ++j)\n      if (a[j] &lt; a[i] &amp;&amp; dp[i] &lt;= dp[j]) dp[i] = dp[j] + 1;\n  }\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin &gt;&gt; n;\n  for (int i = 0; i &lt; n; ++i) { \n    std::cin &gt;&gt; a[0][i];\n    a[1][n - 1 - i] = a[0][i];\n  }\n\n  LongestIncreasingSubsequence(a[0], n, dp[0]);\n  LongestIncreasingSubsequence(a[1], n, dp[1]);\n\n  int32_t res = 0;\n  for (int i = 0; i &lt; n; ++i) res = std::max(res, dp[0][i] + dp[1][n - 1 - i]);\n\n  std::cout &lt;&lt; n - res + 1 &lt;&lt; &quot;\\n&quot;;\n\n  return 0;\n}\n</code></pre>\n<h2 id=\"建设电力系统\"><a href=\"#建设电力系统\" class=\"headerlink\" title=\"建设电力系统\"></a>建设电力系统</h2><h3 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"Description-1\"><a href=\"#Description-1\" class=\"headerlink\" title=\"Description\"></a>Description</h4><p>小明所在的城市由于下暴雪的原因，电力系统严重受损。许多电力线路被破坏，因此许多村庄与主电网失去了联系。政府想尽快重建电力系统，所以，身为程序员的你被赋予了一项任务，就是编程计算重建电力系统的最少花费，重建的电力系统必须保证任意两个村庄之间至少存在一条通路。</p>\n<h4 id=\"Input-2\"><a href=\"#Input-2\" class=\"headerlink\" title=\"Input\"></a>Input</h4><p>输入的第一行为一个整数T（1&lt;=T&lt;=50），表示有T组测试数据。</p>\n<p>每组输入第一行是两个正整数N，E（2&lt;=N&lt;=500，N&lt;=E&lt;=N*(N-1)/2），分别表示村庄的个数和原有电力线路的个数。</p>\n<p>接下来的E行，每行包含三个整数A，B，K（0&lt;=A,B&lt;N，0&lt;=K&lt;1000）。A和B分别表示电力线路的起始村庄代号。如果K=0，表示这条线路仍然正常。如果K是一个正整数，表示这条线路需要花费K的代价来重建。</p>\n<p>题目保证输入中没有重边，也没有起始村庄相同的边。</p>\n<h4 id=\"Output-2\"><a href=\"#Output-2\" class=\"headerlink\" title=\"Output\"></a>Output</h4><p>对于每组输入，输出重建电力系统所需的最小花费，以此来保证任意两个村庄之间至少存在一条通路。</p>\n<h4 id=\"Sample-Input-1-1\"><a href=\"#Sample-Input-1-1\" class=\"headerlink\" title=\"Sample Input 1\"></a>Sample Input 1</h4><p>1<br>3 3<br>0 1 5<br>0 2 0<br>1 2 9</p>\n<h4 id=\"Sample-Output-1-1\"><a href=\"#Sample-Output-1-1\" class=\"headerlink\" title=\"Sample Output 1\"></a>Sample Output 1</h4><p>5</p>\n<h3 id=\"错点-2\"><a href=\"#错点-2\" class=\"headerlink\" title=\"错点\"></a>错点</h3><p>看出来是最小生成树了，但是忘了怎么写</p>\n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>最小生成树的模板题</p>\n<a href=\"/minimum-spanning-tree/\" title=\"最小生成树\">最小生成树</a>\n\n<h3 id=\"AC代码-2\"><a href=\"#AC代码-2\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code class=\"cpp\">#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nconst int kN = 500, kM = kN * (kN - 1) / 2;\nint T, N, E;\nint fa[kN];\n\nstruct Edge {\n  int src, dst, val;\n  bool operator&lt;(const Edge &amp;other) const { return val &lt; other.val; }\n} edges[kM];\n\nint Find(const int &amp;x) { return x == fa[x] ? x : fa[x] = Find(fa[x]); }\nvoid Merge(const int &amp;x, const int &amp;y) { fa[Find(x)] = fa[Find(y)]; }\n\nint Kruskal() {\n  int res = 0;\n  std::sort(edges, edges + E);\n\n  for (int i = 0; i &lt; E; ++i) {\n    int32_t src = Find(edges[i].src), dst = Find(edges[i].dst);\n    if (src == dst) continue;\n    Merge(src, dst);\n    res += edges[i].val;\n  }\n  return res;\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  for (std::cin &gt;&gt; T; T--;) {\n    std::cin &gt;&gt; N &gt;&gt; E;\n    for (int i = 0; i &lt; E; ++i)\n      std::cin &gt;&gt; edges[i].src &gt;&gt; edges[i].dst &gt;&gt; edges[i].val;\n\n    for (int i = 0; i &lt; N; ++i) fa[i] = i;\n    std::cout &lt;&lt; Kruskal() &lt;&lt; &quot;\\n&quot;;\n  }\n\n  return 0;\n}\n</code></pre>\n"},{"title":"Binary Indexed Tree","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2020-12-08T22:46:23.000Z","password":null,"summary":"树状数组","_content":"\n## 树状数组\n\n[树状数组](binary-indexed-tree.png)\n\n> 按照Peter M. Fenwick的说法，正如所有的整数都可以表示成2的幂和，我们也可以把一串序列表示成一系列子序列的和。采用这个想法，我们可将一个前缀和划分成多个子序列的和，而划分的方法与数的2的幂和具有极其相似的方式。一方面，子序列的个数是其二进制表示中1的个数，另一方面，子序列代表的f[i]的个数也是2的幂。\n\n二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度\n\n### 应用\n\n- 按照定义可以实现：\n  - 单点修改，区间查询\n\n- 加上{% post_link Prefix-Sum-and-Finite-Difference 前缀和与差分 %}可以实现：\n  - 区间修改，单点查询\n  - 区间修改，区间查询\n\n### 单点修改，区间查询\n\n修改一个子节点时，会影响其父节点的值；而如何从子节点索引到父节点的？\n\n**二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度**\n\n- 故，欲索引到父节点，即索引到上层，只需将其最低位1加1进位\n- 而反之将最低位1置0,则索引到当前节点上层的，非当前节点之父的节点\n- 可用LowBit函数取出最低位1\n\n\n#### 模板\n\n[模板题：树状数组1：单点修改，区间查询](https://vjudge.net/problem/LibreOJ-130)\n\n```cpp\ninline size_t LowBit(const size_t &x) { return x & -x; }\n\ntemplate <class DataT>\nclass BinaryIndexedTree final {\n  DataT *data_;\n  size_t size_;\n\n public:\n  BinaryIndexedTree(const size_t &size)\n      : data_(new DataT[size + 1]), size_(size) {\n    for (size_t i = 0; i <= size_; ++i) data_[i] = 0;\n  }\n\n  template <class ArrT>\n  BinaryIndexedTree(const ArrT &arr, const size_t &size)\n      : BinaryIndexedTree(size) {\n    for (size_t i = 1; i <= size_; ++i) {\n      data_[i] += arr[i];\n      size_t &&p = i + LowBit(i);\n      if (p <= size_) data_[p] += data_[i];\n    }\n  }\n\n  ~BinaryIndexedTree() { delete[] data_; }\n\n  void Add(size_t p, const DataT &val) {\n    for (; p <= size_; p += LowBit(p)) data_[p] += val;\n  }\n\n  DataT GetSum(size_t p) const {\n    DataT res = 0;\n    for (; p; p -= LowBit(p)) res += data_[p];\n    return res;\n  }\n\n  DataT GetSum(const size_t &l, const size_t &r) const {\n    return GetSum(r) - GetSum(l - 1);\n  }\n};\n\n```\n\n### 区间修改，单点查询\n\n对差分数组建立树状数组即可\n\n#### 模板\n\n[模板题：树状数组2：区间修改，单点查询](https://vjudge.net/problem/LibreOJ-131)\n\n```cpp\n// auto diff = BinaryIndexedTree<int>(n + 1);\n\ntemplate <class DataT>\ninline void Modify(BinaryIndexedTree<DataT> *diff, const size_t &l,\n                   const size_t &r, const DataT &val) {\n  diff->Add(l, val);\n  diff->Add(r + 1, -val);\n}\n\n```\n\n### 区间修改，区间查询\n\n> 考虑$a[]$的前缀和与差分数组$diff[]$的关系：\n> \n> $\\sum_{i=1}^{n}a[i]$\n> \n> $=\\sum_{i=1}^{n}\\sum_{j=1}^{i}diff[j]$\n> \n> $=\\sum_{i=1}^{n}diff[i]*(n-i+1)$\n> \n> $=(n+1)\\sum_{i=1}^{n}diff[i] - \\sum_{i=1}^{n}diff[i]*i$\n\n所以，可以对$diff[i]$和$diff[i]*i$分别建立树状数组\n\n#### 模板\n\n[模板题：树状数组3：区间修改，区间查询](https://vjudge.net/problem/LibreOJ-132)\n\n```cpp\n// GenerateBinaryIndexedTree(diff_tree, nullptr, size);\n// GenerateBinaryIndexedTree(diff_muti, nullptr, size);\n\ntemplate <class DataT>\nvoid Modify(BinaryIndexedTree<DataT> *diff_tree,\n            BinaryIndexedTree<DataT> *diff_muti, const size_t &l,\n            const size_t &r, const DataT &val) {\n  diff_tree->Add(l, val);\n  diff_tree->Add(r + 1, -val);\n  diff_muti->Add(l, val * l);\n  diff_muti->Add(r + 1, -val * (r + 1));\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree<DataT> &diff_tree,\n                   const BinaryIndexedTree<DataT> &diff_muti, const size_t &p) {\n  return (p + 1) * diff_tree.GetSum(p) - diff_muti.GetSum(p);\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree<DataT> &diff_tree,\n                   const BinaryIndexedTree<DataT> &diff_muti, const size_t &l,\n                   const size_t &r) {\n  return Query(diff_tree, diff_tree, r) - Query(diff_tree, diff_muti, l - 1);\n}\n\n```\n\n## 二维树状数组\n\n**二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度**\n\n一维树状数组$tree[i]$记录了右端点为$i$，长度为$LowBit(i)$的区间和\n\n二维树状数组$tree[y][x]$记录了右下角为$(y, x)$，高为$LowBit(y)$，宽为$LowBit(x)$的二维区间和\n\n### 单点修改，区间查询\n\n只需要按照定义，使用容斥原理，对一维树状数组修改\n\n[模板题：二维树状数组1：单点修改，区间查询](https://vjudge.net/problem/LibreOJ-133)\n\n#### 模板\n\n```cpp\ninline size_t LowBit(const size_t &x) { return x & -x; }\n\ntemplate <class DataT>\nclass BinaryIndexedTree2D final {\n  DataT **data_;\n  size_t size_y_, size_x_;\n\n public:\n  BinaryIndexedTree2D(const size_t &size_y, const size_t &size_x)\n      : data_(new DataT *[size_y + 1]), size_y_(size_y), size_x_(size_x) {\n    for (size_t y = 0; y <= size_y_; ++y) {\n      data_[y] = new DataT [size_x_ + 1];\n      for (size_t x = 0; x <= size_x_; ++x) data_[y][x] = 0;\n    }\n  }\n\n  template <class Arr2DT>\n  BinaryIndexedTree2D(const Arr2DT &arr2d, const size_t &size_y,\n                      const size_t &size_x)\n      : BinaryIndexedTree2D(size_y, size_x) {\n    for (size_t y = 1; y <= size_y_; ++y)\n      for (size_t x = 1; x <= size_x_; ++x) {\n        data_[y][x] += arr2d[y][x];\n        size_t &&xx = x + LowBit(x);\n        size_t &&yy = y + LowBit(y);\n\n        if (xx <= size_x_) data_[y][xx] += data_[y][x];\n        if (yy <= size_y_) data_[yy][x] += data_[y][x];\n        if (xx <= size_x_ && yy <= size_y_) data_[yy][xx] += data_[y][x];\n      }\n  }\n\n  ~BinaryIndexedTree2D() {\n    for (size_t y = 0; y <= size_y_; ++y) delete[] data_[y];\n    delete[] data_;\n  }\n\n  void Add(const size_t &y, const size_t &x, const DataT &val) {\n    for (size_t yy = y; yy <= size_y_; yy += LowBit(yy))\n      for (size_t xx = x; xx <= size_x_; xx += LowBit(xx)) data_[yy][xx] += val;\n  }\n\n  DataT GetSum(const size_t &y, const size_t &x) const {\n    DataT res = 0;\n    for (size_t yy = y; yy; yy -= LowBit(yy))\n      for (size_t xx = x; xx; xx -= LowBit(xx)) res += data_[yy][xx];\n    return res;\n  }\n\n  DataT GetSum(const size_t &y0, const size_t &x0, const size_t &y1,\n               const size_t &x1) const {\n    return GetSum(y1, x1) - GetSum(y0 - 1, x1) - GetSum(y1, x0 - 1) +\n           GetSum(y0 - 1, x0 - 1);\n  }\n};\n\n```\n\n### 区间修改，单点查询\n\n对二维差分数组建立二维树状数组即可\n\n#### 模板\n\n[模板题：二维树状数组2：区间修改，单点查询](https://vjudge.net/problem/LibreOJ-134)\n\n```cpp\n// auto diff = BinaryIndexedTree2D<int64_t>(n, m);\n\ntemplate <class DataT>\ninline void Modify2D(BinaryIndexedTree2D<DataT> *diff, const size_t &y0,\n                   const size_t &x0, const size_t &y1, const size_t &x1,\n                   const DataT &val) {\n  diff->Add(y0, x0, val);\n  diff->Add(y1 + 1, x0, -val);\n  diff->Add(y0, x1 + 1, -val);\n  diff->Add(y1 + 1, x1 + 1, val);\n}\n\n```\n\n### 区间修改，区间查询\n\n**这个厉害了！**\n\n依然按照一维树状数组-区间修改，区间查询的思路；先看看数学\n\n> 考虑$a[][]$的前缀和与差分数组$diff[][]$的关系：\n> \n> $\\sum_{y=1}^{Y}\\sum_{x=1}^{X}a[y][x]$\n> \n> $=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}\\sum_{yy=1}^{y}\\sum_{xx=1}^{x}diff[yy][xx]$\n> \n> $=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$\n> \n> 因为$(Y-y+1)(X-x+1)=(Y+1)(X+1)-(Y+1)x-(X+1)y+xy$，所以：\n>\n> $\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$\n> \n> $=(Y+1)(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]$\n> \n> $-(Y+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*x$\n> \n> $-(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*y$\n> \n> $+\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*yx$\n\n所以，建立四个二维树状数组：\n\n- $diff[y][x]$\n\n- $diff[y][x]*x$\n\n- $diff[y][x]*y$\n\n- $diff[y][x]*yx$\n\n#### 模板\n\n[模板题：二维树状数组3：区间修改，区间查询](https://vjudge.net/problem/LibreOJ-135)\n\n```cpp\ntemplate <class DataT>\ninline void Modify2D(BinaryIndexedTree2D<DataT> diff[], const size_t &y0,\n                     const size_t &x0, const size_t &y1, const size_t &x1,\n                     const DataT &val) {\n  diff[0].Add(y0, x0, val);\n  diff[0].Add(y1 + 1, x0, -val);\n  diff[0].Add(y0, x1 + 1, -val);\n  diff[0].Add(y1 + 1, x1 + 1, val);\n\n  diff[1].Add(y0, x0, val * x0);\n  diff[1].Add(y1 + 1, x0, -val * x0);\n  diff[1].Add(y0, x1 + 1, -val * (x1 + 1));\n  diff[1].Add(y1 + 1, x1 + 1, val * (x1 + 1));\n\n  diff[2].Add(y0, x0, val * y0);\n  diff[2].Add(y1 + 1, x0, -val * (y1 + 1));\n  diff[2].Add(y0, x1 + 1, -val * y0);\n  diff[2].Add(y1 + 1, x1 + 1, val * (y1 + 1));\n\n  diff[3].Add(y0, x0, val * y0 * x0);\n  diff[3].Add(y1 + 1, x0, -val * (y1 + 1) * x0);\n  diff[3].Add(y0, x1 + 1, -val * y0 * (x1 + 1));\n  diff[3].Add(y1 + 1, x1 + 1, val * (y1 + 1) * (x1 + 1));\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y, const size_t &x) {\n  return (y + 1) * (x + 1) * diff_tree[0].GetSum(y, x) -\n         (y + 1) * diff_tree[1].GetSum(y, x) -\n         (x + 1) * diff_tree[2].GetSum(y, x) + diff_tree[3].GetSum(y, x);\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y0, const size_t &x0, const size_t &y1,\n                   const size_t &x1) {\n  return Query(diff_tree, y1, x1) - Query(diff_tree, y0 - 1, x1) -\n         Query(diff_tree, y1, x0 - 1) + Query(diff_tree, y0 - 1, x0 - 1);\n}\n\n```\n\n完整代码\n\n```cpp\n#include <iostream>\n\ninline size_t LowBit(const size_t &x) { return x & -x; }\n\ntemplate <class DataT>\nclass BinaryIndexedTree2D final {\n  DataT **data_;\n  size_t size_y_, size_x_;\n\n public:\n  BinaryIndexedTree2D(const size_t &size_y, const size_t &size_x)\n      : data_(new DataT *[size_y + 1]), size_y_(size_y), size_x_(size_x) {\n    for (size_t y = 0; y <= size_y_; ++y) {\n      data_[y] = new DataT[size_x_ + 1];\n      for (size_t x = 0; x <= size_x_; ++x) data_[y][x] = 0;\n    }\n  }\n\n  template <class Arr2DT>\n  BinaryIndexedTree2D(const Arr2DT &arr2d, const size_t &size_y,\n                      const size_t &size_x)\n      : BinaryIndexedTree2D(size_y, size_x) {\n    for (size_t y = 1; y <= size_y_; ++y)\n      for (size_t x = 1; x <= size_x_; ++x) {\n        data_[y][x] += arr2d[y][x];\n        size_t &&xx = x + LowBit(x);\n        size_t &&yy = y + LowBit(y);\n\n        if (xx <= size_x_) data_[y][xx] += data_[y][x];\n        if (yy <= size_y_) data_[yy][x] += data_[y][x];\n        if (xx <= size_x_ && yy <= size_y_) data_[yy][xx] += data_[y][x];\n      }\n  }\n\n  ~BinaryIndexedTree2D() {\n    for (size_t y = 0; y <= size_y_; ++y) delete[] data_[y];\n    delete[] data_;\n  }\n\n  void Add(const size_t &y, const size_t &x, const DataT &val) {\n    for (size_t yy = y; yy <= size_y_; yy += LowBit(yy))\n      for (size_t xx = x; xx <= size_x_; xx += LowBit(xx)) data_[yy][xx] += val;\n  }\n\n  DataT GetSum(const size_t &y, const size_t &x) const {\n    DataT res = 0;\n    for (size_t yy = y; yy; yy -= LowBit(yy))\n      for (size_t xx = x; xx; xx -= LowBit(xx)) res += data_[yy][xx];\n    return res;\n  }\n\n  DataT GetSum(const size_t &y0, const size_t &x0, const size_t &y1,\n               const size_t &x1) const {\n    return GetSum(y1, x1) - GetSum(y0 - 1, x1) - GetSum(y1, x0 - 1) +\n           GetSum(y0 - 1, x0 - 1);\n  }\n};\n\ntemplate <class DataT>\ninline void Modify2D(BinaryIndexedTree2D<DataT> diff[], const size_t &y0,\n                     const size_t &x0, const size_t &y1, const size_t &x1,\n                     const DataT &val) {\n  diff[0].Add(y0, x0, val);\n  diff[0].Add(y1 + 1, x0, -val);\n  diff[0].Add(y0, x1 + 1, -val);\n  diff[0].Add(y1 + 1, x1 + 1, val);\n\n  diff[1].Add(y0, x0, val * x0);\n  diff[1].Add(y1 + 1, x0, -val * x0);\n  diff[1].Add(y0, x1 + 1, -val * (x1 + 1));\n  diff[1].Add(y1 + 1, x1 + 1, val * (x1 + 1));\n\n  diff[2].Add(y0, x0, val * y0);\n  diff[2].Add(y1 + 1, x0, -val * (y1 + 1));\n  diff[2].Add(y0, x1 + 1, -val * y0);\n  diff[2].Add(y1 + 1, x1 + 1, val * (y1 + 1));\n\n  diff[3].Add(y0, x0, val * y0 * x0);\n  diff[3].Add(y1 + 1, x0, -val * (y1 + 1) * x0);\n  diff[3].Add(y0, x1 + 1, -val * y0 * (x1 + 1));\n  diff[3].Add(y1 + 1, x1 + 1, val * (y1 + 1) * (x1 + 1));\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y, const size_t &x) {\n  return (y + 1) * (x + 1) * diff_tree[0].GetSum(y, x) -\n         (y + 1) * diff_tree[1].GetSum(y, x) -\n         (x + 1) * diff_tree[2].GetSum(y, x) + diff_tree[3].GetSum(y, x);\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y0, const size_t &x0, const size_t &y1,\n                   const size_t &x1) {\n  return Query(diff_tree, y1, x1) - Query(diff_tree, y0 - 1, x1) -\n         Query(diff_tree, y1, x0 - 1) + Query(diff_tree, y0 - 1, x0 - 1);\n}\n\nint n, m;\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> n >> m;\n\n  BinaryIndexedTree2D<int64_t> diff[4] = {\n      BinaryIndexedTree2D<int64_t>(n, m), BinaryIndexedTree2D<int64_t>(n, m),\n      BinaryIndexedTree2D<int64_t>(n, m), BinaryIndexedTree2D<int64_t>(n, m)};\n\n  for (int t, x, y, u, v, w; std::cin >> t >> x >> y >> u >> v;) {\n    if (t == 1) {\n      std::cin >> w;\n      Modify2D<int64_t>(diff, x, y, u, v, w);\n    } else {\n      std::cout << Query(diff, x, y, u, v) << \"\\n\";\n    }\n  }\n\n  return 0;\n}\n\n```\n","source":"_posts/Binary-Indexed-Tree.md","raw":"---\ntitle: Binary Indexed Tree\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-12-09 06:46:23\npassword:\nsummary: 树状数组\ntags:\n- 树状数组\ncategories:\n- 算法\n---\n\n## 树状数组\n\n[树状数组](binary-indexed-tree.png)\n\n> 按照Peter M. Fenwick的说法，正如所有的整数都可以表示成2的幂和，我们也可以把一串序列表示成一系列子序列的和。采用这个想法，我们可将一个前缀和划分成多个子序列的和，而划分的方法与数的2的幂和具有极其相似的方式。一方面，子序列的个数是其二进制表示中1的个数，另一方面，子序列代表的f[i]的个数也是2的幂。\n\n二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度\n\n### 应用\n\n- 按照定义可以实现：\n  - 单点修改，区间查询\n\n- 加上{% post_link Prefix-Sum-and-Finite-Difference 前缀和与差分 %}可以实现：\n  - 区间修改，单点查询\n  - 区间修改，区间查询\n\n### 单点修改，区间查询\n\n修改一个子节点时，会影响其父节点的值；而如何从子节点索引到父节点的？\n\n**二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度**\n\n- 故，欲索引到父节点，即索引到上层，只需将其最低位1加1进位\n- 而反之将最低位1置0,则索引到当前节点上层的，非当前节点之父的节点\n- 可用LowBit函数取出最低位1\n\n\n#### 模板\n\n[模板题：树状数组1：单点修改，区间查询](https://vjudge.net/problem/LibreOJ-130)\n\n```cpp\ninline size_t LowBit(const size_t &x) { return x & -x; }\n\ntemplate <class DataT>\nclass BinaryIndexedTree final {\n  DataT *data_;\n  size_t size_;\n\n public:\n  BinaryIndexedTree(const size_t &size)\n      : data_(new DataT[size + 1]), size_(size) {\n    for (size_t i = 0; i <= size_; ++i) data_[i] = 0;\n  }\n\n  template <class ArrT>\n  BinaryIndexedTree(const ArrT &arr, const size_t &size)\n      : BinaryIndexedTree(size) {\n    for (size_t i = 1; i <= size_; ++i) {\n      data_[i] += arr[i];\n      size_t &&p = i + LowBit(i);\n      if (p <= size_) data_[p] += data_[i];\n    }\n  }\n\n  ~BinaryIndexedTree() { delete[] data_; }\n\n  void Add(size_t p, const DataT &val) {\n    for (; p <= size_; p += LowBit(p)) data_[p] += val;\n  }\n\n  DataT GetSum(size_t p) const {\n    DataT res = 0;\n    for (; p; p -= LowBit(p)) res += data_[p];\n    return res;\n  }\n\n  DataT GetSum(const size_t &l, const size_t &r) const {\n    return GetSum(r) - GetSum(l - 1);\n  }\n};\n\n```\n\n### 区间修改，单点查询\n\n对差分数组建立树状数组即可\n\n#### 模板\n\n[模板题：树状数组2：区间修改，单点查询](https://vjudge.net/problem/LibreOJ-131)\n\n```cpp\n// auto diff = BinaryIndexedTree<int>(n + 1);\n\ntemplate <class DataT>\ninline void Modify(BinaryIndexedTree<DataT> *diff, const size_t &l,\n                   const size_t &r, const DataT &val) {\n  diff->Add(l, val);\n  diff->Add(r + 1, -val);\n}\n\n```\n\n### 区间修改，区间查询\n\n> 考虑$a[]$的前缀和与差分数组$diff[]$的关系：\n> \n> $\\sum_{i=1}^{n}a[i]$\n> \n> $=\\sum_{i=1}^{n}\\sum_{j=1}^{i}diff[j]$\n> \n> $=\\sum_{i=1}^{n}diff[i]*(n-i+1)$\n> \n> $=(n+1)\\sum_{i=1}^{n}diff[i] - \\sum_{i=1}^{n}diff[i]*i$\n\n所以，可以对$diff[i]$和$diff[i]*i$分别建立树状数组\n\n#### 模板\n\n[模板题：树状数组3：区间修改，区间查询](https://vjudge.net/problem/LibreOJ-132)\n\n```cpp\n// GenerateBinaryIndexedTree(diff_tree, nullptr, size);\n// GenerateBinaryIndexedTree(diff_muti, nullptr, size);\n\ntemplate <class DataT>\nvoid Modify(BinaryIndexedTree<DataT> *diff_tree,\n            BinaryIndexedTree<DataT> *diff_muti, const size_t &l,\n            const size_t &r, const DataT &val) {\n  diff_tree->Add(l, val);\n  diff_tree->Add(r + 1, -val);\n  diff_muti->Add(l, val * l);\n  diff_muti->Add(r + 1, -val * (r + 1));\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree<DataT> &diff_tree,\n                   const BinaryIndexedTree<DataT> &diff_muti, const size_t &p) {\n  return (p + 1) * diff_tree.GetSum(p) - diff_muti.GetSum(p);\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree<DataT> &diff_tree,\n                   const BinaryIndexedTree<DataT> &diff_muti, const size_t &l,\n                   const size_t &r) {\n  return Query(diff_tree, diff_tree, r) - Query(diff_tree, diff_muti, l - 1);\n}\n\n```\n\n## 二维树状数组\n\n**二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度**\n\n一维树状数组$tree[i]$记录了右端点为$i$，长度为$LowBit(i)$的区间和\n\n二维树状数组$tree[y][x]$记录了右下角为$(y, x)$，高为$LowBit(y)$，宽为$LowBit(x)$的二维区间和\n\n### 单点修改，区间查询\n\n只需要按照定义，使用容斥原理，对一维树状数组修改\n\n[模板题：二维树状数组1：单点修改，区间查询](https://vjudge.net/problem/LibreOJ-133)\n\n#### 模板\n\n```cpp\ninline size_t LowBit(const size_t &x) { return x & -x; }\n\ntemplate <class DataT>\nclass BinaryIndexedTree2D final {\n  DataT **data_;\n  size_t size_y_, size_x_;\n\n public:\n  BinaryIndexedTree2D(const size_t &size_y, const size_t &size_x)\n      : data_(new DataT *[size_y + 1]), size_y_(size_y), size_x_(size_x) {\n    for (size_t y = 0; y <= size_y_; ++y) {\n      data_[y] = new DataT [size_x_ + 1];\n      for (size_t x = 0; x <= size_x_; ++x) data_[y][x] = 0;\n    }\n  }\n\n  template <class Arr2DT>\n  BinaryIndexedTree2D(const Arr2DT &arr2d, const size_t &size_y,\n                      const size_t &size_x)\n      : BinaryIndexedTree2D(size_y, size_x) {\n    for (size_t y = 1; y <= size_y_; ++y)\n      for (size_t x = 1; x <= size_x_; ++x) {\n        data_[y][x] += arr2d[y][x];\n        size_t &&xx = x + LowBit(x);\n        size_t &&yy = y + LowBit(y);\n\n        if (xx <= size_x_) data_[y][xx] += data_[y][x];\n        if (yy <= size_y_) data_[yy][x] += data_[y][x];\n        if (xx <= size_x_ && yy <= size_y_) data_[yy][xx] += data_[y][x];\n      }\n  }\n\n  ~BinaryIndexedTree2D() {\n    for (size_t y = 0; y <= size_y_; ++y) delete[] data_[y];\n    delete[] data_;\n  }\n\n  void Add(const size_t &y, const size_t &x, const DataT &val) {\n    for (size_t yy = y; yy <= size_y_; yy += LowBit(yy))\n      for (size_t xx = x; xx <= size_x_; xx += LowBit(xx)) data_[yy][xx] += val;\n  }\n\n  DataT GetSum(const size_t &y, const size_t &x) const {\n    DataT res = 0;\n    for (size_t yy = y; yy; yy -= LowBit(yy))\n      for (size_t xx = x; xx; xx -= LowBit(xx)) res += data_[yy][xx];\n    return res;\n  }\n\n  DataT GetSum(const size_t &y0, const size_t &x0, const size_t &y1,\n               const size_t &x1) const {\n    return GetSum(y1, x1) - GetSum(y0 - 1, x1) - GetSum(y1, x0 - 1) +\n           GetSum(y0 - 1, x0 - 1);\n  }\n};\n\n```\n\n### 区间修改，单点查询\n\n对二维差分数组建立二维树状数组即可\n\n#### 模板\n\n[模板题：二维树状数组2：区间修改，单点查询](https://vjudge.net/problem/LibreOJ-134)\n\n```cpp\n// auto diff = BinaryIndexedTree2D<int64_t>(n, m);\n\ntemplate <class DataT>\ninline void Modify2D(BinaryIndexedTree2D<DataT> *diff, const size_t &y0,\n                   const size_t &x0, const size_t &y1, const size_t &x1,\n                   const DataT &val) {\n  diff->Add(y0, x0, val);\n  diff->Add(y1 + 1, x0, -val);\n  diff->Add(y0, x1 + 1, -val);\n  diff->Add(y1 + 1, x1 + 1, val);\n}\n\n```\n\n### 区间修改，区间查询\n\n**这个厉害了！**\n\n依然按照一维树状数组-区间修改，区间查询的思路；先看看数学\n\n> 考虑$a[][]$的前缀和与差分数组$diff[][]$的关系：\n> \n> $\\sum_{y=1}^{Y}\\sum_{x=1}^{X}a[y][x]$\n> \n> $=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}\\sum_{yy=1}^{y}\\sum_{xx=1}^{x}diff[yy][xx]$\n> \n> $=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$\n> \n> 因为$(Y-y+1)(X-x+1)=(Y+1)(X+1)-(Y+1)x-(X+1)y+xy$，所以：\n>\n> $\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$\n> \n> $=(Y+1)(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]$\n> \n> $-(Y+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*x$\n> \n> $-(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*y$\n> \n> $+\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*yx$\n\n所以，建立四个二维树状数组：\n\n- $diff[y][x]$\n\n- $diff[y][x]*x$\n\n- $diff[y][x]*y$\n\n- $diff[y][x]*yx$\n\n#### 模板\n\n[模板题：二维树状数组3：区间修改，区间查询](https://vjudge.net/problem/LibreOJ-135)\n\n```cpp\ntemplate <class DataT>\ninline void Modify2D(BinaryIndexedTree2D<DataT> diff[], const size_t &y0,\n                     const size_t &x0, const size_t &y1, const size_t &x1,\n                     const DataT &val) {\n  diff[0].Add(y0, x0, val);\n  diff[0].Add(y1 + 1, x0, -val);\n  diff[0].Add(y0, x1 + 1, -val);\n  diff[0].Add(y1 + 1, x1 + 1, val);\n\n  diff[1].Add(y0, x0, val * x0);\n  diff[1].Add(y1 + 1, x0, -val * x0);\n  diff[1].Add(y0, x1 + 1, -val * (x1 + 1));\n  diff[1].Add(y1 + 1, x1 + 1, val * (x1 + 1));\n\n  diff[2].Add(y0, x0, val * y0);\n  diff[2].Add(y1 + 1, x0, -val * (y1 + 1));\n  diff[2].Add(y0, x1 + 1, -val * y0);\n  diff[2].Add(y1 + 1, x1 + 1, val * (y1 + 1));\n\n  diff[3].Add(y0, x0, val * y0 * x0);\n  diff[3].Add(y1 + 1, x0, -val * (y1 + 1) * x0);\n  diff[3].Add(y0, x1 + 1, -val * y0 * (x1 + 1));\n  diff[3].Add(y1 + 1, x1 + 1, val * (y1 + 1) * (x1 + 1));\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y, const size_t &x) {\n  return (y + 1) * (x + 1) * diff_tree[0].GetSum(y, x) -\n         (y + 1) * diff_tree[1].GetSum(y, x) -\n         (x + 1) * diff_tree[2].GetSum(y, x) + diff_tree[3].GetSum(y, x);\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y0, const size_t &x0, const size_t &y1,\n                   const size_t &x1) {\n  return Query(diff_tree, y1, x1) - Query(diff_tree, y0 - 1, x1) -\n         Query(diff_tree, y1, x0 - 1) + Query(diff_tree, y0 - 1, x0 - 1);\n}\n\n```\n\n完整代码\n\n```cpp\n#include <iostream>\n\ninline size_t LowBit(const size_t &x) { return x & -x; }\n\ntemplate <class DataT>\nclass BinaryIndexedTree2D final {\n  DataT **data_;\n  size_t size_y_, size_x_;\n\n public:\n  BinaryIndexedTree2D(const size_t &size_y, const size_t &size_x)\n      : data_(new DataT *[size_y + 1]), size_y_(size_y), size_x_(size_x) {\n    for (size_t y = 0; y <= size_y_; ++y) {\n      data_[y] = new DataT[size_x_ + 1];\n      for (size_t x = 0; x <= size_x_; ++x) data_[y][x] = 0;\n    }\n  }\n\n  template <class Arr2DT>\n  BinaryIndexedTree2D(const Arr2DT &arr2d, const size_t &size_y,\n                      const size_t &size_x)\n      : BinaryIndexedTree2D(size_y, size_x) {\n    for (size_t y = 1; y <= size_y_; ++y)\n      for (size_t x = 1; x <= size_x_; ++x) {\n        data_[y][x] += arr2d[y][x];\n        size_t &&xx = x + LowBit(x);\n        size_t &&yy = y + LowBit(y);\n\n        if (xx <= size_x_) data_[y][xx] += data_[y][x];\n        if (yy <= size_y_) data_[yy][x] += data_[y][x];\n        if (xx <= size_x_ && yy <= size_y_) data_[yy][xx] += data_[y][x];\n      }\n  }\n\n  ~BinaryIndexedTree2D() {\n    for (size_t y = 0; y <= size_y_; ++y) delete[] data_[y];\n    delete[] data_;\n  }\n\n  void Add(const size_t &y, const size_t &x, const DataT &val) {\n    for (size_t yy = y; yy <= size_y_; yy += LowBit(yy))\n      for (size_t xx = x; xx <= size_x_; xx += LowBit(xx)) data_[yy][xx] += val;\n  }\n\n  DataT GetSum(const size_t &y, const size_t &x) const {\n    DataT res = 0;\n    for (size_t yy = y; yy; yy -= LowBit(yy))\n      for (size_t xx = x; xx; xx -= LowBit(xx)) res += data_[yy][xx];\n    return res;\n  }\n\n  DataT GetSum(const size_t &y0, const size_t &x0, const size_t &y1,\n               const size_t &x1) const {\n    return GetSum(y1, x1) - GetSum(y0 - 1, x1) - GetSum(y1, x0 - 1) +\n           GetSum(y0 - 1, x0 - 1);\n  }\n};\n\ntemplate <class DataT>\ninline void Modify2D(BinaryIndexedTree2D<DataT> diff[], const size_t &y0,\n                     const size_t &x0, const size_t &y1, const size_t &x1,\n                     const DataT &val) {\n  diff[0].Add(y0, x0, val);\n  diff[0].Add(y1 + 1, x0, -val);\n  diff[0].Add(y0, x1 + 1, -val);\n  diff[0].Add(y1 + 1, x1 + 1, val);\n\n  diff[1].Add(y0, x0, val * x0);\n  diff[1].Add(y1 + 1, x0, -val * x0);\n  diff[1].Add(y0, x1 + 1, -val * (x1 + 1));\n  diff[1].Add(y1 + 1, x1 + 1, val * (x1 + 1));\n\n  diff[2].Add(y0, x0, val * y0);\n  diff[2].Add(y1 + 1, x0, -val * (y1 + 1));\n  diff[2].Add(y0, x1 + 1, -val * y0);\n  diff[2].Add(y1 + 1, x1 + 1, val * (y1 + 1));\n\n  diff[3].Add(y0, x0, val * y0 * x0);\n  diff[3].Add(y1 + 1, x0, -val * (y1 + 1) * x0);\n  diff[3].Add(y0, x1 + 1, -val * y0 * (x1 + 1));\n  diff[3].Add(y1 + 1, x1 + 1, val * (y1 + 1) * (x1 + 1));\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y, const size_t &x) {\n  return (y + 1) * (x + 1) * diff_tree[0].GetSum(y, x) -\n         (y + 1) * diff_tree[1].GetSum(y, x) -\n         (x + 1) * diff_tree[2].GetSum(y, x) + diff_tree[3].GetSum(y, x);\n}\n\ntemplate <class DataT>\ninline DataT Query(const BinaryIndexedTree2D<DataT> diff_tree[],\n                   const size_t &y0, const size_t &x0, const size_t &y1,\n                   const size_t &x1) {\n  return Query(diff_tree, y1, x1) - Query(diff_tree, y0 - 1, x1) -\n         Query(diff_tree, y1, x0 - 1) + Query(diff_tree, y0 - 1, x0 - 1);\n}\n\nint n, m;\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> n >> m;\n\n  BinaryIndexedTree2D<int64_t> diff[4] = {\n      BinaryIndexedTree2D<int64_t>(n, m), BinaryIndexedTree2D<int64_t>(n, m),\n      BinaryIndexedTree2D<int64_t>(n, m), BinaryIndexedTree2D<int64_t>(n, m)};\n\n  for (int t, x, y, u, v, w; std::cin >> t >> x >> y >> u >> v;) {\n    if (t == 1) {\n      std::cin >> w;\n      Modify2D<int64_t>(diff, x, y, u, v, w);\n    } else {\n      std::cout << Query(diff, x, y, u, v) << \"\\n\";\n    }\n  }\n\n  return 0;\n}\n\n```\n","slug":"Binary-Indexed-Tree","published":1,"updated":"2021-04-25T07:11:17.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuoua0003zcl0go2jhufx","content":"<h2 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h2><p><a href=\"binary-indexed-tree.png\">树状数组</a></p>\n<blockquote>\n<p>按照Peter M. Fenwick的说法，正如所有的整数都可以表示成2的幂和，我们也可以把一串序列表示成一系列子序列的和。采用这个想法，我们可将一个前缀和划分成多个子序列的和，而划分的方法与数的2的幂和具有极其相似的方式。一方面，子序列的个数是其二进制表示中1的个数，另一方面，子序列代表的f[i]的个数也是2的幂。</p>\n</blockquote>\n<p>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li><p>按照定义可以实现：</p>\n<ul>\n<li>单点修改，区间查询</li>\n</ul>\n</li>\n<li><p>加上<a href=\"/prefix-sum-and-finite-difference/\" title=\"前缀和与差分\">前缀和与差分</a>可以实现：</p>\n<ul>\n<li>区间修改，单点查询</li>\n<li>区间修改，区间查询</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单点修改，区间查询\"><a href=\"#单点修改，区间查询\" class=\"headerlink\" title=\"单点修改，区间查询\"></a>单点修改，区间查询</h3><p>修改一个子节点时，会影响其父节点的值；而如何从子节点索引到父节点的？</p>\n<p><strong>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</strong></p>\n<ul>\n<li>故，欲索引到父节点，即索引到上层，只需将其最低位1加1进位</li>\n<li>而反之将最低位1置0,则索引到当前节点上层的，非当前节点之父的节点</li>\n<li>可用LowBit函数取出最低位1</li>\n</ul>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-130\" target=\"_blank\" rel=\"noopener\">模板题：树状数组1：单点修改，区间查询</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> size_t <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryIndexedTree</span> final <span class=\"token punctuation\">{</span>\n  DataT <span class=\"token operator\">*</span>data_<span class=\"token punctuation\">;</span>\n  size_t size_<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">BinaryIndexedTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">data_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> DataT<span class=\"token punctuation\">[</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">size_</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrT</span><span class=\"token operator\">></span>\n  <span class=\"token function\">BinaryIndexedTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ArrT <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">BinaryIndexedTree</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      data_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      size_t <span class=\"token operator\">&amp;&amp;</span>p <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;=</span> size_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">~</span><span class=\"token function\">BinaryIndexedTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data_<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>size_t p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;=</span> size_<span class=\"token punctuation\">;</span> p <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  DataT <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>size_t p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    DataT res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> p<span class=\"token punctuation\">;</span> p <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  DataT <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"区间修改，单点查询\"><a href=\"#区间修改，单点查询\" class=\"headerlink\" title=\"区间修改，单点查询\"></a>区间修改，单点查询</h3><p>对差分数组建立树状数组即可</p>\n<h4 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-131\" target=\"_blank\" rel=\"noopener\">模板题：树状数组2：区间修改，单点查询</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// auto diff = BinaryIndexedTree&lt;int>(n + 1);</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span>BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">*</span>diff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"区间修改，区间查询\"><a href=\"#区间修改，区间查询\" class=\"headerlink\" title=\"区间修改，区间查询\"></a>区间修改，区间查询</h3><blockquote>\n<p>考虑$a[]$的前缀和与差分数组$diff[]$的关系：</p>\n<p>$\\sum_{i=1}^{n}a[i]$</p>\n<p>$=\\sum_{i=1}^{n}\\sum_{j=1}^{i}diff[j]$</p>\n<p>$=\\sum_{i=1}^{n}diff[i]*(n-i+1)$</p>\n<p>$=(n+1)\\sum_{i=1}^{n}diff[i] - \\sum_{i=1}^{n}diff[i]*i$</p>\n</blockquote>\n<p>所以，可以对$diff[i]$和$diff[i]*i$分别建立树状数组</p>\n<h4 id=\"模板-2\"><a href=\"#模板-2\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-132\" target=\"_blank\" rel=\"noopener\">模板题：树状数组3：区间修改，区间查询</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// GenerateBinaryIndexedTree(diff_tree, nullptr, size);</span>\n<span class=\"token comment\" spellcheck=\"true\">// GenerateBinaryIndexedTree(diff_muti, nullptr, size);</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span>BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">*</span>diff_tree<span class=\"token punctuation\">,</span>\n            BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">*</span>diff_muti<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff_tree<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff_tree<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff_muti<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff_muti<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> DataT <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>diff_tree<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>diff_muti<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> diff_muti<span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> DataT <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>diff_tree<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> BinaryIndexedTree<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>diff_muti<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> diff_tree<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> diff_muti<span class=\"token punctuation\">,</span> l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二维树状数组\"><a href=\"#二维树状数组\" class=\"headerlink\" title=\"二维树状数组\"></a>二维树状数组</h2><p><strong>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</strong></p>\n<p>一维树状数组$tree[i]$记录了右端点为$i$，长度为$LowBit(i)$的区间和</p>\n<p>二维树状数组$tree[y][x]$记录了右下角为$(y, x)$，高为$LowBit(y)$，宽为$LowBit(x)$的二维区间和</p>\n<h3 id=\"单点修改，区间查询-1\"><a href=\"#单点修改，区间查询-1\" class=\"headerlink\" title=\"单点修改，区间查询\"></a>单点修改，区间查询</h3><p>只需要按照定义，使用容斥原理，对一维树状数组修改</p>\n<p><a href=\"https://vjudge.net/problem/LibreOJ-133\" target=\"_blank\" rel=\"noopener\">模板题：二维树状数组1：单点修改，区间查询</a></p>\n<h4 id=\"模板-3\"><a href=\"#模板-3\" class=\"headerlink\" title=\"模板\"></a>模板</h4><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> size_t <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryIndexedTree2D</span> final <span class=\"token punctuation\">{</span>\n  DataT <span class=\"token operator\">*</span><span class=\"token operator\">*</span>data_<span class=\"token punctuation\">;</span>\n  size_t size_y_<span class=\"token punctuation\">,</span> size_x_<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_x<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">data_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> DataT <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>size_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">size_y_</span><span class=\"token punctuation\">(</span>size_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">size_x_</span><span class=\"token punctuation\">(</span>size_x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> DataT <span class=\"token punctuation\">[</span>size_x_ <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Arr2DT</span><span class=\"token operator\">></span>\n  <span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Arr2DT <span class=\"token operator\">&amp;</span>arr2d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_y<span class=\"token punctuation\">,</span>\n                      <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_x<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span>size_y<span class=\"token punctuation\">,</span> size_x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> arr2d<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size_t <span class=\"token operator\">&amp;&amp;</span>xx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size_t <span class=\"token operator\">&amp;&amp;</span>yy <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xx <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yy <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xx <span class=\"token operator\">&lt;=</span> size_x_ <span class=\"token operator\">&amp;&amp;</span> yy <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">~</span><span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data_<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t yy <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> yy <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> yy <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t xx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> xx <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">;</span> xx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  DataT <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    DataT res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t yy <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> yy<span class=\"token punctuation\">;</span> yy <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t xx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> xx<span class=\"token punctuation\">;</span> xx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  DataT <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span>\n               <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n           <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"区间修改，单点查询-1\"><a href=\"#区间修改，单点查询-1\" class=\"headerlink\" title=\"区间修改，单点查询\"></a>区间修改，单点查询</h3><p>对二维差分数组建立二维树状数组即可</p>\n<h4 id=\"模板-4\"><a href=\"#模板-4\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-134\" target=\"_blank\" rel=\"noopener\">模板题：二维树状数组2：区间修改，单点查询</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// auto diff = BinaryIndexedTree2D&lt;int64_t>(n, m);</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify2D</span><span class=\"token punctuation\">(</span>BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> <span class=\"token operator\">*</span>diff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"区间修改，区间查询-1\"><a href=\"#区间修改，区间查询-1\" class=\"headerlink\" title=\"区间修改，区间查询\"></a>区间修改，区间查询</h3><p><strong>这个厉害了！</strong></p>\n<p>依然按照一维树状数组-区间修改，区间查询的思路；先看看数学</p>\n<blockquote>\n<p>考虑$a[][]$的前缀和与差分数组$diff[][]$的关系：</p>\n<p>$\\sum_{y=1}^{Y}\\sum_{x=1}^{X}a[y][x]$</p>\n<p>$=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}\\sum_{yy=1}^{y}\\sum_{xx=1}^{x}diff[yy][xx]$</p>\n<p>$=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$</p>\n<p>因为$(Y-y+1)(X-x+1)=(Y+1)(X+1)-(Y+1)x-(X+1)y+xy$，所以：</p>\n<p>$\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$</p>\n<p>$=(Y+1)(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]$</p>\n<p>$-(Y+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*x$</p>\n<p>$-(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*y$</p>\n<p>$+\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*yx$</p>\n</blockquote>\n<p>所以，建立四个二维树状数组：</p>\n<ul>\n<li><p>$diff[y][x]$</p>\n</li>\n<li><p>$diff[y][x]*x$</p>\n</li>\n<li><p>$diff[y][x]*y$</p>\n</li>\n<li><p>$diff[y][x]*yx$</p>\n</li>\n</ul>\n<h4 id=\"模板-5\"><a href=\"#模板-5\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-135\" target=\"_blank\" rel=\"noopener\">模板题：二维树状数组3：区间修改，区间查询</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify2D</span><span class=\"token punctuation\">(</span>BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> diff<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> y0 <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> y0 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> DataT <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n         <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n         <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> DataT <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n         <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完整代码</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">inline</span> size_t <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryIndexedTree2D</span> final <span class=\"token punctuation\">{</span>\n  DataT <span class=\"token operator\">*</span><span class=\"token operator\">*</span>data_<span class=\"token punctuation\">;</span>\n  size_t size_y_<span class=\"token punctuation\">,</span> size_x_<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_x<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">data_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> DataT <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>size_y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">size_y_</span><span class=\"token punctuation\">(</span>size_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">size_x_</span><span class=\"token punctuation\">(</span>size_x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> DataT<span class=\"token punctuation\">[</span>size_x_ <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Arr2DT</span><span class=\"token operator\">></span>\n  <span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Arr2DT <span class=\"token operator\">&amp;</span>arr2d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_y<span class=\"token punctuation\">,</span>\n                      <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>size_x<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span>size_y<span class=\"token punctuation\">,</span> size_x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> arr2d<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        size_t <span class=\"token operator\">&amp;&amp;</span>xx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size_t <span class=\"token operator\">&amp;&amp;</span>yy <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xx <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yy <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xx <span class=\"token operator\">&lt;=</span> size_x_ <span class=\"token operator\">&amp;&amp;</span> yy <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">~</span><span class=\"token function\">BinaryIndexedTree2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data_<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data_<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t yy <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> yy <span class=\"token operator\">&lt;=</span> size_y_<span class=\"token punctuation\">;</span> yy <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t xx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> xx <span class=\"token operator\">&lt;=</span> size_x_<span class=\"token punctuation\">;</span> xx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  DataT <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    DataT res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t yy <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> yy<span class=\"token punctuation\">;</span> yy <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t xx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> xx<span class=\"token punctuation\">;</span> xx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">LowBit</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> data_<span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  DataT <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span>\n               <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n           <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify2D</span><span class=\"token punctuation\">(</span>BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> diff<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">const</span> DataT <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> y0 <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y0<span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>val <span class=\"token operator\">*</span> y0 <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> DataT <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n         <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n         <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataT</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> DataT <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>DataT<span class=\"token operator\">></span> diff_tree<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n         <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff_tree<span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span>\n\n  BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span> diff<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BinaryIndexedTree2D<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span> std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> t <span class=\"token operator\">>></span> x <span class=\"token operator\">>></span> y <span class=\"token operator\">>></span> u <span class=\"token operator\">>></span> v<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> w<span class=\"token punctuation\">;</span>\n      Modify2D<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"树状数组\"><a href=\"#树状数组\" class=\"headerlink\" title=\"树状数组\"></a>树状数组</h2><p><a href=\"binary-indexed-tree.png\">树状数组</a></p>\n<blockquote>\n<p>按照Peter M. Fenwick的说法，正如所有的整数都可以表示成2的幂和，我们也可以把一串序列表示成一系列子序列的和。采用这个想法，我们可将一个前缀和划分成多个子序列的和，而划分的方法与数的2的幂和具有极其相似的方式。一方面，子序列的个数是其二进制表示中1的个数，另一方面，子序列代表的f[i]的个数也是2的幂。</p>\n</blockquote>\n<p>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li><p>按照定义可以实现：</p>\n<ul>\n<li>单点修改，区间查询</li>\n</ul>\n</li>\n<li><p>加上<a href=\"/prefix-sum-and-finite-difference/\" title=\"前缀和与差分\">前缀和与差分</a>可以实现：</p>\n<ul>\n<li>区间修改，单点查询</li>\n<li>区间修改，区间查询</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单点修改，区间查询\"><a href=\"#单点修改，区间查询\" class=\"headerlink\" title=\"单点修改，区间查询\"></a>单点修改，区间查询</h3><p>修改一个子节点时，会影响其父节点的值；而如何从子节点索引到父节点的？</p>\n<p><strong>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</strong></p>\n<ul>\n<li>故，欲索引到父节点，即索引到上层，只需将其最低位1加1进位</li>\n<li>而反之将最低位1置0,则索引到当前节点上层的，非当前节点之父的节点</li>\n<li>可用LowBit函数取出最低位1</li>\n</ul>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-130\" target=\"_blank\" rel=\"noopener\">模板题：树状数组1：单点修改，区间查询</a></p>\n<pre><code class=\"cpp\">inline size_t LowBit(const size_t &amp;x) { return x &amp; -x; }\n\ntemplate &lt;class DataT&gt;\nclass BinaryIndexedTree final {\n  DataT *data_;\n  size_t size_;\n\n public:\n  BinaryIndexedTree(const size_t &amp;size)\n      : data_(new DataT[size + 1]), size_(size) {\n    for (size_t i = 0; i &lt;= size_; ++i) data_[i] = 0;\n  }\n\n  template &lt;class ArrT&gt;\n  BinaryIndexedTree(const ArrT &amp;arr, const size_t &amp;size)\n      : BinaryIndexedTree(size) {\n    for (size_t i = 1; i &lt;= size_; ++i) {\n      data_[i] += arr[i];\n      size_t &amp;&amp;p = i + LowBit(i);\n      if (p &lt;= size_) data_[p] += data_[i];\n    }\n  }\n\n  ~BinaryIndexedTree() { delete[] data_; }\n\n  void Add(size_t p, const DataT &amp;val) {\n    for (; p &lt;= size_; p += LowBit(p)) data_[p] += val;\n  }\n\n  DataT GetSum(size_t p) const {\n    DataT res = 0;\n    for (; p; p -= LowBit(p)) res += data_[p];\n    return res;\n  }\n\n  DataT GetSum(const size_t &amp;l, const size_t &amp;r) const {\n    return GetSum(r) - GetSum(l - 1);\n  }\n};\n</code></pre>\n<h3 id=\"区间修改，单点查询\"><a href=\"#区间修改，单点查询\" class=\"headerlink\" title=\"区间修改，单点查询\"></a>区间修改，单点查询</h3><p>对差分数组建立树状数组即可</p>\n<h4 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-131\" target=\"_blank\" rel=\"noopener\">模板题：树状数组2：区间修改，单点查询</a></p>\n<pre><code class=\"cpp\">// auto diff = BinaryIndexedTree&lt;int&gt;(n + 1);\n\ntemplate &lt;class DataT&gt;\ninline void Modify(BinaryIndexedTree&lt;DataT&gt; *diff, const size_t &amp;l,\n                   const size_t &amp;r, const DataT &amp;val) {\n  diff-&gt;Add(l, val);\n  diff-&gt;Add(r + 1, -val);\n}\n</code></pre>\n<h3 id=\"区间修改，区间查询\"><a href=\"#区间修改，区间查询\" class=\"headerlink\" title=\"区间修改，区间查询\"></a>区间修改，区间查询</h3><blockquote>\n<p>考虑$a[]$的前缀和与差分数组$diff[]$的关系：</p>\n<p>$\\sum_{i=1}^{n}a[i]$</p>\n<p>$=\\sum_{i=1}^{n}\\sum_{j=1}^{i}diff[j]$</p>\n<p>$=\\sum_{i=1}^{n}diff[i]*(n-i+1)$</p>\n<p>$=(n+1)\\sum_{i=1}^{n}diff[i] - \\sum_{i=1}^{n}diff[i]*i$</p>\n</blockquote>\n<p>所以，可以对$diff[i]$和$diff[i]*i$分别建立树状数组</p>\n<h4 id=\"模板-2\"><a href=\"#模板-2\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-132\" target=\"_blank\" rel=\"noopener\">模板题：树状数组3：区间修改，区间查询</a></p>\n<pre><code class=\"cpp\">// GenerateBinaryIndexedTree(diff_tree, nullptr, size);\n// GenerateBinaryIndexedTree(diff_muti, nullptr, size);\n\ntemplate &lt;class DataT&gt;\nvoid Modify(BinaryIndexedTree&lt;DataT&gt; *diff_tree,\n            BinaryIndexedTree&lt;DataT&gt; *diff_muti, const size_t &amp;l,\n            const size_t &amp;r, const DataT &amp;val) {\n  diff_tree-&gt;Add(l, val);\n  diff_tree-&gt;Add(r + 1, -val);\n  diff_muti-&gt;Add(l, val * l);\n  diff_muti-&gt;Add(r + 1, -val * (r + 1));\n}\n\ntemplate &lt;class DataT&gt;\ninline DataT Query(const BinaryIndexedTree&lt;DataT&gt; &amp;diff_tree,\n                   const BinaryIndexedTree&lt;DataT&gt; &amp;diff_muti, const size_t &amp;p) {\n  return (p + 1) * diff_tree.GetSum(p) - diff_muti.GetSum(p);\n}\n\ntemplate &lt;class DataT&gt;\ninline DataT Query(const BinaryIndexedTree&lt;DataT&gt; &amp;diff_tree,\n                   const BinaryIndexedTree&lt;DataT&gt; &amp;diff_muti, const size_t &amp;l,\n                   const size_t &amp;r) {\n  return Query(diff_tree, diff_tree, r) - Query(diff_tree, diff_muti, l - 1);\n}\n</code></pre>\n<h2 id=\"二维树状数组\"><a href=\"#二维树状数组\" class=\"headerlink\" title=\"二维树状数组\"></a>二维树状数组</h2><p><strong>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</strong></p>\n<p>一维树状数组$tree[i]$记录了右端点为$i$，长度为$LowBit(i)$的区间和</p>\n<p>二维树状数组$tree[y][x]$记录了右下角为$(y, x)$，高为$LowBit(y)$，宽为$LowBit(x)$的二维区间和</p>\n<h3 id=\"单点修改，区间查询-1\"><a href=\"#单点修改，区间查询-1\" class=\"headerlink\" title=\"单点修改，区间查询\"></a>单点修改，区间查询</h3><p>只需要按照定义，使用容斥原理，对一维树状数组修改</p>\n<p><a href=\"https://vjudge.net/problem/LibreOJ-133\" target=\"_blank\" rel=\"noopener\">模板题：二维树状数组1：单点修改，区间查询</a></p>\n<h4 id=\"模板-3\"><a href=\"#模板-3\" class=\"headerlink\" title=\"模板\"></a>模板</h4><pre><code class=\"cpp\">inline size_t LowBit(const size_t &amp;x) { return x &amp; -x; }\n\ntemplate &lt;class DataT&gt;\nclass BinaryIndexedTree2D final {\n  DataT **data_;\n  size_t size_y_, size_x_;\n\n public:\n  BinaryIndexedTree2D(const size_t &amp;size_y, const size_t &amp;size_x)\n      : data_(new DataT *[size_y + 1]), size_y_(size_y), size_x_(size_x) {\n    for (size_t y = 0; y &lt;= size_y_; ++y) {\n      data_[y] = new DataT [size_x_ + 1];\n      for (size_t x = 0; x &lt;= size_x_; ++x) data_[y][x] = 0;\n    }\n  }\n\n  template &lt;class Arr2DT&gt;\n  BinaryIndexedTree2D(const Arr2DT &amp;arr2d, const size_t &amp;size_y,\n                      const size_t &amp;size_x)\n      : BinaryIndexedTree2D(size_y, size_x) {\n    for (size_t y = 1; y &lt;= size_y_; ++y)\n      for (size_t x = 1; x &lt;= size_x_; ++x) {\n        data_[y][x] += arr2d[y][x];\n        size_t &amp;&amp;xx = x + LowBit(x);\n        size_t &amp;&amp;yy = y + LowBit(y);\n\n        if (xx &lt;= size_x_) data_[y][xx] += data_[y][x];\n        if (yy &lt;= size_y_) data_[yy][x] += data_[y][x];\n        if (xx &lt;= size_x_ &amp;&amp; yy &lt;= size_y_) data_[yy][xx] += data_[y][x];\n      }\n  }\n\n  ~BinaryIndexedTree2D() {\n    for (size_t y = 0; y &lt;= size_y_; ++y) delete[] data_[y];\n    delete[] data_;\n  }\n\n  void Add(const size_t &amp;y, const size_t &amp;x, const DataT &amp;val) {\n    for (size_t yy = y; yy &lt;= size_y_; yy += LowBit(yy))\n      for (size_t xx = x; xx &lt;= size_x_; xx += LowBit(xx)) data_[yy][xx] += val;\n  }\n\n  DataT GetSum(const size_t &amp;y, const size_t &amp;x) const {\n    DataT res = 0;\n    for (size_t yy = y; yy; yy -= LowBit(yy))\n      for (size_t xx = x; xx; xx -= LowBit(xx)) res += data_[yy][xx];\n    return res;\n  }\n\n  DataT GetSum(const size_t &amp;y0, const size_t &amp;x0, const size_t &amp;y1,\n               const size_t &amp;x1) const {\n    return GetSum(y1, x1) - GetSum(y0 - 1, x1) - GetSum(y1, x0 - 1) +\n           GetSum(y0 - 1, x0 - 1);\n  }\n};\n</code></pre>\n<h3 id=\"区间修改，单点查询-1\"><a href=\"#区间修改，单点查询-1\" class=\"headerlink\" title=\"区间修改，单点查询\"></a>区间修改，单点查询</h3><p>对二维差分数组建立二维树状数组即可</p>\n<h4 id=\"模板-4\"><a href=\"#模板-4\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-134\" target=\"_blank\" rel=\"noopener\">模板题：二维树状数组2：区间修改，单点查询</a></p>\n<pre><code class=\"cpp\">// auto diff = BinaryIndexedTree2D&lt;int64_t&gt;(n, m);\n\ntemplate &lt;class DataT&gt;\ninline void Modify2D(BinaryIndexedTree2D&lt;DataT&gt; *diff, const size_t &amp;y0,\n                   const size_t &amp;x0, const size_t &amp;y1, const size_t &amp;x1,\n                   const DataT &amp;val) {\n  diff-&gt;Add(y0, x0, val);\n  diff-&gt;Add(y1 + 1, x0, -val);\n  diff-&gt;Add(y0, x1 + 1, -val);\n  diff-&gt;Add(y1 + 1, x1 + 1, val);\n}\n</code></pre>\n<h3 id=\"区间修改，区间查询-1\"><a href=\"#区间修改，区间查询-1\" class=\"headerlink\" title=\"区间修改，区间查询\"></a>区间修改，区间查询</h3><p><strong>这个厉害了！</strong></p>\n<p>依然按照一维树状数组-区间修改，区间查询的思路；先看看数学</p>\n<blockquote>\n<p>考虑$a[][]$的前缀和与差分数组$diff[][]$的关系：</p>\n<p>$\\sum_{y=1}^{Y}\\sum_{x=1}^{X}a[y][x]$</p>\n<p>$=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}\\sum_{yy=1}^{y}\\sum_{xx=1}^{x}diff[yy][xx]$</p>\n<p>$=\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$</p>\n<p>因为$(Y-y+1)(X-x+1)=(Y+1)(X+1)-(Y+1)x-(X+1)y+xy$，所以：</p>\n<p>$\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$</p>\n<p>$=(Y+1)(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]$</p>\n<p>$-(Y+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*x$</p>\n<p>$-(X+1)\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*y$</p>\n<p>$+\\sum_{y=1}^{Y}\\sum_{x=1}^{X}diff[y][x]*yx$</p>\n</blockquote>\n<p>所以，建立四个二维树状数组：</p>\n<ul>\n<li><p>$diff[y][x]$</p>\n</li>\n<li><p>$diff[y][x]*x$</p>\n</li>\n<li><p>$diff[y][x]*y$</p>\n</li>\n<li><p>$diff[y][x]*yx$</p>\n</li>\n</ul>\n<h4 id=\"模板-5\"><a href=\"#模板-5\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/LibreOJ-135\" target=\"_blank\" rel=\"noopener\">模板题：二维树状数组3：区间修改，区间查询</a></p>\n<pre><code class=\"cpp\">template &lt;class DataT&gt;\ninline void Modify2D(BinaryIndexedTree2D&lt;DataT&gt; diff[], const size_t &amp;y0,\n                     const size_t &amp;x0, const size_t &amp;y1, const size_t &amp;x1,\n                     const DataT &amp;val) {\n  diff[0].Add(y0, x0, val);\n  diff[0].Add(y1 + 1, x0, -val);\n  diff[0].Add(y0, x1 + 1, -val);\n  diff[0].Add(y1 + 1, x1 + 1, val);\n\n  diff[1].Add(y0, x0, val * x0);\n  diff[1].Add(y1 + 1, x0, -val * x0);\n  diff[1].Add(y0, x1 + 1, -val * (x1 + 1));\n  diff[1].Add(y1 + 1, x1 + 1, val * (x1 + 1));\n\n  diff[2].Add(y0, x0, val * y0);\n  diff[2].Add(y1 + 1, x0, -val * (y1 + 1));\n  diff[2].Add(y0, x1 + 1, -val * y0);\n  diff[2].Add(y1 + 1, x1 + 1, val * (y1 + 1));\n\n  diff[3].Add(y0, x0, val * y0 * x0);\n  diff[3].Add(y1 + 1, x0, -val * (y1 + 1) * x0);\n  diff[3].Add(y0, x1 + 1, -val * y0 * (x1 + 1));\n  diff[3].Add(y1 + 1, x1 + 1, val * (y1 + 1) * (x1 + 1));\n}\n\ntemplate &lt;class DataT&gt;\ninline DataT Query(const BinaryIndexedTree2D&lt;DataT&gt; diff_tree[],\n                   const size_t &amp;y, const size_t &amp;x) {\n  return (y + 1) * (x + 1) * diff_tree[0].GetSum(y, x) -\n         (y + 1) * diff_tree[1].GetSum(y, x) -\n         (x + 1) * diff_tree[2].GetSum(y, x) + diff_tree[3].GetSum(y, x);\n}\n\ntemplate &lt;class DataT&gt;\ninline DataT Query(const BinaryIndexedTree2D&lt;DataT&gt; diff_tree[],\n                   const size_t &amp;y0, const size_t &amp;x0, const size_t &amp;y1,\n                   const size_t &amp;x1) {\n  return Query(diff_tree, y1, x1) - Query(diff_tree, y0 - 1, x1) -\n         Query(diff_tree, y1, x0 - 1) + Query(diff_tree, y0 - 1, x0 - 1);\n}\n</code></pre>\n<p>完整代码</p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\ninline size_t LowBit(const size_t &amp;x) { return x &amp; -x; }\n\ntemplate &lt;class DataT&gt;\nclass BinaryIndexedTree2D final {\n  DataT **data_;\n  size_t size_y_, size_x_;\n\n public:\n  BinaryIndexedTree2D(const size_t &amp;size_y, const size_t &amp;size_x)\n      : data_(new DataT *[size_y + 1]), size_y_(size_y), size_x_(size_x) {\n    for (size_t y = 0; y &lt;= size_y_; ++y) {\n      data_[y] = new DataT[size_x_ + 1];\n      for (size_t x = 0; x &lt;= size_x_; ++x) data_[y][x] = 0;\n    }\n  }\n\n  template &lt;class Arr2DT&gt;\n  BinaryIndexedTree2D(const Arr2DT &amp;arr2d, const size_t &amp;size_y,\n                      const size_t &amp;size_x)\n      : BinaryIndexedTree2D(size_y, size_x) {\n    for (size_t y = 1; y &lt;= size_y_; ++y)\n      for (size_t x = 1; x &lt;= size_x_; ++x) {\n        data_[y][x] += arr2d[y][x];\n        size_t &amp;&amp;xx = x + LowBit(x);\n        size_t &amp;&amp;yy = y + LowBit(y);\n\n        if (xx &lt;= size_x_) data_[y][xx] += data_[y][x];\n        if (yy &lt;= size_y_) data_[yy][x] += data_[y][x];\n        if (xx &lt;= size_x_ &amp;&amp; yy &lt;= size_y_) data_[yy][xx] += data_[y][x];\n      }\n  }\n\n  ~BinaryIndexedTree2D() {\n    for (size_t y = 0; y &lt;= size_y_; ++y) delete[] data_[y];\n    delete[] data_;\n  }\n\n  void Add(const size_t &amp;y, const size_t &amp;x, const DataT &amp;val) {\n    for (size_t yy = y; yy &lt;= size_y_; yy += LowBit(yy))\n      for (size_t xx = x; xx &lt;= size_x_; xx += LowBit(xx)) data_[yy][xx] += val;\n  }\n\n  DataT GetSum(const size_t &amp;y, const size_t &amp;x) const {\n    DataT res = 0;\n    for (size_t yy = y; yy; yy -= LowBit(yy))\n      for (size_t xx = x; xx; xx -= LowBit(xx)) res += data_[yy][xx];\n    return res;\n  }\n\n  DataT GetSum(const size_t &amp;y0, const size_t &amp;x0, const size_t &amp;y1,\n               const size_t &amp;x1) const {\n    return GetSum(y1, x1) - GetSum(y0 - 1, x1) - GetSum(y1, x0 - 1) +\n           GetSum(y0 - 1, x0 - 1);\n  }\n};\n\ntemplate &lt;class DataT&gt;\ninline void Modify2D(BinaryIndexedTree2D&lt;DataT&gt; diff[], const size_t &amp;y0,\n                     const size_t &amp;x0, const size_t &amp;y1, const size_t &amp;x1,\n                     const DataT &amp;val) {\n  diff[0].Add(y0, x0, val);\n  diff[0].Add(y1 + 1, x0, -val);\n  diff[0].Add(y0, x1 + 1, -val);\n  diff[0].Add(y1 + 1, x1 + 1, val);\n\n  diff[1].Add(y0, x0, val * x0);\n  diff[1].Add(y1 + 1, x0, -val * x0);\n  diff[1].Add(y0, x1 + 1, -val * (x1 + 1));\n  diff[1].Add(y1 + 1, x1 + 1, val * (x1 + 1));\n\n  diff[2].Add(y0, x0, val * y0);\n  diff[2].Add(y1 + 1, x0, -val * (y1 + 1));\n  diff[2].Add(y0, x1 + 1, -val * y0);\n  diff[2].Add(y1 + 1, x1 + 1, val * (y1 + 1));\n\n  diff[3].Add(y0, x0, val * y0 * x0);\n  diff[3].Add(y1 + 1, x0, -val * (y1 + 1) * x0);\n  diff[3].Add(y0, x1 + 1, -val * y0 * (x1 + 1));\n  diff[3].Add(y1 + 1, x1 + 1, val * (y1 + 1) * (x1 + 1));\n}\n\ntemplate &lt;class DataT&gt;\ninline DataT Query(const BinaryIndexedTree2D&lt;DataT&gt; diff_tree[],\n                   const size_t &amp;y, const size_t &amp;x) {\n  return (y + 1) * (x + 1) * diff_tree[0].GetSum(y, x) -\n         (y + 1) * diff_tree[1].GetSum(y, x) -\n         (x + 1) * diff_tree[2].GetSum(y, x) + diff_tree[3].GetSum(y, x);\n}\n\ntemplate &lt;class DataT&gt;\ninline DataT Query(const BinaryIndexedTree2D&lt;DataT&gt; diff_tree[],\n                   const size_t &amp;y0, const size_t &amp;x0, const size_t &amp;y1,\n                   const size_t &amp;x1) {\n  return Query(diff_tree, y1, x1) - Query(diff_tree, y0 - 1, x1) -\n         Query(diff_tree, y1, x0 - 1) + Query(diff_tree, y0 - 1, x0 - 1);\n}\n\nint n, m;\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin &gt;&gt; n &gt;&gt; m;\n\n  BinaryIndexedTree2D&lt;int64_t&gt; diff[4] = {\n      BinaryIndexedTree2D&lt;int64_t&gt;(n, m), BinaryIndexedTree2D&lt;int64_t&gt;(n, m),\n      BinaryIndexedTree2D&lt;int64_t&gt;(n, m), BinaryIndexedTree2D&lt;int64_t&gt;(n, m)};\n\n  for (int t, x, y, u, v, w; std::cin &gt;&gt; t &gt;&gt; x &gt;&gt; y &gt;&gt; u &gt;&gt; v;) {\n    if (t == 1) {\n      std::cin &gt;&gt; w;\n      Modify2D&lt;int64_t&gt;(diff, x, y, u, v, w);\n    } else {\n      std::cout &lt;&lt; Query(diff, x, y, u, v) &lt;&lt; &quot;\\n&quot;;\n    }\n  }\n\n  return 0;\n}\n</code></pre>\n"},{"title":"Higher Mathematics","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-20T12:50:44.000Z","password":null,"summary":"高数公式、笔记等等杂项","_content":"\n## 函数与极限\n\n### 函数的极限\n\n#### 定义\n\n极限：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow ∀ε>0，∃δ>0，当0<|x-x_0|<δ时，有|f(x)-A|<ε$\n\n左极限：$\\lim\\limits_{x\\to x_0^-}f(x)=A\\Leftrightarrow ∀ε>0，∃δ>0，当x_0-δ<x<x_0时，有|f(x)-A|<ε$\n\n右极限：$\\lim\\limits_{x\\to x_0^+}f(x)=A\\Leftrightarrow ∀ε>0，∃δ>0，当x_0<x<x_0+δ时，有|f(x)-A|<ε$\n\n#### 性质\n\n存在的充要条件：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow \\lim\\limits_{x\\to x_0^-}f(x)=\\lim\\limits_{x\\to x_0^+}f(x)=A$\n\n唯一性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow 该极限唯一$\n\n局部有界性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow ∀M>0，δ>0，0<|x-x_0|<δ，|f(x)|≤M$\n\n局部保号性：$\\lim\\limits_{x\\to x_0}f(x)=A>0\\Rightarrow ∀δ>0，0<|x-x_0|<δ，f(x)>0$，小于0同理\n\n### 极限运算法则\n\n- **有限个**无穷小的和是无穷小（任意个为Undefined）\n- **有限个**无穷小（大）的积是无穷小（大）（任意个为Undefined）\n- 有界函数乘无穷小的积是无穷小\n\n#### 线性运算性质\n\n$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)±g(x))=A±B$\n\n$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)g(x))=AB$\n\n$\\lim f(x)=A，\\lim g(x)=B\\neq 0\\Rightarrow\\lim\\frac{f(x)}{g(x)}=\\frac{A}{B}$\n\n$\\lim (cf(x))=c\\lim f(x)$（c为常数）\n\n$\\lim (f(x))^n=(\\lim f(x))^n$（n为正整数）\n\n#### 括号穿透\n\n$\\lim\\limits_{x\\to x_0}f(g(x))=f(\\lim\\limits_{x\\to x_0}g(x))$\n\n### 极限存在准则 两个重要极限\n\n#### 夹逼准则\n\n$x∈\\mathring{U}(x_0,r)，g(x)≤f(x)≤h(x)，且\\lim\\limits_{x\\to x_0}g(x)=\\lim\\limits_{x\\to x_0}h(x)=A\\Rightarrow \\lim\\limits_{x\\to x_0}f(x)=A$\n\n#### 重要极限\n\n- $\\lim\\limits_{x\\to x_0}\\frac{sinx}{x}=1$\n> 证明：$sinx<x<tanx\\Rightarrow cosx<\\frac{sinx}{x}<1，\\lim\\limits_{x\\to 0}cosx=1\\Rightarrow 夹逼准则证出$\n\n- $\\lim\\limits_{x\\to ∞}(1+\\frac{1}{x})^x=\\lim\\limits_{x\\to 0}(1+x)^\\frac{1}{x}=e$\n> 证明：$(1+\\frac{1}{n})^n二项式展开后\\leq \\sum_{i=0}^{n}\\frac{1}{i!}\\leq 2+\\sum_{i=1}^{n}\\frac{1}{2^i}=3-\\frac{1}{2^(n-1)}\\le 3$，证明极限存在，**定义其为e**\n\n### 无穷小的比较\n\n#### 常用等价无穷小\n\n- $x \\sim sinx \\sim arcsinx \\sim tanx \\sim arctanx \\sim ln(x+1) \\sim e^x-1$\n- $1-cosx \\sim \\frac{x^2}{2} \\sim \\frac{1}{cosx}-1$\n- $(1+x)^α-1 \\sim αx$\n- $tanx-sinx \\sim \\frac{x^3}{2}$\n\n### 连续函数的性质\n\n#### 介值定理\n\n$f(x)∈c[a,b]，f(a)=A，f(b)=B\\Rightarrow ∀C∈(A,B)，∃ξ∈(a,b)，st.f(ξ)=C$\n\n## 导数与微分\n\n连续不一定可导（可微）；可导（可微）一定连续\n\n不是明确可导的函数，不能直接写$f'(x)$，而要先写$\\lim\\limits_{x\\to x_0}\\frac{f(x)-f(x_0)}{x-x_0}$存在\n\n### 求导法则\n\n#### 反函数\n\n$y=f(x)$单调、可导、且$f'(x)\\neq 0\\Rightarrow (f^{-1}(y))'=\\frac{1}{f'(x)}$，**最后记得化作$g(x)=f^{-1}(y)$**\n\n#### 复合函数\n\n$y=f(g(x))，g(x)在x处可导，f(u)在u=g(x)处可导\\Rightarrow y'=\\frac{dy}{dx}=\\frac{dy}{du}\\frac{du}{dx}=f'(g(x))g'(x)$\n\n#### 常用公式表及推导方法\n\n| 原函数 | 导数 | 推导 |\n|-|-|-|\n| $x^u$ | $ux^{u-1}$ | - |\n| $sinx$ | $cosx$ | - |\n| $cosx$ | $-sinx$ | - |\n| $tanx$ | $sec^2x$ | $tanx=\\frac{sinx}{cosx}$ |\n| $cotx$ | $-csc^2x$ | $cotx=\\frac{cosx}{sinx}$ |\n| $secx$ | $secxtanx$ | $secx=\\frac{1}{cosx}$ |\n| $cscx$ | $-cscxtanx$ | $cscx=\\frac{1}{sinx}$ |\n| $arcsinx$ | $\\frac{1}{\\sqrt{1-x^2}}$ | $(arcsinx)'=\\frac{1}{(siny)'}=\\frac{1}{cosy}$ |\n| $arccosx$ | $\\frac{-1}{\\sqrt{1-x^2}}$ | 同上 |\n| $arctanx$ | $\\frac{1}{1+x^2}$ | 同上 |\n| $arccotx$ | $\\frac{-1}{1+x^2}$ | 同上 |\n| $a^x$ | $a^xlna$ | - |\n| $log_ax$ | $\\frac{1}{xlna}$ | $(log_ax)'=\\frac{1}{(a^y)'}=\\frac{1}{a^ylna}$ |\n\n### 常用高阶导数\n\n| 原函数 | n阶导 |\n|-|-|\n| $sinx$ | $sin(x+\\frac{n}{2}π)$ |\n| $cosx$ | $cos(x+\\frac{n}{2}π)$ |\n| $f(ax+b)$ | $a^nf^{(n)}(ax+b)$ |\n| $u(x)v(x)$ | $\\sum_{i=0}^{n}C_{n}^{n-i}u^{(n-i)}(x)v^{(i)}(x)$ |\n\n\n### 隐函数及参数方程的导数\n\n- 隐函数\n> 例子：$e^y+xy-e=0，两边对x求导：e^yy'+(y+xy')=0，分离变量：y'=-\\frac{y}{x+e^y}$\n\n- 参数方程\n> $y'=\\frac{dy}{dx}=\\frac{\\frac{dy}{dt}}{\\frac{dx}{dt}}$\n\n## 微分中值定理与导数的应用\n\n### 微分中值定理\n\n#### 拉格朗日中值定理\n\n> $f(x)$满足：1：在$[a,b]$连续；2：在(a,b)可导\n> 则：$∃ξ∈(a,b)，st.f(b)-f(a)=f'(ξ)(b-a)$\n\n#### 柯西中值定理\n\n> $f(x)和F(x)$满足：1：在$[a,b]$连续；2：在$(a,b)$可导；3：$∀x∈(a,b)，F'(x)\\neq 0$\n> 则：$∃ξ∈(a,b)，st.\\frac{f(b)-f(a)}{F(b)-F(a)}=\\frac{f'(ξ)}{F'(ξ)}$\n\n### 洛必达法则\n\n> 设：\n> (1) $\\lim\\limits_{x\\Rightarrow a}f(x)=\\lim\\limits_{x\\Rightarrow a}F(x)=0$\n> (2) $a$的某去心领域内，$f'(x)，F'(x)$都存在且$F'(x)\\neq 0$\n> (3) $\\lim\\limits_{x\\Rightarrow a}\\frac{f'(x)}{F'(x)}$存在或为无穷大\n> 则：$\\lim\\limits_{x\\Rightarrow a}\\frac{f(x)}{F(x)}=\\lim\\limits_{x\\Rightarrow a}\\frac{f'(x)}{F'(x)}$\n\n### 泰勒公式\n\n$f(x)$在$x_0$处具有$n$阶导$\\Rightarrow ∃x∈U(x_0)，st. f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i+o((x-x_0)^n)$\n\n取$x_0=0$得**n阶局部迈克劳林公式：**$f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(0)}{i!}x^i+o(x^n)$ \n\n#### 常用公式\n\n- $\\frac{1}{1-x}=\\sum_{i=0}^{n}x^i+o(x^n)=\\frac{1-x^n}{1-x}+o(x^n)$\n- 推出$\\frac{a}{1-x}=\\frac{a(1-x^n)}{1-x}+o(x^n)$，即**a为首项，x为公比的等比数列的前n项和**\n- $e^x=\\sum_{i=0}^{n}\\frac{x^i}{i!}+o(x^n)$（借此可推出欧拉公式）\n- $sinx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i+1)!}+o(x^{2n+1})$\n- $cosx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i)!}+o(x^{2n})$\n\n### 单调性与极值、凹凸区间与拐点\n\n$f(x)在[a,b]连续，在(a,b)内具有一阶和二阶导，那么：$\n- $若∀x∈(a,b)，f''(x)>0\\Rightarrow f(x)在[a,b]是上凹的$\n- $若∀x∈(a,b)，f''(x)<0\\Rightarrow f(x)在[a,b]是上凸的$\n- $若∃x_0∈(a,b)，f''(x)在x_0左右异号\\Rightarrow (x_0,f(x_0))是拐点$\n\n**注意：凹凸区间包含端点，拐点是坐标**\n\n单调性的考虑点：驻点（二阶导为0）、不可导点；（**两者都是x=x_0**）\n\n极值：先求单调性，列表求极值\n\n## 不定积分\n\n### 换元积分法\n\n$\\int u_v'v'_xdx=\\int u_v'dv=u+C$\n\n#### 常用公式\n\n- $\\int\\frac{1}{x}=ln|x|+C$\n- $\\int tanxdx=\\int\\frac{1}{cosx}sinxdx=-\\int\\frac{1}{cosx}dcosx=-ln|cosx|+C$\n- $\\int cotxdx=\\int\\frac{1}{sinx}cosxdx=\\int\\frac{1}{sinx}dsinx=ln|sinx|+C$\n- $\\int secxdx=ln|secx+tanx|+C$\n- $\\int cscxdx=-ln|cscx+tanx|+C$\n\n推导：\n>$$\\begin{split}\n\\int secxdx&=\\int\\frac{1}{cosx}dx\\\\\\\\\n&=\\int\\frac{1}{cos^2x}cosxdx\\\\\\\\\n&=\\int\\frac{1}{1-sin^2x}dsinx\\\\\\\\\n&=\\frac{1}{2}\\int\\frac{(1-sinx)+(1+sinx)}{(1-sinx)(1+sinx)}dsinx\\\\\\\\\n&=\\frac{1}{2}\\int(\\frac{1}{1+sinx}+\\frac{1}{1-sinx})dsinx\\\\\\\\\n&=\\frac{1}{2}(ln|1+sinx|-ln|1-sinx|)+C\\\\\\\\\n&=ln|\\frac{\\sqrt{1+sinx}}{\\sqrt{1-sinx}}|+C\\\\\\\\\n&=ln|\\frac{\\sqrt{(1+sinx)^2}}{\\sqrt{(1+sinx)(1-sinx)}}|+C\\\\\\\\\n&=ln|\\frac{1+sinx}{cosx}|+C\\\\\\\\\n&=ln|secx+tanx|+C\n\\end{split}$$\n\n### 分部积分法\n\n$\\int udv=uv-\\int vdu$：**对反幂三指，排前作u排后作v**\n\n## 定积分\n\n### 定积分的换元积分法和分部积分法\n\n- 换元公式$\\int_{a}^{b}(x)dx=\\int_{α}^{β}f(φ(t))φ'(t)dt$\n- 分部积分公式$\\int_{a}^{b}udv=(u(b)v(b)-u(a)v(a))-\\int_{a}^{b}vdu$\n\n### 反常积分\n\n$\\frac{d\\int_{α(x)}^{β(x)}f(t)dt}{dx}=β'(x)f(β(x))-α'(x)f(α(x))$\n\n### 定积分几何\n\n曲线弧长：\n- 直角：$s=\\int_{a}^{b}\\sqrt{1+y'^2}dx$\n- 参数：$s=\\int_{a}^{b}\\sqrt{φ'^2(t)+ψ'^2(t)}dt$\n- 极坐标：$s=\\int_{a}^{b}\\sqrt{ρ^2(θ)+ρ'^2(θ)}dθ$\n\n## 微分方程\n\n### 一阶线性微分方程\n\n$y'+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}$\n\n### 可降阶的高阶微分方程\n\n#### $y^{(n)}=f(x)$（只含$x$型）\n\n> $$\\begin{split}\n&y''=x+sinx\\\\\\\\\n令：&p=y'，y''=p'=x+sinx\\\\\\\\\n两侧积分得：&p=\\frac{x^2}{2}-cosx+C_1=y'\\\\\\\\\n两侧积分得：&y=\\frac{x^3}{6}-sinx+C_1x+C_2\\\\\\\\\n\\end{split}$$\n\n\n#### $y''=f(x,y')$（含$x，y$型）\n\n> $$\\begin{split}\n&y''=y'+x\\\\\\\\\n令：&p=y'，y''=p'\\\\\\\\\n原方程化为：&p'-p=x\\\\\\\\\n一阶线性微分方程公式：&y'+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}\\\\\\\\\n代入：&P(x)=-1，Q(x)=x，C=C_1\\\\\\\\\n可得：&p=(C_1+\\int xe^{\\int (-1)dx}dx)e^{-\\int (-1)dx}\\\\\\\\\n&\\ =(C_1+\\int xe^{-x}dx)e^x\\\\\\\\\n&\\ =(C_1-\\int xde^{-x})e^x\\\\\\\\\n&\\ =(C_1-(xe^{-x}-\\int e^{-x}dx))e^x\\\\\\\\\n&\\ =(-xe^{-x}-e^{-x}+C_1)e^x\\\\\\\\\n&\\ =-x-1+C_1e^x\\\\\\\\\n即：&y'=p=-x-1+C_1e^x\\\\\\\\\n两侧积分得：&y=\\int (C_1e^x-x-1)dx=C_1e^x-\\frac{x^2}{2}-x+C^2\n\\end{split}$$\n\n#### $y''=f(y,y')$（不含$x$型）\n\n> $$\\begin{split}\n&yy''+2y'^2=0\\\\\\\\\n令：&p=y'，y''=p'=\\frac{dp}{dy}\\frac{dy}{dx}=\\frac{dp}{dy}p\\\\\\\\\n原方程化为：&y\\frac{dp}{dy}p+2p^2=0\\\\\\\\\n分离变量得：&\\frac{dp}{p}=-2\\frac{dy}{y}\\\\\\\\\n两侧积分得：&ln|p|=ln\\frac{1}{y^2}+C_1\\\\\\\\\n即：&p=\\frac{C_0}{y^2}=y'=\\frac{dy}{dx}\\\\\\\\\n分离变量得：&y^2dy=C_0dx\\\\\\\\\n两侧积分得：&y^3=C_1x+C_2\n\\end{split}$$\n\n### 常系数齐次线性微分方程\n\n#### 二阶\n\n令$y''+py'+qy=0\\Rightarrow 特征方程：r^2+pr+q=0，考虑其解的情况：$\n\n| 特征方程的解 | 通解 |\n|-|-|\n| $r_1\\neq r_2∈R$ | $y=C_1e^{r_1x}+C_2e^{r_2x}$ |\n| $r_1=r_2=r∈R$ | $y=C_1e^{rx}+C_2xe^{rx}$ |\n| $r_1=α+iβ，r_2=α-iβ$ | $y=C_1e^{αx}cosβx+C_2e^{αx}sinβx$ |\n\n#### 高阶\n\n第$i$重根就乘$x^i$\n\n| 特征方程的解 | 通解 |\n|-|-|\n| $r_1=-1，r_2=r_3=i，r_4=r_5=-i$ | $y=C_1e^{-x}+C_2cosx+C_3sinx+C_4xcosx+C_5xsinx$ |\n| $r_1=r_2=r_3=r$ | $y=C_1e^{rx}+C_2xe^{rx}+C_3x^2e^{rx}$ |\n\n### 常系数非齐次线性微分方程\n\n$y''+py'+qy=P_m(x)e^{λx}\\Rightarrow 特解y^*=x^kQ_m(x)e^{λx}（k：λ是特征方程的k重根）$\n\n一般做法：\n- 先令$y''+py'+qy=0$，求其特征方程的根\n- 右侧化为$P_m(x)e^{λx}$（有$sinx或cosx时λ$设为复数），得到$λ$是$k$重根\n- 设出特解$y^*=x^kQ_m(x)e^{λx}（有sinx或cosx时为\\overline{y}）$\n- $y^*代入y$解出$Q_m(x)$的系数，得到特解（有$cosx时为\\overline{y}$的实部；有$sinx时为\\overline{y}$的虚部）","source":"_posts/Higher-Mathematics.md","raw":"---\ntitle: Higher Mathematics\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-20 20:50:44\npassword:\nsummary: 高数公式、笔记等等杂项\ntags:\n- 高数\ncategories:\n- 笔记\n---\n\n## 函数与极限\n\n### 函数的极限\n\n#### 定义\n\n极限：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow ∀ε>0，∃δ>0，当0<|x-x_0|<δ时，有|f(x)-A|<ε$\n\n左极限：$\\lim\\limits_{x\\to x_0^-}f(x)=A\\Leftrightarrow ∀ε>0，∃δ>0，当x_0-δ<x<x_0时，有|f(x)-A|<ε$\n\n右极限：$\\lim\\limits_{x\\to x_0^+}f(x)=A\\Leftrightarrow ∀ε>0，∃δ>0，当x_0<x<x_0+δ时，有|f(x)-A|<ε$\n\n#### 性质\n\n存在的充要条件：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow \\lim\\limits_{x\\to x_0^-}f(x)=\\lim\\limits_{x\\to x_0^+}f(x)=A$\n\n唯一性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow 该极限唯一$\n\n局部有界性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow ∀M>0，δ>0，0<|x-x_0|<δ，|f(x)|≤M$\n\n局部保号性：$\\lim\\limits_{x\\to x_0}f(x)=A>0\\Rightarrow ∀δ>0，0<|x-x_0|<δ，f(x)>0$，小于0同理\n\n### 极限运算法则\n\n- **有限个**无穷小的和是无穷小（任意个为Undefined）\n- **有限个**无穷小（大）的积是无穷小（大）（任意个为Undefined）\n- 有界函数乘无穷小的积是无穷小\n\n#### 线性运算性质\n\n$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)±g(x))=A±B$\n\n$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)g(x))=AB$\n\n$\\lim f(x)=A，\\lim g(x)=B\\neq 0\\Rightarrow\\lim\\frac{f(x)}{g(x)}=\\frac{A}{B}$\n\n$\\lim (cf(x))=c\\lim f(x)$（c为常数）\n\n$\\lim (f(x))^n=(\\lim f(x))^n$（n为正整数）\n\n#### 括号穿透\n\n$\\lim\\limits_{x\\to x_0}f(g(x))=f(\\lim\\limits_{x\\to x_0}g(x))$\n\n### 极限存在准则 两个重要极限\n\n#### 夹逼准则\n\n$x∈\\mathring{U}(x_0,r)，g(x)≤f(x)≤h(x)，且\\lim\\limits_{x\\to x_0}g(x)=\\lim\\limits_{x\\to x_0}h(x)=A\\Rightarrow \\lim\\limits_{x\\to x_0}f(x)=A$\n\n#### 重要极限\n\n- $\\lim\\limits_{x\\to x_0}\\frac{sinx}{x}=1$\n> 证明：$sinx<x<tanx\\Rightarrow cosx<\\frac{sinx}{x}<1，\\lim\\limits_{x\\to 0}cosx=1\\Rightarrow 夹逼准则证出$\n\n- $\\lim\\limits_{x\\to ∞}(1+\\frac{1}{x})^x=\\lim\\limits_{x\\to 0}(1+x)^\\frac{1}{x}=e$\n> 证明：$(1+\\frac{1}{n})^n二项式展开后\\leq \\sum_{i=0}^{n}\\frac{1}{i!}\\leq 2+\\sum_{i=1}^{n}\\frac{1}{2^i}=3-\\frac{1}{2^(n-1)}\\le 3$，证明极限存在，**定义其为e**\n\n### 无穷小的比较\n\n#### 常用等价无穷小\n\n- $x \\sim sinx \\sim arcsinx \\sim tanx \\sim arctanx \\sim ln(x+1) \\sim e^x-1$\n- $1-cosx \\sim \\frac{x^2}{2} \\sim \\frac{1}{cosx}-1$\n- $(1+x)^α-1 \\sim αx$\n- $tanx-sinx \\sim \\frac{x^3}{2}$\n\n### 连续函数的性质\n\n#### 介值定理\n\n$f(x)∈c[a,b]，f(a)=A，f(b)=B\\Rightarrow ∀C∈(A,B)，∃ξ∈(a,b)，st.f(ξ)=C$\n\n## 导数与微分\n\n连续不一定可导（可微）；可导（可微）一定连续\n\n不是明确可导的函数，不能直接写$f'(x)$，而要先写$\\lim\\limits_{x\\to x_0}\\frac{f(x)-f(x_0)}{x-x_0}$存在\n\n### 求导法则\n\n#### 反函数\n\n$y=f(x)$单调、可导、且$f'(x)\\neq 0\\Rightarrow (f^{-1}(y))'=\\frac{1}{f'(x)}$，**最后记得化作$g(x)=f^{-1}(y)$**\n\n#### 复合函数\n\n$y=f(g(x))，g(x)在x处可导，f(u)在u=g(x)处可导\\Rightarrow y'=\\frac{dy}{dx}=\\frac{dy}{du}\\frac{du}{dx}=f'(g(x))g'(x)$\n\n#### 常用公式表及推导方法\n\n| 原函数 | 导数 | 推导 |\n|-|-|-|\n| $x^u$ | $ux^{u-1}$ | - |\n| $sinx$ | $cosx$ | - |\n| $cosx$ | $-sinx$ | - |\n| $tanx$ | $sec^2x$ | $tanx=\\frac{sinx}{cosx}$ |\n| $cotx$ | $-csc^2x$ | $cotx=\\frac{cosx}{sinx}$ |\n| $secx$ | $secxtanx$ | $secx=\\frac{1}{cosx}$ |\n| $cscx$ | $-cscxtanx$ | $cscx=\\frac{1}{sinx}$ |\n| $arcsinx$ | $\\frac{1}{\\sqrt{1-x^2}}$ | $(arcsinx)'=\\frac{1}{(siny)'}=\\frac{1}{cosy}$ |\n| $arccosx$ | $\\frac{-1}{\\sqrt{1-x^2}}$ | 同上 |\n| $arctanx$ | $\\frac{1}{1+x^2}$ | 同上 |\n| $arccotx$ | $\\frac{-1}{1+x^2}$ | 同上 |\n| $a^x$ | $a^xlna$ | - |\n| $log_ax$ | $\\frac{1}{xlna}$ | $(log_ax)'=\\frac{1}{(a^y)'}=\\frac{1}{a^ylna}$ |\n\n### 常用高阶导数\n\n| 原函数 | n阶导 |\n|-|-|\n| $sinx$ | $sin(x+\\frac{n}{2}π)$ |\n| $cosx$ | $cos(x+\\frac{n}{2}π)$ |\n| $f(ax+b)$ | $a^nf^{(n)}(ax+b)$ |\n| $u(x)v(x)$ | $\\sum_{i=0}^{n}C_{n}^{n-i}u^{(n-i)}(x)v^{(i)}(x)$ |\n\n\n### 隐函数及参数方程的导数\n\n- 隐函数\n> 例子：$e^y+xy-e=0，两边对x求导：e^yy'+(y+xy')=0，分离变量：y'=-\\frac{y}{x+e^y}$\n\n- 参数方程\n> $y'=\\frac{dy}{dx}=\\frac{\\frac{dy}{dt}}{\\frac{dx}{dt}}$\n\n## 微分中值定理与导数的应用\n\n### 微分中值定理\n\n#### 拉格朗日中值定理\n\n> $f(x)$满足：1：在$[a,b]$连续；2：在(a,b)可导\n> 则：$∃ξ∈(a,b)，st.f(b)-f(a)=f'(ξ)(b-a)$\n\n#### 柯西中值定理\n\n> $f(x)和F(x)$满足：1：在$[a,b]$连续；2：在$(a,b)$可导；3：$∀x∈(a,b)，F'(x)\\neq 0$\n> 则：$∃ξ∈(a,b)，st.\\frac{f(b)-f(a)}{F(b)-F(a)}=\\frac{f'(ξ)}{F'(ξ)}$\n\n### 洛必达法则\n\n> 设：\n> (1) $\\lim\\limits_{x\\Rightarrow a}f(x)=\\lim\\limits_{x\\Rightarrow a}F(x)=0$\n> (2) $a$的某去心领域内，$f'(x)，F'(x)$都存在且$F'(x)\\neq 0$\n> (3) $\\lim\\limits_{x\\Rightarrow a}\\frac{f'(x)}{F'(x)}$存在或为无穷大\n> 则：$\\lim\\limits_{x\\Rightarrow a}\\frac{f(x)}{F(x)}=\\lim\\limits_{x\\Rightarrow a}\\frac{f'(x)}{F'(x)}$\n\n### 泰勒公式\n\n$f(x)$在$x_0$处具有$n$阶导$\\Rightarrow ∃x∈U(x_0)，st. f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i+o((x-x_0)^n)$\n\n取$x_0=0$得**n阶局部迈克劳林公式：**$f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(0)}{i!}x^i+o(x^n)$ \n\n#### 常用公式\n\n- $\\frac{1}{1-x}=\\sum_{i=0}^{n}x^i+o(x^n)=\\frac{1-x^n}{1-x}+o(x^n)$\n- 推出$\\frac{a}{1-x}=\\frac{a(1-x^n)}{1-x}+o(x^n)$，即**a为首项，x为公比的等比数列的前n项和**\n- $e^x=\\sum_{i=0}^{n}\\frac{x^i}{i!}+o(x^n)$（借此可推出欧拉公式）\n- $sinx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i+1)!}+o(x^{2n+1})$\n- $cosx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i)!}+o(x^{2n})$\n\n### 单调性与极值、凹凸区间与拐点\n\n$f(x)在[a,b]连续，在(a,b)内具有一阶和二阶导，那么：$\n- $若∀x∈(a,b)，f''(x)>0\\Rightarrow f(x)在[a,b]是上凹的$\n- $若∀x∈(a,b)，f''(x)<0\\Rightarrow f(x)在[a,b]是上凸的$\n- $若∃x_0∈(a,b)，f''(x)在x_0左右异号\\Rightarrow (x_0,f(x_0))是拐点$\n\n**注意：凹凸区间包含端点，拐点是坐标**\n\n单调性的考虑点：驻点（二阶导为0）、不可导点；（**两者都是x=x_0**）\n\n极值：先求单调性，列表求极值\n\n## 不定积分\n\n### 换元积分法\n\n$\\int u_v'v'_xdx=\\int u_v'dv=u+C$\n\n#### 常用公式\n\n- $\\int\\frac{1}{x}=ln|x|+C$\n- $\\int tanxdx=\\int\\frac{1}{cosx}sinxdx=-\\int\\frac{1}{cosx}dcosx=-ln|cosx|+C$\n- $\\int cotxdx=\\int\\frac{1}{sinx}cosxdx=\\int\\frac{1}{sinx}dsinx=ln|sinx|+C$\n- $\\int secxdx=ln|secx+tanx|+C$\n- $\\int cscxdx=-ln|cscx+tanx|+C$\n\n推导：\n>$$\\begin{split}\n\\int secxdx&=\\int\\frac{1}{cosx}dx\\\\\\\\\n&=\\int\\frac{1}{cos^2x}cosxdx\\\\\\\\\n&=\\int\\frac{1}{1-sin^2x}dsinx\\\\\\\\\n&=\\frac{1}{2}\\int\\frac{(1-sinx)+(1+sinx)}{(1-sinx)(1+sinx)}dsinx\\\\\\\\\n&=\\frac{1}{2}\\int(\\frac{1}{1+sinx}+\\frac{1}{1-sinx})dsinx\\\\\\\\\n&=\\frac{1}{2}(ln|1+sinx|-ln|1-sinx|)+C\\\\\\\\\n&=ln|\\frac{\\sqrt{1+sinx}}{\\sqrt{1-sinx}}|+C\\\\\\\\\n&=ln|\\frac{\\sqrt{(1+sinx)^2}}{\\sqrt{(1+sinx)(1-sinx)}}|+C\\\\\\\\\n&=ln|\\frac{1+sinx}{cosx}|+C\\\\\\\\\n&=ln|secx+tanx|+C\n\\end{split}$$\n\n### 分部积分法\n\n$\\int udv=uv-\\int vdu$：**对反幂三指，排前作u排后作v**\n\n## 定积分\n\n### 定积分的换元积分法和分部积分法\n\n- 换元公式$\\int_{a}^{b}(x)dx=\\int_{α}^{β}f(φ(t))φ'(t)dt$\n- 分部积分公式$\\int_{a}^{b}udv=(u(b)v(b)-u(a)v(a))-\\int_{a}^{b}vdu$\n\n### 反常积分\n\n$\\frac{d\\int_{α(x)}^{β(x)}f(t)dt}{dx}=β'(x)f(β(x))-α'(x)f(α(x))$\n\n### 定积分几何\n\n曲线弧长：\n- 直角：$s=\\int_{a}^{b}\\sqrt{1+y'^2}dx$\n- 参数：$s=\\int_{a}^{b}\\sqrt{φ'^2(t)+ψ'^2(t)}dt$\n- 极坐标：$s=\\int_{a}^{b}\\sqrt{ρ^2(θ)+ρ'^2(θ)}dθ$\n\n## 微分方程\n\n### 一阶线性微分方程\n\n$y'+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}$\n\n### 可降阶的高阶微分方程\n\n#### $y^{(n)}=f(x)$（只含$x$型）\n\n> $$\\begin{split}\n&y''=x+sinx\\\\\\\\\n令：&p=y'，y''=p'=x+sinx\\\\\\\\\n两侧积分得：&p=\\frac{x^2}{2}-cosx+C_1=y'\\\\\\\\\n两侧积分得：&y=\\frac{x^3}{6}-sinx+C_1x+C_2\\\\\\\\\n\\end{split}$$\n\n\n#### $y''=f(x,y')$（含$x，y$型）\n\n> $$\\begin{split}\n&y''=y'+x\\\\\\\\\n令：&p=y'，y''=p'\\\\\\\\\n原方程化为：&p'-p=x\\\\\\\\\n一阶线性微分方程公式：&y'+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}\\\\\\\\\n代入：&P(x)=-1，Q(x)=x，C=C_1\\\\\\\\\n可得：&p=(C_1+\\int xe^{\\int (-1)dx}dx)e^{-\\int (-1)dx}\\\\\\\\\n&\\ =(C_1+\\int xe^{-x}dx)e^x\\\\\\\\\n&\\ =(C_1-\\int xde^{-x})e^x\\\\\\\\\n&\\ =(C_1-(xe^{-x}-\\int e^{-x}dx))e^x\\\\\\\\\n&\\ =(-xe^{-x}-e^{-x}+C_1)e^x\\\\\\\\\n&\\ =-x-1+C_1e^x\\\\\\\\\n即：&y'=p=-x-1+C_1e^x\\\\\\\\\n两侧积分得：&y=\\int (C_1e^x-x-1)dx=C_1e^x-\\frac{x^2}{2}-x+C^2\n\\end{split}$$\n\n#### $y''=f(y,y')$（不含$x$型）\n\n> $$\\begin{split}\n&yy''+2y'^2=0\\\\\\\\\n令：&p=y'，y''=p'=\\frac{dp}{dy}\\frac{dy}{dx}=\\frac{dp}{dy}p\\\\\\\\\n原方程化为：&y\\frac{dp}{dy}p+2p^2=0\\\\\\\\\n分离变量得：&\\frac{dp}{p}=-2\\frac{dy}{y}\\\\\\\\\n两侧积分得：&ln|p|=ln\\frac{1}{y^2}+C_1\\\\\\\\\n即：&p=\\frac{C_0}{y^2}=y'=\\frac{dy}{dx}\\\\\\\\\n分离变量得：&y^2dy=C_0dx\\\\\\\\\n两侧积分得：&y^3=C_1x+C_2\n\\end{split}$$\n\n### 常系数齐次线性微分方程\n\n#### 二阶\n\n令$y''+py'+qy=0\\Rightarrow 特征方程：r^2+pr+q=0，考虑其解的情况：$\n\n| 特征方程的解 | 通解 |\n|-|-|\n| $r_1\\neq r_2∈R$ | $y=C_1e^{r_1x}+C_2e^{r_2x}$ |\n| $r_1=r_2=r∈R$ | $y=C_1e^{rx}+C_2xe^{rx}$ |\n| $r_1=α+iβ，r_2=α-iβ$ | $y=C_1e^{αx}cosβx+C_2e^{αx}sinβx$ |\n\n#### 高阶\n\n第$i$重根就乘$x^i$\n\n| 特征方程的解 | 通解 |\n|-|-|\n| $r_1=-1，r_2=r_3=i，r_4=r_5=-i$ | $y=C_1e^{-x}+C_2cosx+C_3sinx+C_4xcosx+C_5xsinx$ |\n| $r_1=r_2=r_3=r$ | $y=C_1e^{rx}+C_2xe^{rx}+C_3x^2e^{rx}$ |\n\n### 常系数非齐次线性微分方程\n\n$y''+py'+qy=P_m(x)e^{λx}\\Rightarrow 特解y^*=x^kQ_m(x)e^{λx}（k：λ是特征方程的k重根）$\n\n一般做法：\n- 先令$y''+py'+qy=0$，求其特征方程的根\n- 右侧化为$P_m(x)e^{λx}$（有$sinx或cosx时λ$设为复数），得到$λ$是$k$重根\n- 设出特解$y^*=x^kQ_m(x)e^{λx}（有sinx或cosx时为\\overline{y}）$\n- $y^*代入y$解出$Q_m(x)$的系数，得到特解（有$cosx时为\\overline{y}$的实部；有$sinx时为\\overline{y}$的虚部）","slug":"Higher-Mathematics","published":1,"updated":"2021-04-25T07:11:17.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuouf0007zcl0bmjtgdvh","content":"<h2 id=\"函数与极限\"><a href=\"#函数与极限\" class=\"headerlink\" title=\"函数与极限\"></a>函数与极限</h2><h3 id=\"函数的极限\"><a href=\"#函数的极限\" class=\"headerlink\" title=\"函数的极限\"></a>函数的极限</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>极限：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当0&lt;|x-x_0|&lt;δ时，有|f(x)-A|&lt;ε$</p>\n<p>左极限：$\\lim\\limits_{x\\to x_0^-}f(x)=A\\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当x_0-δ&lt;x&lt;x_0时，有|f(x)-A|&lt;ε$</p>\n<p>右极限：$\\lim\\limits_{x\\to x_0^+}f(x)=A\\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当x_0&lt;x&lt;x_0+δ时，有|f(x)-A|&lt;ε$</p>\n<h4 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h4><p>存在的充要条件：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow \\lim\\limits_{x\\to x_0^-}f(x)=\\lim\\limits_{x\\to x_0^+}f(x)=A$</p>\n<p>唯一性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow 该极限唯一$</p>\n<p>局部有界性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow ∀M&gt;0，δ&gt;0，0&lt;|x-x_0|&lt;δ，|f(x)|≤M$</p>\n<p>局部保号性：$\\lim\\limits_{x\\to x_0}f(x)=A&gt;0\\Rightarrow ∀δ&gt;0，0&lt;|x-x_0|&lt;δ，f(x)&gt;0$，小于0同理</p>\n<h3 id=\"极限运算法则\"><a href=\"#极限运算法则\" class=\"headerlink\" title=\"极限运算法则\"></a>极限运算法则</h3><ul>\n<li><strong>有限个</strong>无穷小的和是无穷小（任意个为Undefined）</li>\n<li><strong>有限个</strong>无穷小（大）的积是无穷小（大）（任意个为Undefined）</li>\n<li>有界函数乘无穷小的积是无穷小</li>\n</ul>\n<h4 id=\"线性运算性质\"><a href=\"#线性运算性质\" class=\"headerlink\" title=\"线性运算性质\"></a>线性运算性质</h4><p>$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)±g(x))=A±B$</p>\n<p>$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)g(x))=AB$</p>\n<p>$\\lim f(x)=A，\\lim g(x)=B\\neq 0\\Rightarrow\\lim\\frac{f(x)}{g(x)}=\\frac{A}{B}$</p>\n<p>$\\lim (cf(x))=c\\lim f(x)$（c为常数）</p>\n<p>$\\lim (f(x))^n=(\\lim f(x))^n$（n为正整数）</p>\n<h4 id=\"括号穿透\"><a href=\"#括号穿透\" class=\"headerlink\" title=\"括号穿透\"></a>括号穿透</h4><p>$\\lim\\limits_{x\\to x_0}f(g(x))=f(\\lim\\limits_{x\\to x_0}g(x))$</p>\n<h3 id=\"极限存在准则-两个重要极限\"><a href=\"#极限存在准则-两个重要极限\" class=\"headerlink\" title=\"极限存在准则 两个重要极限\"></a>极限存在准则 两个重要极限</h3><h4 id=\"夹逼准则\"><a href=\"#夹逼准则\" class=\"headerlink\" title=\"夹逼准则\"></a>夹逼准则</h4><p>$x∈\\mathring{U}(x_0,r)，g(x)≤f(x)≤h(x)，且\\lim\\limits_{x\\to x_0}g(x)=\\lim\\limits_{x\\to x_0}h(x)=A\\Rightarrow \\lim\\limits_{x\\to x_0}f(x)=A$</p>\n<h4 id=\"重要极限\"><a href=\"#重要极限\" class=\"headerlink\" title=\"重要极限\"></a>重要极限</h4><ul>\n<li><p>$\\lim\\limits_{x\\to x_0}\\frac{sinx}{x}=1$</p>\n<blockquote>\n<p>证明：$sinx&lt;x&lt;tanx\\Rightarrow cosx&lt;\\frac{sinx}{x}&lt;1，\\lim\\limits_{x\\to 0}cosx=1\\Rightarrow 夹逼准则证出$</p>\n</blockquote>\n</li>\n<li><p>$\\lim\\limits_{x\\to ∞}(1+\\frac{1}{x})^x=\\lim\\limits_{x\\to 0}(1+x)^\\frac{1}{x}=e$</p>\n<blockquote>\n<p>证明：$(1+\\frac{1}{n})^n二项式展开后\\leq \\sum_{i=0}^{n}\\frac{1}{i!}\\leq 2+\\sum_{i=1}^{n}\\frac{1}{2^i}=3-\\frac{1}{2^(n-1)}\\le 3$，证明极限存在，<strong>定义其为e</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"无穷小的比较\"><a href=\"#无穷小的比较\" class=\"headerlink\" title=\"无穷小的比较\"></a>无穷小的比较</h3><h4 id=\"常用等价无穷小\"><a href=\"#常用等价无穷小\" class=\"headerlink\" title=\"常用等价无穷小\"></a>常用等价无穷小</h4><ul>\n<li>$x \\sim sinx \\sim arcsinx \\sim tanx \\sim arctanx \\sim ln(x+1) \\sim e^x-1$</li>\n<li>$1-cosx \\sim \\frac{x^2}{2} \\sim \\frac{1}{cosx}-1$</li>\n<li>$(1+x)^α-1 \\sim αx$</li>\n<li>$tanx-sinx \\sim \\frac{x^3}{2}$</li>\n</ul>\n<h3 id=\"连续函数的性质\"><a href=\"#连续函数的性质\" class=\"headerlink\" title=\"连续函数的性质\"></a>连续函数的性质</h3><h4 id=\"介值定理\"><a href=\"#介值定理\" class=\"headerlink\" title=\"介值定理\"></a>介值定理</h4><p>$f(x)∈c[a,b]，f(a)=A，f(b)=B\\Rightarrow ∀C∈(A,B)，∃ξ∈(a,b)，st.f(ξ)=C$</p>\n<h2 id=\"导数与微分\"><a href=\"#导数与微分\" class=\"headerlink\" title=\"导数与微分\"></a>导数与微分</h2><p>连续不一定可导（可微）；可导（可微）一定连续</p>\n<p>不是明确可导的函数，不能直接写$f’(x)$，而要先写$\\lim\\limits_{x\\to x_0}\\frac{f(x)-f(x_0)}{x-x_0}$存在</p>\n<h3 id=\"求导法则\"><a href=\"#求导法则\" class=\"headerlink\" title=\"求导法则\"></a>求导法则</h3><h4 id=\"反函数\"><a href=\"#反函数\" class=\"headerlink\" title=\"反函数\"></a>反函数</h4><p>$y=f(x)$单调、可导、且$f’(x)\\neq 0\\Rightarrow (f^{-1}(y))’=\\frac{1}{f’(x)}$，<strong>最后记得化作$g(x)=f^{-1}(y)$</strong></p>\n<h4 id=\"复合函数\"><a href=\"#复合函数\" class=\"headerlink\" title=\"复合函数\"></a>复合函数</h4><p>$y=f(g(x))，g(x)在x处可导，f(u)在u=g(x)处可导\\Rightarrow y’=\\frac{dy}{dx}=\\frac{dy}{du}\\frac{du}{dx}=f’(g(x))g’(x)$</p>\n<h4 id=\"常用公式表及推导方法\"><a href=\"#常用公式表及推导方法\" class=\"headerlink\" title=\"常用公式表及推导方法\"></a>常用公式表及推导方法</h4><table>\n<thead>\n<tr>\n<th>原函数</th>\n<th>导数</th>\n<th>推导</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$x^u$</td>\n<td>$ux^{u-1}$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$sinx$</td>\n<td>$cosx$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$cosx$</td>\n<td>$-sinx$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$tanx$</td>\n<td>$sec^2x$</td>\n<td>$tanx=\\frac{sinx}{cosx}$</td>\n</tr>\n<tr>\n<td>$cotx$</td>\n<td>$-csc^2x$</td>\n<td>$cotx=\\frac{cosx}{sinx}$</td>\n</tr>\n<tr>\n<td>$secx$</td>\n<td>$secxtanx$</td>\n<td>$secx=\\frac{1}{cosx}$</td>\n</tr>\n<tr>\n<td>$cscx$</td>\n<td>$-cscxtanx$</td>\n<td>$cscx=\\frac{1}{sinx}$</td>\n</tr>\n<tr>\n<td>$arcsinx$</td>\n<td>$\\frac{1}{\\sqrt{1-x^2}}$</td>\n<td>$(arcsinx)’=\\frac{1}{(siny)’}=\\frac{1}{cosy}$</td>\n</tr>\n<tr>\n<td>$arccosx$</td>\n<td>$\\frac{-1}{\\sqrt{1-x^2}}$</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>$arctanx$</td>\n<td>$\\frac{1}{1+x^2}$</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>$arccotx$</td>\n<td>$\\frac{-1}{1+x^2}$</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>$a^x$</td>\n<td>$a^xlna$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$log_ax$</td>\n<td>$\\frac{1}{xlna}$</td>\n<td>$(log_ax)’=\\frac{1}{(a^y)’}=\\frac{1}{a^ylna}$</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用高阶导数\"><a href=\"#常用高阶导数\" class=\"headerlink\" title=\"常用高阶导数\"></a>常用高阶导数</h3><table>\n<thead>\n<tr>\n<th>原函数</th>\n<th>n阶导</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$sinx$</td>\n<td>$sin(x+\\frac{n}{2}π)$</td>\n</tr>\n<tr>\n<td>$cosx$</td>\n<td>$cos(x+\\frac{n}{2}π)$</td>\n</tr>\n<tr>\n<td>$f(ax+b)$</td>\n<td>$a^nf^{(n)}(ax+b)$</td>\n</tr>\n<tr>\n<td>$u(x)v(x)$</td>\n<td>$\\sum_{i=0}^{n}C_{n}^{n-i}u^{(n-i)}(x)v^{(i)}(x)$</td>\n</tr>\n</tbody></table>\n<h3 id=\"隐函数及参数方程的导数\"><a href=\"#隐函数及参数方程的导数\" class=\"headerlink\" title=\"隐函数及参数方程的导数\"></a>隐函数及参数方程的导数</h3><ul>\n<li><p>隐函数</p>\n<blockquote>\n<p>例子：$e^y+xy-e=0，两边对x求导：e^yy’+(y+xy’)=0，分离变量：y’=-\\frac{y}{x+e^y}$</p>\n</blockquote>\n</li>\n<li><p>参数方程</p>\n<blockquote>\n<p>$y’=\\frac{dy}{dx}=\\frac{\\frac{dy}{dt}}{\\frac{dx}{dt}}$</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"微分中值定理与导数的应用\"><a href=\"#微分中值定理与导数的应用\" class=\"headerlink\" title=\"微分中值定理与导数的应用\"></a>微分中值定理与导数的应用</h2><h3 id=\"微分中值定理\"><a href=\"#微分中值定理\" class=\"headerlink\" title=\"微分中值定理\"></a>微分中值定理</h3><h4 id=\"拉格朗日中值定理\"><a href=\"#拉格朗日中值定理\" class=\"headerlink\" title=\"拉格朗日中值定理\"></a>拉格朗日中值定理</h4><blockquote>\n<p>$f(x)$满足：1：在$[a,b]$连续；2：在(a,b)可导<br>则：$∃ξ∈(a,b)，st.f(b)-f(a)=f’(ξ)(b-a)$</p>\n</blockquote>\n<h4 id=\"柯西中值定理\"><a href=\"#柯西中值定理\" class=\"headerlink\" title=\"柯西中值定理\"></a>柯西中值定理</h4><blockquote>\n<p>$f(x)和F(x)$满足：1：在$[a,b]$连续；2：在$(a,b)$可导；3：$∀x∈(a,b)，F’(x)\\neq 0$<br>则：$∃ξ∈(a,b)，st.\\frac{f(b)-f(a)}{F(b)-F(a)}=\\frac{f’(ξ)}{F’(ξ)}$</p>\n</blockquote>\n<h3 id=\"洛必达法则\"><a href=\"#洛必达法则\" class=\"headerlink\" title=\"洛必达法则\"></a>洛必达法则</h3><blockquote>\n<p>设：<br>(1) $\\lim\\limits_{x\\Rightarrow a}f(x)=\\lim\\limits_{x\\Rightarrow a}F(x)=0$<br>(2) $a$的某去心领域内，$f’(x)，F’(x)$都存在且$F’(x)\\neq 0$<br>(3) $\\lim\\limits_{x\\Rightarrow a}\\frac{f’(x)}{F’(x)}$存在或为无穷大<br>则：$\\lim\\limits_{x\\Rightarrow a}\\frac{f(x)}{F(x)}=\\lim\\limits_{x\\Rightarrow a}\\frac{f’(x)}{F’(x)}$</p>\n</blockquote>\n<h3 id=\"泰勒公式\"><a href=\"#泰勒公式\" class=\"headerlink\" title=\"泰勒公式\"></a>泰勒公式</h3><p>$f(x)$在$x_0$处具有$n$阶导$\\Rightarrow ∃x∈U(x_0)，st. f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i+o((x-x_0)^n)$</p>\n<p>取$x_0=0$得<strong>n阶局部迈克劳林公式：</strong>$f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(0)}{i!}x^i+o(x^n)$ </p>\n<h4 id=\"常用公式\"><a href=\"#常用公式\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h4><ul>\n<li>$\\frac{1}{1-x}=\\sum_{i=0}^{n}x^i+o(x^n)=\\frac{1-x^n}{1-x}+o(x^n)$</li>\n<li>推出$\\frac{a}{1-x}=\\frac{a(1-x^n)}{1-x}+o(x^n)$，即<strong>a为首项，x为公比的等比数列的前n项和</strong></li>\n<li>$e^x=\\sum_{i=0}^{n}\\frac{x^i}{i!}+o(x^n)$（借此可推出欧拉公式）</li>\n<li>$sinx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i+1)!}+o(x^{2n+1})$</li>\n<li>$cosx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i)!}+o(x^{2n})$</li>\n</ul>\n<h3 id=\"单调性与极值、凹凸区间与拐点\"><a href=\"#单调性与极值、凹凸区间与拐点\" class=\"headerlink\" title=\"单调性与极值、凹凸区间与拐点\"></a>单调性与极值、凹凸区间与拐点</h3><p>$f(x)在[a,b]连续，在(a,b)内具有一阶和二阶导，那么：$</p>\n<ul>\n<li>$若∀x∈(a,b)，f’’(x)&gt;0\\Rightarrow f(x)在[a,b]是上凹的$</li>\n<li>$若∀x∈(a,b)，f’’(x)&lt;0\\Rightarrow f(x)在[a,b]是上凸的$</li>\n<li>$若∃x_0∈(a,b)，f’’(x)在x_0左右异号\\Rightarrow (x_0,f(x_0))是拐点$</li>\n</ul>\n<p><strong>注意：凹凸区间包含端点，拐点是坐标</strong></p>\n<p>单调性的考虑点：驻点（二阶导为0）、不可导点；（<strong>两者都是x=x_0</strong>）</p>\n<p>极值：先求单调性，列表求极值</p>\n<h2 id=\"不定积分\"><a href=\"#不定积分\" class=\"headerlink\" title=\"不定积分\"></a>不定积分</h2><h3 id=\"换元积分法\"><a href=\"#换元积分法\" class=\"headerlink\" title=\"换元积分法\"></a>换元积分法</h3><p>$\\int u_v’v’_xdx=\\int u_v’dv=u+C$</p>\n<h4 id=\"常用公式-1\"><a href=\"#常用公式-1\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h4><ul>\n<li>$\\int\\frac{1}{x}=ln|x|+C$</li>\n<li>$\\int tanxdx=\\int\\frac{1}{cosx}sinxdx=-\\int\\frac{1}{cosx}dcosx=-ln|cosx|+C$</li>\n<li>$\\int cotxdx=\\int\\frac{1}{sinx}cosxdx=\\int\\frac{1}{sinx}dsinx=ln|sinx|+C$</li>\n<li>$\\int secxdx=ln|secx+tanx|+C$</li>\n<li>$\\int cscxdx=-ln|cscx+tanx|+C$</li>\n</ul>\n<p>推导：</p>\n<blockquote>\n<p>$$\\begin{split}<br>\\int secxdx&amp;=\\int\\frac{1}{cosx}dx\\\\<br>&amp;=\\int\\frac{1}{cos^2x}cosxdx\\\\<br>&amp;=\\int\\frac{1}{1-sin^2x}dsinx\\\\<br>&amp;=\\frac{1}{2}\\int\\frac{(1-sinx)+(1+sinx)}{(1-sinx)(1+sinx)}dsinx\\\\<br>&amp;=\\frac{1}{2}\\int(\\frac{1}{1+sinx}+\\frac{1}{1-sinx})dsinx\\\\<br>&amp;=\\frac{1}{2}(ln|1+sinx|-ln|1-sinx|)+C\\\\<br>&amp;=ln|\\frac{\\sqrt{1+sinx}}{\\sqrt{1-sinx}}|+C\\\\<br>&amp;=ln|\\frac{\\sqrt{(1+sinx)^2}}{\\sqrt{(1+sinx)(1-sinx)}}|+C\\\\<br>&amp;=ln|\\frac{1+sinx}{cosx}|+C\\\\<br>&amp;=ln|secx+tanx|+C<br>\\end{split}$$</p>\n</blockquote>\n<h3 id=\"分部积分法\"><a href=\"#分部积分法\" class=\"headerlink\" title=\"分部积分法\"></a>分部积分法</h3><p>$\\int udv=uv-\\int vdu$：<strong>对反幂三指，排前作u排后作v</strong></p>\n<h2 id=\"定积分\"><a href=\"#定积分\" class=\"headerlink\" title=\"定积分\"></a>定积分</h2><h3 id=\"定积分的换元积分法和分部积分法\"><a href=\"#定积分的换元积分法和分部积分法\" class=\"headerlink\" title=\"定积分的换元积分法和分部积分法\"></a>定积分的换元积分法和分部积分法</h3><ul>\n<li>换元公式$\\int_{a}^{b}(x)dx=\\int_{α}^{β}f(φ(t))φ’(t)dt$</li>\n<li>分部积分公式$\\int_{a}^{b}udv=(u(b)v(b)-u(a)v(a))-\\int_{a}^{b}vdu$</li>\n</ul>\n<h3 id=\"反常积分\"><a href=\"#反常积分\" class=\"headerlink\" title=\"反常积分\"></a>反常积分</h3><p>$\\frac{d\\int_{α(x)}^{β(x)}f(t)dt}{dx}=β’(x)f(β(x))-α’(x)f(α(x))$</p>\n<h3 id=\"定积分几何\"><a href=\"#定积分几何\" class=\"headerlink\" title=\"定积分几何\"></a>定积分几何</h3><p>曲线弧长：</p>\n<ul>\n<li>直角：$s=\\int_{a}^{b}\\sqrt{1+y’^2}dx$</li>\n<li>参数：$s=\\int_{a}^{b}\\sqrt{φ’^2(t)+ψ’^2(t)}dt$</li>\n<li>极坐标：$s=\\int_{a}^{b}\\sqrt{ρ^2(θ)+ρ’^2(θ)}dθ$</li>\n</ul>\n<h2 id=\"微分方程\"><a href=\"#微分方程\" class=\"headerlink\" title=\"微分方程\"></a>微分方程</h2><h3 id=\"一阶线性微分方程\"><a href=\"#一阶线性微分方程\" class=\"headerlink\" title=\"一阶线性微分方程\"></a>一阶线性微分方程</h3><p>$y’+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}$</p>\n<h3 id=\"可降阶的高阶微分方程\"><a href=\"#可降阶的高阶微分方程\" class=\"headerlink\" title=\"可降阶的高阶微分方程\"></a>可降阶的高阶微分方程</h3><h4 id=\"y-n-f-x-（只含-x-型）\"><a href=\"#y-n-f-x-（只含-x-型）\" class=\"headerlink\" title=\"$y^{(n)}=f(x)$（只含$x$型）\"></a>$y^{(n)}=f(x)$（只含$x$型）</h4><blockquote>\n<p>$$\\begin{split}<br>&amp;y’’=x+sinx\\\\<br>令：&amp;p=y’，y’’=p’=x+sinx\\\\<br>两侧积分得：&amp;p=\\frac{x^2}{2}-cosx+C_1=y’\\\\<br>两侧积分得：&amp;y=\\frac{x^3}{6}-sinx+C_1x+C_2\\\\<br>\\end{split}$$</p>\n</blockquote>\n<h4 id=\"y’’-f-x-y’-（含-x，y-型）\"><a href=\"#y’’-f-x-y’-（含-x，y-型）\" class=\"headerlink\" title=\"$y’’=f(x,y’)$（含$x，y$型）\"></a>$y’’=f(x,y’)$（含$x，y$型）</h4><blockquote>\n<p>$$\\begin{split}<br>&amp;y’’=y’+x\\\\<br>令：&amp;p=y’，y’’=p’\\\\<br>原方程化为：&amp;p’-p=x\\\\<br>一阶线性微分方程公式：&amp;y’+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}\\\\<br>代入：&amp;P(x)=-1，Q(x)=x，C=C_1\\\\<br>可得：&amp;p=(C_1+\\int xe^{\\int (-1)dx}dx)e^{-\\int (-1)dx}\\\\<br>&amp;\\ =(C_1+\\int xe^{-x}dx)e^x\\\\<br>&amp;\\ =(C_1-\\int xde^{-x})e^x\\\\<br>&amp;\\ =(C_1-(xe^{-x}-\\int e^{-x}dx))e^x\\\\<br>&amp;\\ =(-xe^{-x}-e^{-x}+C_1)e^x\\\\<br>&amp;\\ =-x-1+C_1e^x\\\\<br>即：&amp;y’=p=-x-1+C_1e^x\\\\<br>两侧积分得：&amp;y=\\int (C_1e^x-x-1)dx=C_1e^x-\\frac{x^2}{2}-x+C^2<br>\\end{split}$$</p>\n</blockquote>\n<h4 id=\"y’’-f-y-y’-（不含-x-型）\"><a href=\"#y’’-f-y-y’-（不含-x-型）\" class=\"headerlink\" title=\"$y’’=f(y,y’)$（不含$x$型）\"></a>$y’’=f(y,y’)$（不含$x$型）</h4><blockquote>\n<p>$$\\begin{split}<br>&amp;yy’’+2y’^2=0\\\\<br>令：&amp;p=y’，y’’=p’=\\frac{dp}{dy}\\frac{dy}{dx}=\\frac{dp}{dy}p\\\\<br>原方程化为：&amp;y\\frac{dp}{dy}p+2p^2=0\\\\<br>分离变量得：&amp;\\frac{dp}{p}=-2\\frac{dy}{y}\\\\<br>两侧积分得：&amp;ln|p|=ln\\frac{1}{y^2}+C_1\\\\<br>即：&amp;p=\\frac{C_0}{y^2}=y’=\\frac{dy}{dx}\\\\<br>分离变量得：&amp;y^2dy=C_0dx\\\\<br>两侧积分得：&amp;y^3=C_1x+C_2<br>\\end{split}$$</p>\n</blockquote>\n<h3 id=\"常系数齐次线性微分方程\"><a href=\"#常系数齐次线性微分方程\" class=\"headerlink\" title=\"常系数齐次线性微分方程\"></a>常系数齐次线性微分方程</h3><h4 id=\"二阶\"><a href=\"#二阶\" class=\"headerlink\" title=\"二阶\"></a>二阶</h4><p>令$y’’+py’+qy=0\\Rightarrow 特征方程：r^2+pr+q=0，考虑其解的情况：$</p>\n<table>\n<thead>\n<tr>\n<th>特征方程的解</th>\n<th>通解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$r_1\\neq r_2∈R$</td>\n<td>$y=C_1e^{r_1x}+C_2e^{r_2x}$</td>\n</tr>\n<tr>\n<td>$r_1=r_2=r∈R$</td>\n<td>$y=C_1e^{rx}+C_2xe^{rx}$</td>\n</tr>\n<tr>\n<td>$r_1=α+iβ，r_2=α-iβ$</td>\n<td>$y=C_1e^{αx}cosβx+C_2e^{αx}sinβx$</td>\n</tr>\n</tbody></table>\n<h4 id=\"高阶\"><a href=\"#高阶\" class=\"headerlink\" title=\"高阶\"></a>高阶</h4><p>第$i$重根就乘$x^i$</p>\n<table>\n<thead>\n<tr>\n<th>特征方程的解</th>\n<th>通解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$r_1=-1，r_2=r_3=i，r_4=r_5=-i$</td>\n<td>$y=C_1e^{-x}+C_2cosx+C_3sinx+C_4xcosx+C_5xsinx$</td>\n</tr>\n<tr>\n<td>$r_1=r_2=r_3=r$</td>\n<td>$y=C_1e^{rx}+C_2xe^{rx}+C_3x^2e^{rx}$</td>\n</tr>\n</tbody></table>\n<h3 id=\"常系数非齐次线性微分方程\"><a href=\"#常系数非齐次线性微分方程\" class=\"headerlink\" title=\"常系数非齐次线性微分方程\"></a>常系数非齐次线性微分方程</h3><p>$y’’+py’+qy=P_m(x)e^{λx}\\Rightarrow 特解y^*=x^kQ_m(x)e^{λx}（k：λ是特征方程的k重根）$</p>\n<p>一般做法：</p>\n<ul>\n<li>先令$y’’+py’+qy=0$，求其特征方程的根</li>\n<li>右侧化为$P_m(x)e^{λx}$（有$sinx或cosx时λ$设为复数），得到$λ$是$k$重根</li>\n<li>设出特解$y^*=x^kQ_m(x)e^{λx}（有sinx或cosx时为\\overline{y}）$</li>\n<li>$y^*代入y$解出$Q_m(x)$的系数，得到特解（有$cosx时为\\overline{y}$的实部；有$sinx时为\\overline{y}$的虚部）</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"函数与极限\"><a href=\"#函数与极限\" class=\"headerlink\" title=\"函数与极限\"></a>函数与极限</h2><h3 id=\"函数的极限\"><a href=\"#函数的极限\" class=\"headerlink\" title=\"函数的极限\"></a>函数的极限</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>极限：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当0&lt;|x-x_0|&lt;δ时，有|f(x)-A|&lt;ε$</p>\n<p>左极限：$\\lim\\limits_{x\\to x_0^-}f(x)=A\\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当x_0-δ&lt;x&lt;x_0时，有|f(x)-A|&lt;ε$</p>\n<p>右极限：$\\lim\\limits_{x\\to x_0^+}f(x)=A\\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当x_0&lt;x&lt;x_0+δ时，有|f(x)-A|&lt;ε$</p>\n<h4 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h4><p>存在的充要条件：$\\lim\\limits_{x\\to x_0}f(x)=A\\Leftrightarrow \\lim\\limits_{x\\to x_0^-}f(x)=\\lim\\limits_{x\\to x_0^+}f(x)=A$</p>\n<p>唯一性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow 该极限唯一$</p>\n<p>局部有界性：$\\lim\\limits_{x\\to x_0}f(x)=A\\Rightarrow ∀M&gt;0，δ&gt;0，0&lt;|x-x_0|&lt;δ，|f(x)|≤M$</p>\n<p>局部保号性：$\\lim\\limits_{x\\to x_0}f(x)=A&gt;0\\Rightarrow ∀δ&gt;0，0&lt;|x-x_0|&lt;δ，f(x)&gt;0$，小于0同理</p>\n<h3 id=\"极限运算法则\"><a href=\"#极限运算法则\" class=\"headerlink\" title=\"极限运算法则\"></a>极限运算法则</h3><ul>\n<li><strong>有限个</strong>无穷小的和是无穷小（任意个为Undefined）</li>\n<li><strong>有限个</strong>无穷小（大）的积是无穷小（大）（任意个为Undefined）</li>\n<li>有界函数乘无穷小的积是无穷小</li>\n</ul>\n<h4 id=\"线性运算性质\"><a href=\"#线性运算性质\" class=\"headerlink\" title=\"线性运算性质\"></a>线性运算性质</h4><p>$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)±g(x))=A±B$</p>\n<p>$\\lim f(x)=A，\\lim g(x)=B\\Rightarrow\\lim (f(x)g(x))=AB$</p>\n<p>$\\lim f(x)=A，\\lim g(x)=B\\neq 0\\Rightarrow\\lim\\frac{f(x)}{g(x)}=\\frac{A}{B}$</p>\n<p>$\\lim (cf(x))=c\\lim f(x)$（c为常数）</p>\n<p>$\\lim (f(x))^n=(\\lim f(x))^n$（n为正整数）</p>\n<h4 id=\"括号穿透\"><a href=\"#括号穿透\" class=\"headerlink\" title=\"括号穿透\"></a>括号穿透</h4><p>$\\lim\\limits_{x\\to x_0}f(g(x))=f(\\lim\\limits_{x\\to x_0}g(x))$</p>\n<h3 id=\"极限存在准则-两个重要极限\"><a href=\"#极限存在准则-两个重要极限\" class=\"headerlink\" title=\"极限存在准则 两个重要极限\"></a>极限存在准则 两个重要极限</h3><h4 id=\"夹逼准则\"><a href=\"#夹逼准则\" class=\"headerlink\" title=\"夹逼准则\"></a>夹逼准则</h4><p>$x∈\\mathring{U}(x_0,r)，g(x)≤f(x)≤h(x)，且\\lim\\limits_{x\\to x_0}g(x)=\\lim\\limits_{x\\to x_0}h(x)=A\\Rightarrow \\lim\\limits_{x\\to x_0}f(x)=A$</p>\n<h4 id=\"重要极限\"><a href=\"#重要极限\" class=\"headerlink\" title=\"重要极限\"></a>重要极限</h4><ul>\n<li><p>$\\lim\\limits_{x\\to x_0}\\frac{sinx}{x}=1$</p>\n<blockquote>\n<p>证明：$sinx&lt;x&lt;tanx\\Rightarrow cosx&lt;\\frac{sinx}{x}&lt;1，\\lim\\limits_{x\\to 0}cosx=1\\Rightarrow 夹逼准则证出$</p>\n</blockquote>\n</li>\n<li><p>$\\lim\\limits_{x\\to ∞}(1+\\frac{1}{x})^x=\\lim\\limits_{x\\to 0}(1+x)^\\frac{1}{x}=e$</p>\n<blockquote>\n<p>证明：$(1+\\frac{1}{n})^n二项式展开后\\leq \\sum_{i=0}^{n}\\frac{1}{i!}\\leq 2+\\sum_{i=1}^{n}\\frac{1}{2^i}=3-\\frac{1}{2^(n-1)}\\le 3$，证明极限存在，<strong>定义其为e</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"无穷小的比较\"><a href=\"#无穷小的比较\" class=\"headerlink\" title=\"无穷小的比较\"></a>无穷小的比较</h3><h4 id=\"常用等价无穷小\"><a href=\"#常用等价无穷小\" class=\"headerlink\" title=\"常用等价无穷小\"></a>常用等价无穷小</h4><ul>\n<li>$x \\sim sinx \\sim arcsinx \\sim tanx \\sim arctanx \\sim ln(x+1) \\sim e^x-1$</li>\n<li>$1-cosx \\sim \\frac{x^2}{2} \\sim \\frac{1}{cosx}-1$</li>\n<li>$(1+x)^α-1 \\sim αx$</li>\n<li>$tanx-sinx \\sim \\frac{x^3}{2}$</li>\n</ul>\n<h3 id=\"连续函数的性质\"><a href=\"#连续函数的性质\" class=\"headerlink\" title=\"连续函数的性质\"></a>连续函数的性质</h3><h4 id=\"介值定理\"><a href=\"#介值定理\" class=\"headerlink\" title=\"介值定理\"></a>介值定理</h4><p>$f(x)∈c[a,b]，f(a)=A，f(b)=B\\Rightarrow ∀C∈(A,B)，∃ξ∈(a,b)，st.f(ξ)=C$</p>\n<h2 id=\"导数与微分\"><a href=\"#导数与微分\" class=\"headerlink\" title=\"导数与微分\"></a>导数与微分</h2><p>连续不一定可导（可微）；可导（可微）一定连续</p>\n<p>不是明确可导的函数，不能直接写$f’(x)$，而要先写$\\lim\\limits_{x\\to x_0}\\frac{f(x)-f(x_0)}{x-x_0}$存在</p>\n<h3 id=\"求导法则\"><a href=\"#求导法则\" class=\"headerlink\" title=\"求导法则\"></a>求导法则</h3><h4 id=\"反函数\"><a href=\"#反函数\" class=\"headerlink\" title=\"反函数\"></a>反函数</h4><p>$y=f(x)$单调、可导、且$f’(x)\\neq 0\\Rightarrow (f^{-1}(y))’=\\frac{1}{f’(x)}$，<strong>最后记得化作$g(x)=f^{-1}(y)$</strong></p>\n<h4 id=\"复合函数\"><a href=\"#复合函数\" class=\"headerlink\" title=\"复合函数\"></a>复合函数</h4><p>$y=f(g(x))，g(x)在x处可导，f(u)在u=g(x)处可导\\Rightarrow y’=\\frac{dy}{dx}=\\frac{dy}{du}\\frac{du}{dx}=f’(g(x))g’(x)$</p>\n<h4 id=\"常用公式表及推导方法\"><a href=\"#常用公式表及推导方法\" class=\"headerlink\" title=\"常用公式表及推导方法\"></a>常用公式表及推导方法</h4><table>\n<thead>\n<tr>\n<th>原函数</th>\n<th>导数</th>\n<th>推导</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$x^u$</td>\n<td>$ux^{u-1}$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$sinx$</td>\n<td>$cosx$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$cosx$</td>\n<td>$-sinx$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$tanx$</td>\n<td>$sec^2x$</td>\n<td>$tanx=\\frac{sinx}{cosx}$</td>\n</tr>\n<tr>\n<td>$cotx$</td>\n<td>$-csc^2x$</td>\n<td>$cotx=\\frac{cosx}{sinx}$</td>\n</tr>\n<tr>\n<td>$secx$</td>\n<td>$secxtanx$</td>\n<td>$secx=\\frac{1}{cosx}$</td>\n</tr>\n<tr>\n<td>$cscx$</td>\n<td>$-cscxtanx$</td>\n<td>$cscx=\\frac{1}{sinx}$</td>\n</tr>\n<tr>\n<td>$arcsinx$</td>\n<td>$\\frac{1}{\\sqrt{1-x^2}}$</td>\n<td>$(arcsinx)’=\\frac{1}{(siny)’}=\\frac{1}{cosy}$</td>\n</tr>\n<tr>\n<td>$arccosx$</td>\n<td>$\\frac{-1}{\\sqrt{1-x^2}}$</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>$arctanx$</td>\n<td>$\\frac{1}{1+x^2}$</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>$arccotx$</td>\n<td>$\\frac{-1}{1+x^2}$</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>$a^x$</td>\n<td>$a^xlna$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$log_ax$</td>\n<td>$\\frac{1}{xlna}$</td>\n<td>$(log_ax)’=\\frac{1}{(a^y)’}=\\frac{1}{a^ylna}$</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用高阶导数\"><a href=\"#常用高阶导数\" class=\"headerlink\" title=\"常用高阶导数\"></a>常用高阶导数</h3><table>\n<thead>\n<tr>\n<th>原函数</th>\n<th>n阶导</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$sinx$</td>\n<td>$sin(x+\\frac{n}{2}π)$</td>\n</tr>\n<tr>\n<td>$cosx$</td>\n<td>$cos(x+\\frac{n}{2}π)$</td>\n</tr>\n<tr>\n<td>$f(ax+b)$</td>\n<td>$a^nf^{(n)}(ax+b)$</td>\n</tr>\n<tr>\n<td>$u(x)v(x)$</td>\n<td>$\\sum_{i=0}^{n}C_{n}^{n-i}u^{(n-i)}(x)v^{(i)}(x)$</td>\n</tr>\n</tbody></table>\n<h3 id=\"隐函数及参数方程的导数\"><a href=\"#隐函数及参数方程的导数\" class=\"headerlink\" title=\"隐函数及参数方程的导数\"></a>隐函数及参数方程的导数</h3><ul>\n<li><p>隐函数</p>\n<blockquote>\n<p>例子：$e^y+xy-e=0，两边对x求导：e^yy’+(y+xy’)=0，分离变量：y’=-\\frac{y}{x+e^y}$</p>\n</blockquote>\n</li>\n<li><p>参数方程</p>\n<blockquote>\n<p>$y’=\\frac{dy}{dx}=\\frac{\\frac{dy}{dt}}{\\frac{dx}{dt}}$</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"微分中值定理与导数的应用\"><a href=\"#微分中值定理与导数的应用\" class=\"headerlink\" title=\"微分中值定理与导数的应用\"></a>微分中值定理与导数的应用</h2><h3 id=\"微分中值定理\"><a href=\"#微分中值定理\" class=\"headerlink\" title=\"微分中值定理\"></a>微分中值定理</h3><h4 id=\"拉格朗日中值定理\"><a href=\"#拉格朗日中值定理\" class=\"headerlink\" title=\"拉格朗日中值定理\"></a>拉格朗日中值定理</h4><blockquote>\n<p>$f(x)$满足：1：在$[a,b]$连续；2：在(a,b)可导<br>则：$∃ξ∈(a,b)，st.f(b)-f(a)=f’(ξ)(b-a)$</p>\n</blockquote>\n<h4 id=\"柯西中值定理\"><a href=\"#柯西中值定理\" class=\"headerlink\" title=\"柯西中值定理\"></a>柯西中值定理</h4><blockquote>\n<p>$f(x)和F(x)$满足：1：在$[a,b]$连续；2：在$(a,b)$可导；3：$∀x∈(a,b)，F’(x)\\neq 0$<br>则：$∃ξ∈(a,b)，st.\\frac{f(b)-f(a)}{F(b)-F(a)}=\\frac{f’(ξ)}{F’(ξ)}$</p>\n</blockquote>\n<h3 id=\"洛必达法则\"><a href=\"#洛必达法则\" class=\"headerlink\" title=\"洛必达法则\"></a>洛必达法则</h3><blockquote>\n<p>设：<br>(1) $\\lim\\limits_{x\\Rightarrow a}f(x)=\\lim\\limits_{x\\Rightarrow a}F(x)=0$<br>(2) $a$的某去心领域内，$f’(x)，F’(x)$都存在且$F’(x)\\neq 0$<br>(3) $\\lim\\limits_{x\\Rightarrow a}\\frac{f’(x)}{F’(x)}$存在或为无穷大<br>则：$\\lim\\limits_{x\\Rightarrow a}\\frac{f(x)}{F(x)}=\\lim\\limits_{x\\Rightarrow a}\\frac{f’(x)}{F’(x)}$</p>\n</blockquote>\n<h3 id=\"泰勒公式\"><a href=\"#泰勒公式\" class=\"headerlink\" title=\"泰勒公式\"></a>泰勒公式</h3><p>$f(x)$在$x_0$处具有$n$阶导$\\Rightarrow ∃x∈U(x_0)，st. f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i+o((x-x_0)^n)$</p>\n<p>取$x_0=0$得<strong>n阶局部迈克劳林公式：</strong>$f(x)=\\sum_{i=0}^{n}\\frac{f^{(i)}(0)}{i!}x^i+o(x^n)$ </p>\n<h4 id=\"常用公式\"><a href=\"#常用公式\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h4><ul>\n<li>$\\frac{1}{1-x}=\\sum_{i=0}^{n}x^i+o(x^n)=\\frac{1-x^n}{1-x}+o(x^n)$</li>\n<li>推出$\\frac{a}{1-x}=\\frac{a(1-x^n)}{1-x}+o(x^n)$，即<strong>a为首项，x为公比的等比数列的前n项和</strong></li>\n<li>$e^x=\\sum_{i=0}^{n}\\frac{x^i}{i!}+o(x^n)$（借此可推出欧拉公式）</li>\n<li>$sinx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i+1)!}+o(x^{2n+1})$</li>\n<li>$cosx=\\sum_{i=0}^{n}\\frac{(-1)^i}{(2i)!}+o(x^{2n})$</li>\n</ul>\n<h3 id=\"单调性与极值、凹凸区间与拐点\"><a href=\"#单调性与极值、凹凸区间与拐点\" class=\"headerlink\" title=\"单调性与极值、凹凸区间与拐点\"></a>单调性与极值、凹凸区间与拐点</h3><p>$f(x)在[a,b]连续，在(a,b)内具有一阶和二阶导，那么：$</p>\n<ul>\n<li>$若∀x∈(a,b)，f’’(x)&gt;0\\Rightarrow f(x)在[a,b]是上凹的$</li>\n<li>$若∀x∈(a,b)，f’’(x)&lt;0\\Rightarrow f(x)在[a,b]是上凸的$</li>\n<li>$若∃x_0∈(a,b)，f’’(x)在x_0左右异号\\Rightarrow (x_0,f(x_0))是拐点$</li>\n</ul>\n<p><strong>注意：凹凸区间包含端点，拐点是坐标</strong></p>\n<p>单调性的考虑点：驻点（二阶导为0）、不可导点；（<strong>两者都是x=x_0</strong>）</p>\n<p>极值：先求单调性，列表求极值</p>\n<h2 id=\"不定积分\"><a href=\"#不定积分\" class=\"headerlink\" title=\"不定积分\"></a>不定积分</h2><h3 id=\"换元积分法\"><a href=\"#换元积分法\" class=\"headerlink\" title=\"换元积分法\"></a>换元积分法</h3><p>$\\int u_v’v’_xdx=\\int u_v’dv=u+C$</p>\n<h4 id=\"常用公式-1\"><a href=\"#常用公式-1\" class=\"headerlink\" title=\"常用公式\"></a>常用公式</h4><ul>\n<li>$\\int\\frac{1}{x}=ln|x|+C$</li>\n<li>$\\int tanxdx=\\int\\frac{1}{cosx}sinxdx=-\\int\\frac{1}{cosx}dcosx=-ln|cosx|+C$</li>\n<li>$\\int cotxdx=\\int\\frac{1}{sinx}cosxdx=\\int\\frac{1}{sinx}dsinx=ln|sinx|+C$</li>\n<li>$\\int secxdx=ln|secx+tanx|+C$</li>\n<li>$\\int cscxdx=-ln|cscx+tanx|+C$</li>\n</ul>\n<p>推导：</p>\n<blockquote>\n<p>$$\\begin{split}<br>\\int secxdx&amp;=\\int\\frac{1}{cosx}dx\\\\<br>&amp;=\\int\\frac{1}{cos^2x}cosxdx\\\\<br>&amp;=\\int\\frac{1}{1-sin^2x}dsinx\\\\<br>&amp;=\\frac{1}{2}\\int\\frac{(1-sinx)+(1+sinx)}{(1-sinx)(1+sinx)}dsinx\\\\<br>&amp;=\\frac{1}{2}\\int(\\frac{1}{1+sinx}+\\frac{1}{1-sinx})dsinx\\\\<br>&amp;=\\frac{1}{2}(ln|1+sinx|-ln|1-sinx|)+C\\\\<br>&amp;=ln|\\frac{\\sqrt{1+sinx}}{\\sqrt{1-sinx}}|+C\\\\<br>&amp;=ln|\\frac{\\sqrt{(1+sinx)^2}}{\\sqrt{(1+sinx)(1-sinx)}}|+C\\\\<br>&amp;=ln|\\frac{1+sinx}{cosx}|+C\\\\<br>&amp;=ln|secx+tanx|+C<br>\\end{split}$$</p>\n</blockquote>\n<h3 id=\"分部积分法\"><a href=\"#分部积分法\" class=\"headerlink\" title=\"分部积分法\"></a>分部积分法</h3><p>$\\int udv=uv-\\int vdu$：<strong>对反幂三指，排前作u排后作v</strong></p>\n<h2 id=\"定积分\"><a href=\"#定积分\" class=\"headerlink\" title=\"定积分\"></a>定积分</h2><h3 id=\"定积分的换元积分法和分部积分法\"><a href=\"#定积分的换元积分法和分部积分法\" class=\"headerlink\" title=\"定积分的换元积分法和分部积分法\"></a>定积分的换元积分法和分部积分法</h3><ul>\n<li>换元公式$\\int_{a}^{b}(x)dx=\\int_{α}^{β}f(φ(t))φ’(t)dt$</li>\n<li>分部积分公式$\\int_{a}^{b}udv=(u(b)v(b)-u(a)v(a))-\\int_{a}^{b}vdu$</li>\n</ul>\n<h3 id=\"反常积分\"><a href=\"#反常积分\" class=\"headerlink\" title=\"反常积分\"></a>反常积分</h3><p>$\\frac{d\\int_{α(x)}^{β(x)}f(t)dt}{dx}=β’(x)f(β(x))-α’(x)f(α(x))$</p>\n<h3 id=\"定积分几何\"><a href=\"#定积分几何\" class=\"headerlink\" title=\"定积分几何\"></a>定积分几何</h3><p>曲线弧长：</p>\n<ul>\n<li>直角：$s=\\int_{a}^{b}\\sqrt{1+y’^2}dx$</li>\n<li>参数：$s=\\int_{a}^{b}\\sqrt{φ’^2(t)+ψ’^2(t)}dt$</li>\n<li>极坐标：$s=\\int_{a}^{b}\\sqrt{ρ^2(θ)+ρ’^2(θ)}dθ$</li>\n</ul>\n<h2 id=\"微分方程\"><a href=\"#微分方程\" class=\"headerlink\" title=\"微分方程\"></a>微分方程</h2><h3 id=\"一阶线性微分方程\"><a href=\"#一阶线性微分方程\" class=\"headerlink\" title=\"一阶线性微分方程\"></a>一阶线性微分方程</h3><p>$y’+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}$</p>\n<h3 id=\"可降阶的高阶微分方程\"><a href=\"#可降阶的高阶微分方程\" class=\"headerlink\" title=\"可降阶的高阶微分方程\"></a>可降阶的高阶微分方程</h3><h4 id=\"y-n-f-x-（只含-x-型）\"><a href=\"#y-n-f-x-（只含-x-型）\" class=\"headerlink\" title=\"$y^{(n)}=f(x)$（只含$x$型）\"></a>$y^{(n)}=f(x)$（只含$x$型）</h4><blockquote>\n<p>$$\\begin{split}<br>&amp;y’’=x+sinx\\\\<br>令：&amp;p=y’，y’’=p’=x+sinx\\\\<br>两侧积分得：&amp;p=\\frac{x^2}{2}-cosx+C_1=y’\\\\<br>两侧积分得：&amp;y=\\frac{x^3}{6}-sinx+C_1x+C_2\\\\<br>\\end{split}$$</p>\n</blockquote>\n<h4 id=\"y’’-f-x-y’-（含-x，y-型）\"><a href=\"#y’’-f-x-y’-（含-x，y-型）\" class=\"headerlink\" title=\"$y’’=f(x,y’)$（含$x，y$型）\"></a>$y’’=f(x,y’)$（含$x，y$型）</h4><blockquote>\n<p>$$\\begin{split}<br>&amp;y’’=y’+x\\\\<br>令：&amp;p=y’，y’’=p’\\\\<br>原方程化为：&amp;p’-p=x\\\\<br>一阶线性微分方程公式：&amp;y’+P(x)y=Q(x)\\Rightarrow y=(C+\\int Q(x)e^{\\int P(x)dx}dx)e^{-\\int P(x)dx}\\\\<br>代入：&amp;P(x)=-1，Q(x)=x，C=C_1\\\\<br>可得：&amp;p=(C_1+\\int xe^{\\int (-1)dx}dx)e^{-\\int (-1)dx}\\\\<br>&amp;\\ =(C_1+\\int xe^{-x}dx)e^x\\\\<br>&amp;\\ =(C_1-\\int xde^{-x})e^x\\\\<br>&amp;\\ =(C_1-(xe^{-x}-\\int e^{-x}dx))e^x\\\\<br>&amp;\\ =(-xe^{-x}-e^{-x}+C_1)e^x\\\\<br>&amp;\\ =-x-1+C_1e^x\\\\<br>即：&amp;y’=p=-x-1+C_1e^x\\\\<br>两侧积分得：&amp;y=\\int (C_1e^x-x-1)dx=C_1e^x-\\frac{x^2}{2}-x+C^2<br>\\end{split}$$</p>\n</blockquote>\n<h4 id=\"y’’-f-y-y’-（不含-x-型）\"><a href=\"#y’’-f-y-y’-（不含-x-型）\" class=\"headerlink\" title=\"$y’’=f(y,y’)$（不含$x$型）\"></a>$y’’=f(y,y’)$（不含$x$型）</h4><blockquote>\n<p>$$\\begin{split}<br>&amp;yy’’+2y’^2=0\\\\<br>令：&amp;p=y’，y’’=p’=\\frac{dp}{dy}\\frac{dy}{dx}=\\frac{dp}{dy}p\\\\<br>原方程化为：&amp;y\\frac{dp}{dy}p+2p^2=0\\\\<br>分离变量得：&amp;\\frac{dp}{p}=-2\\frac{dy}{y}\\\\<br>两侧积分得：&amp;ln|p|=ln\\frac{1}{y^2}+C_1\\\\<br>即：&amp;p=\\frac{C_0}{y^2}=y’=\\frac{dy}{dx}\\\\<br>分离变量得：&amp;y^2dy=C_0dx\\\\<br>两侧积分得：&amp;y^3=C_1x+C_2<br>\\end{split}$$</p>\n</blockquote>\n<h3 id=\"常系数齐次线性微分方程\"><a href=\"#常系数齐次线性微分方程\" class=\"headerlink\" title=\"常系数齐次线性微分方程\"></a>常系数齐次线性微分方程</h3><h4 id=\"二阶\"><a href=\"#二阶\" class=\"headerlink\" title=\"二阶\"></a>二阶</h4><p>令$y’’+py’+qy=0\\Rightarrow 特征方程：r^2+pr+q=0，考虑其解的情况：$</p>\n<table>\n<thead>\n<tr>\n<th>特征方程的解</th>\n<th>通解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$r_1\\neq r_2∈R$</td>\n<td>$y=C_1e^{r_1x}+C_2e^{r_2x}$</td>\n</tr>\n<tr>\n<td>$r_1=r_2=r∈R$</td>\n<td>$y=C_1e^{rx}+C_2xe^{rx}$</td>\n</tr>\n<tr>\n<td>$r_1=α+iβ，r_2=α-iβ$</td>\n<td>$y=C_1e^{αx}cosβx+C_2e^{αx}sinβx$</td>\n</tr>\n</tbody></table>\n<h4 id=\"高阶\"><a href=\"#高阶\" class=\"headerlink\" title=\"高阶\"></a>高阶</h4><p>第$i$重根就乘$x^i$</p>\n<table>\n<thead>\n<tr>\n<th>特征方程的解</th>\n<th>通解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$r_1=-1，r_2=r_3=i，r_4=r_5=-i$</td>\n<td>$y=C_1e^{-x}+C_2cosx+C_3sinx+C_4xcosx+C_5xsinx$</td>\n</tr>\n<tr>\n<td>$r_1=r_2=r_3=r$</td>\n<td>$y=C_1e^{rx}+C_2xe^{rx}+C_3x^2e^{rx}$</td>\n</tr>\n</tbody></table>\n<h3 id=\"常系数非齐次线性微分方程\"><a href=\"#常系数非齐次线性微分方程\" class=\"headerlink\" title=\"常系数非齐次线性微分方程\"></a>常系数非齐次线性微分方程</h3><p>$y’’+py’+qy=P_m(x)e^{λx}\\Rightarrow 特解y^*=x^kQ_m(x)e^{λx}（k：λ是特征方程的k重根）$</p>\n<p>一般做法：</p>\n<ul>\n<li>先令$y’’+py’+qy=0$，求其特征方程的根</li>\n<li>右侧化为$P_m(x)e^{λx}$（有$sinx或cosx时λ$设为复数），得到$λ$是$k$重根</li>\n<li>设出特解$y^*=x^kQ_m(x)e^{λx}（有sinx或cosx时为\\overline{y}）$</li>\n<li>$y^*代入y$解出$Q_m(x)$的系数，得到特解（有$cosx时为\\overline{y}$的实部；有$sinx时为\\overline{y}$的虚部）</li>\n</ul>\n"},{"title":"CTF List and JarvisOJ:stheasy","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-26T12:55:22.000Z","password":null,"summary":"2020-11-27下午CTF课上的小实验","_content":"\n## 简介\n\n2020-11-27下午CTF课上的小实验\n\n### 实验内容\n\n- 数据结构：将两个升序链表合并为一个新的升序链表\n- 逆向：JarvisOJ:stheasy\n\n## 数据结构：将两个升序链表合并为一个新的升序链表\n\n### 什么是链表\n\n{% post_link CTF-Tictactoe-Game-CE-Hacking 参见我的上一篇文章 %}\n\n#### 链表结构\n\n- 一个节点有且仅有两个属性：它存储的值，它的下一个节点（还可以有它的上一个节点，但在本题没必要）\n\n#### 链表的功能\n\n结构决定功能\n- 提供高效（O(1)）的任意位置插入与删除（显然，执行这两个操作时只需要简单的改变上/下一个结点指向的位置）\n- 遍历访问而不可随机访问（对于任意的n，你无法直接确定第n个节点到底是哪一个，除非从头开始遍历）\n\n### 源代码\n\n[Leetcode题目](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n```c\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct ListNode {\n  int32_t val;            // 当前节点的值\n  struct ListNode *next;  // 当前节点的下一个节点\n};\n\n// 创建一个有且仅有一个节点的链表\nstruct ListNode *NewListNode(int32_t val) {\n  struct ListNode *node = calloc(1, sizeof(struct ListNode));\n  node->val = val;\n  node->next = NULL;\n  return node;\n}\n\n// 在链表中插入一个新节点，返回新节点的地址\nstruct ListNode *InsetrtListNode(int32_t val, struct ListNode *after) {\n  if (after == NULL) return NULL;  // Unexpected\n  struct ListNode *node = NewListNode(val);\n  node->next = after->next;\n  after->next = node;\n  return node;\n}\n\n// 释放链表占用的内存\nvoid FreeList(struct ListNode *head) {\n  for (struct ListNode *next; head != NULL; head = next) {\n    next = head->next;\n    free(head);\n  }\n}\n\n// 从stdin读取一个链表\nstruct ListNode *ReadList() {\n  struct ListNode *head = NULL, *tail = head;\n  int32_t val;\n\n  do {\n    scanf(\"%d\", &val);                    // 输入一个整数\n    if (tail == NULL) {                   // 还没有链表\n      tail = head = NewListNode(val);     // 创建一个链表\n    } else {                              // 有链表了\n      tail = InsetrtListNode(val, tail);  // 插入到尾部之后\n    }\n  } while (getchar() != '\\n' && getchar() != '\\n');\n  // 读取两个字符来忽略掉\"->\"\n  // 当读取到换行符（\"\\n\"(AKA: LF)或\"\\r\\n\"(AKA: LRLF)）时，一个链表结束\n  return head;\n}\n\nvoid PrintList(struct ListNode *head) {\n  if (head == NULL) return;\n  printf(\"%d\", head->val);\n  for (head = head->next; head != NULL; head = head->next) printf(\"->%d\", head->val);\n  printf(\"\\n\");\n}\n\n// 合并两个已排序的链表\nstruct ListNode *Merge(struct ListNode *a, struct ListNode *b) {\n  // 直接创建一个链表方便操作，此时链表头是无用的0\n  struct ListNode *head = NewListNode(0), *tail = head;\n\n  while (a != NULL || b != NULL) {\n    // 当b为空时，从a取值；当a为空时，从b取值；两个都非空时，取值较小者\n    if (b == NULL || a != NULL && a->val < b->val) {\n      tail = InsetrtListNode(a->val, tail);\n      a = a->next;\n    } else {\n      tail = InsetrtListNode(b->val, tail);\n      b = b->next;\n    }\n  }\n\n  tail = head->next;  // 删掉刚刚无用的链表头\n  free(head);\n  return tail;\n}\n\nint main() {\n  struct ListNode *a = ReadList();\n  struct ListNode *b = ReadList();\n  struct ListNode *res = Merge(a, b);\n\n  PrintList(res);\n\n  FreeList(a);\n  FreeList(b);\n  FreeList(res);\n\n  return 0;\n}\n\n```\n\n### Python对比\n\n```python\n# 抽象内存，有效位置从1开始\nMemory = [\"Invalid\"]\n\n\n# C中的 node->val，node->next，就表示为 Memory[node][0]，Memory[node][1]\n# 使用一个三元素的列表来表示链表节点\n# 列表[0]：节点的值\n# 列表[1]：为下一个节点在Memory的位置\ndef NewListNode(val):           # 创建一个链表节点\n    address = len(Memory)       # 内存中的位置，即C中的指针值\n    Memory.append([val, 0])     # 内存中加入一个新的列表节点\n    return address\n\n\n# val：节点的值\n# after：另外一个节点在Memory的位置（0为无效位置）（即指针）\ndef InsertListNode(val, after):\n    if after == 0:      # 无效位置\n        return 0\n    new_node_address = NewListNode(val)                 # struct ListNode *node = NewListNode(val);\n\n    Memory[new_node_address][1] = Memory[after][1]      # node->next = after->next;\n    Memory[after][1] = new_node_address                 # after->next = node;\n    return new_node_address\n\n\ndef FreeList(head):\n    while head != 0:\n        next = Memory[head][1]\n        Memory[head] = []\n        head = next\n\n\ndef ReadList():\n    head = tail = None\n    while True:\n        val = input()           # 输入一个整数\n        if (val == \"End\"):      # 输入End结束输入\n            break\n        if (tail == None):\n            tail = head = NewListNode(int(val))\n        else:\n            tail = InsertListNode(int(val), tail)\n    return head\n\n\ndef PrintList(head):\n    print(Memory[head][0], end=\"\")\n    head = Memory[head][1]\n\n    while head != 0:\n        print(\"->\", end=str(Memory[head][0]))\n        head = Memory[head][1]\n    print(\"\")\n\n\ndef Merge(a, b):\n    head = tail = NewListNode(0)    # 一个无用的0节点，简化代码\n\n    while (a != 0 or b != 0):       # a = 0 代表着 a列表的结尾\n        if b == 0 or a != 0 and Memory[a][0] < Memory[b][0]:\n            tail = InsertListNode(Memory[a][0], tail)\n            a = Memory[a][1]\n        else:\n            tail = InsertListNode(Memory[b][0], tail)\n            b = Memory[b][1]\n\n    tail = Memory[head][1]          # 删掉无用的0节点\n    Memory[head] = []               # free(head)\n    return tail\n\n\ndef main():\n    a = ReadList()\n    b = ReadList()\n    res = Merge(a, b)\n\n    PrintList(res)\n\n    FreeList(a)\n    FreeList(b)\n    FreeList(res)\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n","source":"_posts/CTF-List-and-JarvisOJ-stheasy.md","raw":"---\ntitle: 'CTF List and JarvisOJ:stheasy'\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-26 20:55:22\npassword:\nsummary: 2020-11-27下午CTF课上的小实验\ntags:\n- CTF\n- 二进制\n- 实验\ncategories:\n- 二进制\n---\n\n## 简介\n\n2020-11-27下午CTF课上的小实验\n\n### 实验内容\n\n- 数据结构：将两个升序链表合并为一个新的升序链表\n- 逆向：JarvisOJ:stheasy\n\n## 数据结构：将两个升序链表合并为一个新的升序链表\n\n### 什么是链表\n\n{% post_link CTF-Tictactoe-Game-CE-Hacking 参见我的上一篇文章 %}\n\n#### 链表结构\n\n- 一个节点有且仅有两个属性：它存储的值，它的下一个节点（还可以有它的上一个节点，但在本题没必要）\n\n#### 链表的功能\n\n结构决定功能\n- 提供高效（O(1)）的任意位置插入与删除（显然，执行这两个操作时只需要简单的改变上/下一个结点指向的位置）\n- 遍历访问而不可随机访问（对于任意的n，你无法直接确定第n个节点到底是哪一个，除非从头开始遍历）\n\n### 源代码\n\n[Leetcode题目](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n```c\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct ListNode {\n  int32_t val;            // 当前节点的值\n  struct ListNode *next;  // 当前节点的下一个节点\n};\n\n// 创建一个有且仅有一个节点的链表\nstruct ListNode *NewListNode(int32_t val) {\n  struct ListNode *node = calloc(1, sizeof(struct ListNode));\n  node->val = val;\n  node->next = NULL;\n  return node;\n}\n\n// 在链表中插入一个新节点，返回新节点的地址\nstruct ListNode *InsetrtListNode(int32_t val, struct ListNode *after) {\n  if (after == NULL) return NULL;  // Unexpected\n  struct ListNode *node = NewListNode(val);\n  node->next = after->next;\n  after->next = node;\n  return node;\n}\n\n// 释放链表占用的内存\nvoid FreeList(struct ListNode *head) {\n  for (struct ListNode *next; head != NULL; head = next) {\n    next = head->next;\n    free(head);\n  }\n}\n\n// 从stdin读取一个链表\nstruct ListNode *ReadList() {\n  struct ListNode *head = NULL, *tail = head;\n  int32_t val;\n\n  do {\n    scanf(\"%d\", &val);                    // 输入一个整数\n    if (tail == NULL) {                   // 还没有链表\n      tail = head = NewListNode(val);     // 创建一个链表\n    } else {                              // 有链表了\n      tail = InsetrtListNode(val, tail);  // 插入到尾部之后\n    }\n  } while (getchar() != '\\n' && getchar() != '\\n');\n  // 读取两个字符来忽略掉\"->\"\n  // 当读取到换行符（\"\\n\"(AKA: LF)或\"\\r\\n\"(AKA: LRLF)）时，一个链表结束\n  return head;\n}\n\nvoid PrintList(struct ListNode *head) {\n  if (head == NULL) return;\n  printf(\"%d\", head->val);\n  for (head = head->next; head != NULL; head = head->next) printf(\"->%d\", head->val);\n  printf(\"\\n\");\n}\n\n// 合并两个已排序的链表\nstruct ListNode *Merge(struct ListNode *a, struct ListNode *b) {\n  // 直接创建一个链表方便操作，此时链表头是无用的0\n  struct ListNode *head = NewListNode(0), *tail = head;\n\n  while (a != NULL || b != NULL) {\n    // 当b为空时，从a取值；当a为空时，从b取值；两个都非空时，取值较小者\n    if (b == NULL || a != NULL && a->val < b->val) {\n      tail = InsetrtListNode(a->val, tail);\n      a = a->next;\n    } else {\n      tail = InsetrtListNode(b->val, tail);\n      b = b->next;\n    }\n  }\n\n  tail = head->next;  // 删掉刚刚无用的链表头\n  free(head);\n  return tail;\n}\n\nint main() {\n  struct ListNode *a = ReadList();\n  struct ListNode *b = ReadList();\n  struct ListNode *res = Merge(a, b);\n\n  PrintList(res);\n\n  FreeList(a);\n  FreeList(b);\n  FreeList(res);\n\n  return 0;\n}\n\n```\n\n### Python对比\n\n```python\n# 抽象内存，有效位置从1开始\nMemory = [\"Invalid\"]\n\n\n# C中的 node->val，node->next，就表示为 Memory[node][0]，Memory[node][1]\n# 使用一个三元素的列表来表示链表节点\n# 列表[0]：节点的值\n# 列表[1]：为下一个节点在Memory的位置\ndef NewListNode(val):           # 创建一个链表节点\n    address = len(Memory)       # 内存中的位置，即C中的指针值\n    Memory.append([val, 0])     # 内存中加入一个新的列表节点\n    return address\n\n\n# val：节点的值\n# after：另外一个节点在Memory的位置（0为无效位置）（即指针）\ndef InsertListNode(val, after):\n    if after == 0:      # 无效位置\n        return 0\n    new_node_address = NewListNode(val)                 # struct ListNode *node = NewListNode(val);\n\n    Memory[new_node_address][1] = Memory[after][1]      # node->next = after->next;\n    Memory[after][1] = new_node_address                 # after->next = node;\n    return new_node_address\n\n\ndef FreeList(head):\n    while head != 0:\n        next = Memory[head][1]\n        Memory[head] = []\n        head = next\n\n\ndef ReadList():\n    head = tail = None\n    while True:\n        val = input()           # 输入一个整数\n        if (val == \"End\"):      # 输入End结束输入\n            break\n        if (tail == None):\n            tail = head = NewListNode(int(val))\n        else:\n            tail = InsertListNode(int(val), tail)\n    return head\n\n\ndef PrintList(head):\n    print(Memory[head][0], end=\"\")\n    head = Memory[head][1]\n\n    while head != 0:\n        print(\"->\", end=str(Memory[head][0]))\n        head = Memory[head][1]\n    print(\"\")\n\n\ndef Merge(a, b):\n    head = tail = NewListNode(0)    # 一个无用的0节点，简化代码\n\n    while (a != 0 or b != 0):       # a = 0 代表着 a列表的结尾\n        if b == 0 or a != 0 and Memory[a][0] < Memory[b][0]:\n            tail = InsertListNode(Memory[a][0], tail)\n            a = Memory[a][1]\n        else:\n            tail = InsertListNode(Memory[b][0], tail)\n            b = Memory[b][1]\n\n    tail = Memory[head][1]          # 删掉无用的0节点\n    Memory[head] = []               # free(head)\n    return tail\n\n\ndef main():\n    a = ReadList()\n    b = ReadList()\n    res = Merge(a, b)\n\n    PrintList(res)\n\n    FreeList(a)\n    FreeList(b)\n    FreeList(res)\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n","slug":"CTF-List-and-JarvisOJ-stheasy","published":1,"updated":"2021-04-25T07:11:17.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuoui0009zcl0e4aa9bfh","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>2020-11-27下午CTF课上的小实验</p>\n<h3 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h3><ul>\n<li>数据结构：将两个升序链表合并为一个新的升序链表</li>\n<li>逆向：JarvisOJ:stheasy</li>\n</ul>\n<h2 id=\"数据结构：将两个升序链表合并为一个新的升序链表\"><a href=\"#数据结构：将两个升序链表合并为一个新的升序链表\" class=\"headerlink\" title=\"数据结构：将两个升序链表合并为一个新的升序链表\"></a>数据结构：将两个升序链表合并为一个新的升序链表</h2><h3 id=\"什么是链表\"><a href=\"#什么是链表\" class=\"headerlink\" title=\"什么是链表\"></a>什么是链表</h3><a href=\"/ctf-tictactoe-game-ce-hacking/\" title=\"参见我的上一篇文章\">参见我的上一篇文章</a>\n\n<h4 id=\"链表结构\"><a href=\"#链表结构\" class=\"headerlink\" title=\"链表结构\"></a>链表结构</h4><ul>\n<li>一个节点有且仅有两个属性：它存储的值，它的下一个节点（还可以有它的上一个节点，但在本题没必要）</li>\n</ul>\n<h4 id=\"链表的功能\"><a href=\"#链表的功能\" class=\"headerlink\" title=\"链表的功能\"></a>链表的功能</h4><p>结构决定功能</p>\n<ul>\n<li>提供高效（O(1)）的任意位置插入与删除（显然，执行这两个操作时只需要简单的改变上/下一个结点指向的位置）</li>\n<li>遍历访问而不可随机访问（对于任意的n，你无法直接确定第n个节点到底是哪一个，除非从头开始遍历）</li>\n</ul>\n<h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><p><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">Leetcode题目</a></p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">struct</span> ListNode <span class=\"token punctuation\">{</span>\n  int32_t val<span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">// 当前节点的值</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 当前节点的下一个节点</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 创建一个有且仅有一个节点的链表</span>\n<span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span><span class=\"token function\">NewListNode</span><span class=\"token punctuation\">(</span>int32_t val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ListNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 在链表中插入一个新节点，返回新节点的地址</span>\n<span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span><span class=\"token function\">InsetrtListNode</span><span class=\"token punctuation\">(</span>int32_t val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>after<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>after <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Unexpected</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">NewListNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> after<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  after<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 释放链表占用的内存</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">FreeList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> head <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 从stdin读取一个链表</span>\n<span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span><span class=\"token function\">ReadList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  int32_t val<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">// 输入一个整数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\" spellcheck=\"true\">// 还没有链表</span>\n      tail <span class=\"token operator\">=</span> head <span class=\"token operator\">=</span> <span class=\"token function\">NewListNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// 创建一个链表</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>                              <span class=\"token comment\" spellcheck=\"true\">// 有链表了</span>\n      tail <span class=\"token operator\">=</span> <span class=\"token function\">InsetrtListNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 插入到尾部之后</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 读取两个字符来忽略掉\"->\"</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 当读取到换行符（\"\\n\"(AKA: LF)或\"\\r\\n\"(AKA: LRLF)）时，一个链表结束</span>\n  <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> head<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->%d\"</span><span class=\"token punctuation\">,</span> head<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 合并两个已排序的链表</span>\n<span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 直接创建一个链表方便操作，此时链表头是无用的0</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token function\">NewListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 当b为空时，从a取值；当a为空时，从b取值；两个都非空时，取值较小者</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> a <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;</span> b<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tail <span class=\"token operator\">=</span> <span class=\"token function\">InsetrtListNode</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-></span>val<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      a <span class=\"token operator\">=</span> a<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      tail <span class=\"token operator\">=</span> <span class=\"token function\">InsetrtListNode</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>val<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      b <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  tail <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 删掉刚刚无用的链表头</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> tail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">ReadList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">ReadList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> ListNode <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">FreeList</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">FreeList</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">FreeList</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Python对比\"><a href=\"#Python对比\" class=\"headerlink\" title=\"Python对比\"></a>Python对比</h3><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 抽象内存，有效位置从1开始</span>\nMemory <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Invalid\"</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\"># C中的 node->val，node->next，就表示为 Memory[node][0]，Memory[node][1]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 使用一个三元素的列表来表示链表节点</span>\n<span class=\"token comment\" spellcheck=\"true\"># 列表[0]：节点的值</span>\n<span class=\"token comment\" spellcheck=\"true\"># 列表[1]：为下一个节点在Memory的位置</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">NewListNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\" spellcheck=\"true\"># 创建一个链表节点</span>\n    address <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\"># 内存中的位置，即C中的指针值</span>\n    Memory<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 内存中加入一个新的列表节点</span>\n    <span class=\"token keyword\">return</span> address\n\n\n<span class=\"token comment\" spellcheck=\"true\"># val：节点的值</span>\n<span class=\"token comment\" spellcheck=\"true\"># after：另外一个节点在Memory的位置（0为无效位置）（即指针）</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">InsertListNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> after <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\" spellcheck=\"true\"># 无效位置</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    new_node_address <span class=\"token operator\">=</span> NewListNode<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>                 <span class=\"token comment\" spellcheck=\"true\"># struct ListNode *node = NewListNode(val);</span>\n\n    Memory<span class=\"token punctuation\">[</span>new_node_address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>after<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\" spellcheck=\"true\"># node->next = after->next;</span>\n    Memory<span class=\"token punctuation\">[</span>after<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_node_address                 <span class=\"token comment\" spellcheck=\"true\"># after->next = node;</span>\n    <span class=\"token keyword\">return</span> new_node_address\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">FreeList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> head <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        next <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        head <span class=\"token operator\">=</span> next\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ReadList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> None\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        val <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\" spellcheck=\"true\"># 输入一个整数</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">==</span> <span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\" spellcheck=\"true\"># 输入End结束输入</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tail <span class=\"token operator\">=</span> head <span class=\"token operator\">=</span> NewListNode<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            tail <span class=\"token operator\">=</span> InsertListNode<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> head\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    head <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> head <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span>str<span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        head <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> NewListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 一个无用的0节点，简化代码</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\" spellcheck=\"true\"># a = 0 代表着 a列表的结尾</span>\n        <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> a <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> Memory<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> Memory<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            tail <span class=\"token operator\">=</span> InsertListNode<span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n            a <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            tail <span class=\"token operator\">=</span> InsertListNode<span class=\"token punctuation\">(</span>Memory<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span>\n            b <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    tail <span class=\"token operator\">=</span> Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>          <span class=\"token comment\" spellcheck=\"true\"># 删掉无用的0节点</span>\n    Memory<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>               <span class=\"token comment\" spellcheck=\"true\"># free(head)</span>\n    <span class=\"token keyword\">return</span> tail\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> ReadList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> ReadList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> Merge<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n    PrintList<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n\n    FreeList<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    FreeList<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n    FreeList<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>2020-11-27下午CTF课上的小实验</p>\n<h3 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h3><ul>\n<li>数据结构：将两个升序链表合并为一个新的升序链表</li>\n<li>逆向：JarvisOJ:stheasy</li>\n</ul>\n<h2 id=\"数据结构：将两个升序链表合并为一个新的升序链表\"><a href=\"#数据结构：将两个升序链表合并为一个新的升序链表\" class=\"headerlink\" title=\"数据结构：将两个升序链表合并为一个新的升序链表\"></a>数据结构：将两个升序链表合并为一个新的升序链表</h2><h3 id=\"什么是链表\"><a href=\"#什么是链表\" class=\"headerlink\" title=\"什么是链表\"></a>什么是链表</h3><a href=\"/ctf-tictactoe-game-ce-hacking/\" title=\"参见我的上一篇文章\">参见我的上一篇文章</a>\n\n<h4 id=\"链表结构\"><a href=\"#链表结构\" class=\"headerlink\" title=\"链表结构\"></a>链表结构</h4><ul>\n<li>一个节点有且仅有两个属性：它存储的值，它的下一个节点（还可以有它的上一个节点，但在本题没必要）</li>\n</ul>\n<h4 id=\"链表的功能\"><a href=\"#链表的功能\" class=\"headerlink\" title=\"链表的功能\"></a>链表的功能</h4><p>结构决定功能</p>\n<ul>\n<li>提供高效（O(1)）的任意位置插入与删除（显然，执行这两个操作时只需要简单的改变上/下一个结点指向的位置）</li>\n<li>遍历访问而不可随机访问（对于任意的n，你无法直接确定第n个节点到底是哪一个，除非从头开始遍历）</li>\n</ul>\n<h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><p><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">Leetcode题目</a></p>\n<pre><code class=\"c\">#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct ListNode {\n  int32_t val;            // 当前节点的值\n  struct ListNode *next;  // 当前节点的下一个节点\n};\n\n// 创建一个有且仅有一个节点的链表\nstruct ListNode *NewListNode(int32_t val) {\n  struct ListNode *node = calloc(1, sizeof(struct ListNode));\n  node-&gt;val = val;\n  node-&gt;next = NULL;\n  return node;\n}\n\n// 在链表中插入一个新节点，返回新节点的地址\nstruct ListNode *InsetrtListNode(int32_t val, struct ListNode *after) {\n  if (after == NULL) return NULL;  // Unexpected\n  struct ListNode *node = NewListNode(val);\n  node-&gt;next = after-&gt;next;\n  after-&gt;next = node;\n  return node;\n}\n\n// 释放链表占用的内存\nvoid FreeList(struct ListNode *head) {\n  for (struct ListNode *next; head != NULL; head = next) {\n    next = head-&gt;next;\n    free(head);\n  }\n}\n\n// 从stdin读取一个链表\nstruct ListNode *ReadList() {\n  struct ListNode *head = NULL, *tail = head;\n  int32_t val;\n\n  do {\n    scanf(&quot;%d&quot;, &amp;val);                    // 输入一个整数\n    if (tail == NULL) {                   // 还没有链表\n      tail = head = NewListNode(val);     // 创建一个链表\n    } else {                              // 有链表了\n      tail = InsetrtListNode(val, tail);  // 插入到尾部之后\n    }\n  } while (getchar() != &#39;\\n&#39; &amp;&amp; getchar() != &#39;\\n&#39;);\n  // 读取两个字符来忽略掉&quot;-&gt;&quot;\n  // 当读取到换行符（&quot;\\n&quot;(AKA: LF)或&quot;\\r\\n&quot;(AKA: LRLF)）时，一个链表结束\n  return head;\n}\n\nvoid PrintList(struct ListNode *head) {\n  if (head == NULL) return;\n  printf(&quot;%d&quot;, head-&gt;val);\n  for (head = head-&gt;next; head != NULL; head = head-&gt;next) printf(&quot;-&gt;%d&quot;, head-&gt;val);\n  printf(&quot;\\n&quot;);\n}\n\n// 合并两个已排序的链表\nstruct ListNode *Merge(struct ListNode *a, struct ListNode *b) {\n  // 直接创建一个链表方便操作，此时链表头是无用的0\n  struct ListNode *head = NewListNode(0), *tail = head;\n\n  while (a != NULL || b != NULL) {\n    // 当b为空时，从a取值；当a为空时，从b取值；两个都非空时，取值较小者\n    if (b == NULL || a != NULL &amp;&amp; a-&gt;val &lt; b-&gt;val) {\n      tail = InsetrtListNode(a-&gt;val, tail);\n      a = a-&gt;next;\n    } else {\n      tail = InsetrtListNode(b-&gt;val, tail);\n      b = b-&gt;next;\n    }\n  }\n\n  tail = head-&gt;next;  // 删掉刚刚无用的链表头\n  free(head);\n  return tail;\n}\n\nint main() {\n  struct ListNode *a = ReadList();\n  struct ListNode *b = ReadList();\n  struct ListNode *res = Merge(a, b);\n\n  PrintList(res);\n\n  FreeList(a);\n  FreeList(b);\n  FreeList(res);\n\n  return 0;\n}\n</code></pre>\n<h3 id=\"Python对比\"><a href=\"#Python对比\" class=\"headerlink\" title=\"Python对比\"></a>Python对比</h3><pre><code class=\"python\"># 抽象内存，有效位置从1开始\nMemory = [&quot;Invalid&quot;]\n\n\n# C中的 node-&gt;val，node-&gt;next，就表示为 Memory[node][0]，Memory[node][1]\n# 使用一个三元素的列表来表示链表节点\n# 列表[0]：节点的值\n# 列表[1]：为下一个节点在Memory的位置\ndef NewListNode(val):           # 创建一个链表节点\n    address = len(Memory)       # 内存中的位置，即C中的指针值\n    Memory.append([val, 0])     # 内存中加入一个新的列表节点\n    return address\n\n\n# val：节点的值\n# after：另外一个节点在Memory的位置（0为无效位置）（即指针）\ndef InsertListNode(val, after):\n    if after == 0:      # 无效位置\n        return 0\n    new_node_address = NewListNode(val)                 # struct ListNode *node = NewListNode(val);\n\n    Memory[new_node_address][1] = Memory[after][1]      # node-&gt;next = after-&gt;next;\n    Memory[after][1] = new_node_address                 # after-&gt;next = node;\n    return new_node_address\n\n\ndef FreeList(head):\n    while head != 0:\n        next = Memory[head][1]\n        Memory[head] = []\n        head = next\n\n\ndef ReadList():\n    head = tail = None\n    while True:\n        val = input()           # 输入一个整数\n        if (val == &quot;End&quot;):      # 输入End结束输入\n            break\n        if (tail == None):\n            tail = head = NewListNode(int(val))\n        else:\n            tail = InsertListNode(int(val), tail)\n    return head\n\n\ndef PrintList(head):\n    print(Memory[head][0], end=&quot;&quot;)\n    head = Memory[head][1]\n\n    while head != 0:\n        print(&quot;-&gt;&quot;, end=str(Memory[head][0]))\n        head = Memory[head][1]\n    print(&quot;&quot;)\n\n\ndef Merge(a, b):\n    head = tail = NewListNode(0)    # 一个无用的0节点，简化代码\n\n    while (a != 0 or b != 0):       # a = 0 代表着 a列表的结尾\n        if b == 0 or a != 0 and Memory[a][0] &lt; Memory[b][0]:\n            tail = InsertListNode(Memory[a][0], tail)\n            a = Memory[a][1]\n        else:\n            tail = InsertListNode(Memory[b][0], tail)\n            b = Memory[b][1]\n\n    tail = Memory[head][1]          # 删掉无用的0节点\n    Memory[head] = []               # free(head)\n    return tail\n\n\ndef main():\n    a = ReadList()\n    b = ReadList()\n    res = Merge(a, b)\n\n    PrintList(res)\n\n    FreeList(a)\n    FreeList(b)\n    FreeList(res)\n    return 0\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n"},{"title":"CTF Tictactoe Game CE Hacking","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-23T06:26:01.000Z","password":null,"summary":"2020-11-20下午CTF课上的小实验","_content":"\n## 简介\n\n2020-11-20下午CTF课上的小实验\n\n### 实验内容\n\n- **C语言数组及其在内存中的结构**\n- 开发一个井字棋游戏\n- 用CE进行破解\n\n## C语言的数组\n\n### 数组和链表\n\n> 高三时同学们统一购买了一本必背64篇的小本本，而转学来的李四书上的顺序与同学们不同。\n> 为了跟同学们同步，ta想出了个好办法：**在每篇古文上，记下它在同学们书上的上下篇，对应到李四书上的页码**。\n> 如：生于忧患，死于安乐   上一篇P23，下一篇P233\n> 所以，当同学们从一篇**翻页**到下一篇时，李四**通过\"下一篇\"的页码来定位**。\n> 1. 李四很快就发现，当他**定位到“下一篇时”，同学们都念完第一段了**\n> 2. 某天学渣张三被抓去念早读\n>    张三：**“同学们，翻开第20篇”**\n>    李四：**啪一下就站起来了**\n\n**同学们的书就是数组，李四的书就是链表**\n\n| | 数组 | 链表 |\n|-|-|-|\n| 存储方式 | 连续 | 离散，通过寻址的方式链接 |\n| 随机访问速度 | **极快** | 很慢 |\n| 遍历速度 | **极快** | 快 |\n| 可变性 | 仅支持改 | **任意位置增删改** |\n\n所以数组有什么用？\n- 数组是在内存中**整块**存储的**运行时大小不可变**的数据结构\n- 因为这个特性，数组是**访问速度最快的数据结构**\n- 事实上，李四的**链表**还是基于**数组**的。众多的数据结构都能使用数组来实现。\n\n### 指针与数组\n\n- **数组是内存中的一小块，而指针用于描述内存中的一个点**\n- 因此，数组用于存储，指针主要用于访问\n- 描述C的数组，只需要一个指针表示起始地址，一个整数表示长度\n- 指针加法：偏移sizeof(指针类型)的量\n\nC语言数组取地址的小细节\n\n```c\n// Arrays in Memory\n#include <stdio.h>\nint main () {\n  char array_2d[3][3];      // 二维数组\n  printf(\"%x %x\\n\", array_2d, array_2d + 1);\n  printf(\"%x %x\\n\", &array_2d, &array_2d + 1);\n  return 0;\n}\n\n```\n\n输出：\n\n```bash\n$ gcc main.c -o main && ./main\n594af137 594af13a\n594af137 594af140\n```\n\n`array_2d, array_2d + 1`两个值相差3，说明数组名被转换为char[3]的指针（等价于&array_2d[0]）\n`&array_2d, &array_2d + 1`两个值相差9，说明数组名的取地址为char[3][3]的指针\n`array_2d`和`&array_2d`相等，而且都是第一个元素的地址\n\n### 数组在内存中\n\n```c\n// Arrays in Memory\n\n#include <stdio.h>\n\nvoid PrintMem(int *p, int len) {    // 输出一块长度为len的内存中的数据\n  while(len--) printf(\"%d \", *p++);\n  printf(\"\\n\");\n}\n\nint main () {\n  int array[9] = {11, 12, 13, 21, 22, 23, 31, 32, 33};    // 一维数组\n  int array_2d[3][3];                                     // 二维数组\n\n  // 按期望的二维数组在内存中的分布，将一维数组元素的值赋给二维数组\n  int index = 0;\n  for (int y = 0; y < 3; ++y)\n    for (int x = 0; x < 3; ++x) array_2d[y][x] = array[index++];\n\n  // 分别输出两个数组内存中的数据\n  PrintMem((int *)&array, 9);\n  PrintMem((int *)&array_2d, 9);\n\n  return 0;\n}\n\n```\n\n输出：\n\n```bash\n$ gcc main.c -o main && ./main\n11 12 13 21 22 23 31 32 33 \n11 12 13 21 22 23 31 32 33\n```\n\n**这块内存划重点**\n\n![一维数组](array.png)\n![二维数组](2D_array.png)\n\n## 开发一个井字棋游戏\n\n### 什么是井字棋\n\n| 因为 | 所以 |\n|-|-| \n| 一个3x3的平面游戏 | 用一个3x3的数组存储 |\n| 有两位玩家，XO两种棋子，同时还有未放置棋子的空白 | 数组类型为char |\n| 当3个棋子连成线时获胜 | 游戏获胜的逻辑判断 |\n| 当9个格子都被占用且没人获胜时平局 | 游戏平局的逻辑判断 |\n\n### 第一步：确定如何存储游戏的数据\n\n```c\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  // 危险代码\n  if (kMap[y][x] != ' ') return 0;          // 有棋子了\n  return kMap[y][x] = sign;                 // 放置棋子\n}\n\n```\n\n### 第二步：将数据输出到屏幕上\n\n```c\ninline void ClearScreen() {\n  // printf(\"\\033[2J\\033[0;0H\");  // On Linux\n  system(\"cls\");  // On Windows\n}\n\nvoid Draw() {\n  ClearScreen();\n  puts(\"Tictactoe\\n\");\n  for (int i = 0; i < 3; ++i) {\n    printf(\"%c|%c|%c\\n\", kMap[i][0], kMap[i][1], kMap[i][2]);\n    if (i != 2) printf(\"一一一\\n\");\n  }\n}\n\n```\n\n### 第三步：处理玩家控制\n\n```c\n  int cnt = 0, y, x;\n\n  while (cnt < 9) {       // 显然，有效输入不会超过9次\n    printf(\"\\nInput (Y X) to set %c: \", cnt & 1 ? 'X' : 'O'); // 奇数次为O，偶数次为X\n    scanf(\"%d %d\", &y, &x);\n    if (!Set(y - 1, x - 1, cnt & 1 ? 'X' : 'O')) {\n      puts(\"Unexpected input\");\n      continue;           // 无效输入\n    }\n\n    Draw();               // 每次输入完后输出画面\n    if (Check()) break;   // 判断游戏获胜\n    ++cnt;\n  }\n\n```\n\n### 第四步：判断游戏结束的条件\n\n```c\ninline bool Equal(char x, char y, char z) { // 方便判断3个字符\n  return x != ' ' && x == y && y == z;\n}\n\nbool Check() {\n  if (Equal(kMap[0][0], kMap[1][1], kMap[2][2])) return true;   // 左斜\n  if (Equal(kMap[2][0], kMap[1][1], kMap[0][2])) return true;   // 右斜\n\n  for (int i = 0; i < 3; ++i) {\n    if (Equal(kMap[i][0], kMap[i][1], kMap[i][2])) return true; // 行\n    if (Equal(kMap[0][i], kMap[1][i], kMap[2][i])) return true; // 列\n  }\n  return false;\n}\n\n// 在main函数中\n  if (cnt != 9) {                 // 获胜结束\n    printf(\"\\nPlayer %c Win!\\n\\n\", cnt & 1 ? 'X' : 'O');\n  } else {                        // 平局结束\n    puts(\"\\nDraw Game!\\n\");\n  }\n\n```\n\n### 数组越界\n\n```c\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  // 危险代码\n  if (kMap[y][x] != ' ') return 0;          // 有棋子了\n  return kMap[y][x] = sign;                 // 放置棋子\n}\n\n```\n\n这段代码中，当`x >= 3`时会发生什么？\n![二维数组](2D_array.png)\n输入1，6时，y=0，x=5，覆盖到图中a23的位置\n\n```\nTictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: 1 6\n```\n\n```\nTictactoe\n\n | | \n一一一\n | |O\n一一一\n | | \n\nInput (Y X) to set X: \n```\n\n如果输入-1000000 1呢？程序将会崩溃\n\n```\nTictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: -1000000 1  \n[1]    6357 segmentation fault  ./main\n```\n\n**所以要访问数组时要注意边界**\n\n```c\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  if (x < 0 || x >= 3 || y < 0 || y >= 3 || kMap[y][x] != ' ') return 0;  // 有棋子了\n  return kMap[y][x] = sign;                                               // 放置棋子\n}\n```\n\n\n### 完整代码\n\n```c\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  if (x < 0 || x >= 3 || y < 0 || y >= 3 || kMap[y][x] != ' ') return 0;  // 有棋子了\n  return kMap[y][x] = sign;                                               // 放置棋子\n}\n\ninline void ClearScreen() {\n  // printf(\"\\033[2J\\033[0;0H\");  // On Linux\n  system(\"cls\");  // On Windows\n}\n\nvoid Draw() {\n  ClearScreen();\n  puts(\"Tictactoe\\n\");\n  for (int i = 0; i < 3; ++i) {\n    printf(\"%c|%c|%c\\n\", kMap[i][0], kMap[i][1], kMap[i][2]);\n    if (i != 2) printf(\"-+-+-\\n\");\n  }\n}\n\ninline bool Equal(char x, char y, char z) { // 方便判断3个字符\n  return x != ' ' && x == y && y == z;\n}\n\nbool Check() {\n  if (Equal(kMap[0][0], kMap[1][1], kMap[2][2])) return true;   // 左斜\n  if (Equal(kMap[2][0], kMap[1][1], kMap[0][2])) return true;   // 右斜\n\n  for (int i = 0; i < 3; ++i) {\n    if (Equal(kMap[i][0], kMap[i][1], kMap[i][2])) return true; // 行\n    if (Equal(kMap[0][i], kMap[1][i], kMap[2][i])) return true; // 列\n  }\n  return false;\n}\n\nint main() {\n  memset(kMap, ' ', sizeof(kMap));\n  Draw();\n\n  int cnt = 0, y, x;\n\n  while (cnt < 9) {       // 显然，有效输入不会超过9次\n    printf(\"\\nInput (Y X) to set %c: \", cnt & 1 ? 'X' : 'O'); // 奇数次为O，偶数次为X\n    scanf(\"%d %d\", &y, &x);\n    if (!Set(y - 1, x - 1, cnt & 1 ? 'X' : 'O')) {\n      puts(\"Unexpected input\");\n      continue;           // 无效输入\n    }\n\n    Draw();               // 每次输入完后输出画面\n    if (Check()) break;   // 判断游戏获胜\n    ++cnt;\n  }\n\n  if (cnt != 9) {\n    printf(\"\\nPlayer %c Win!\\n\\n\", cnt & 1 ? 'X' : 'O');\n  } else {\n    puts(\"\\nDraw Game!\\n\");\n  }\n\n  system(\"pause\");  // On Windows\n  return 0;\n}\n```\n\n## 用CE进行破解\n\n学CE有什么用？在4399和单机游戏中当科学家。。。\n\n其实人家主要用来分析和修改内存。\n\n[下载CE](https://www.cheatengine.org/)\n\n### 破解过程\n\n![打开进程](ce_1.png)\n\n<br />\n\n![搜索数组](ce_2.png)\n\n起始时数组为9个空格\n\n输出字符对应的十六进制ASCII码（O：4f，X：58，空格：20）\n\n```bash\npython3 -c 'print(hex(ord(input())))'\n```\n\n<br />\n\n![缩小范围](ce_3.png)\n\n出现了一大堆数据，其中只有一个是我们想要的，可以通过改变它的值再次搜索\n\n在游戏中输入：1 1，然后返回CE操作\n\n![修改](ce_4.png)\n\n修改到达成胜利条件，之后在游戏中输入2 2\n\n![修改成功](ce_5.png)\n","source":"_posts/CTF-Tictactoe-Game-CE-Hacking.md","raw":"---\ntitle: CTF Tictactoe Game CE Hacking\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-23 14:26:01\npassword:\nsummary: 2020-11-20下午CTF课上的小实验\ntags:\n- CTF\n- 二进制\n- 实验\ncategories:\n- 二进制\n---\n\n## 简介\n\n2020-11-20下午CTF课上的小实验\n\n### 实验内容\n\n- **C语言数组及其在内存中的结构**\n- 开发一个井字棋游戏\n- 用CE进行破解\n\n## C语言的数组\n\n### 数组和链表\n\n> 高三时同学们统一购买了一本必背64篇的小本本，而转学来的李四书上的顺序与同学们不同。\n> 为了跟同学们同步，ta想出了个好办法：**在每篇古文上，记下它在同学们书上的上下篇，对应到李四书上的页码**。\n> 如：生于忧患，死于安乐   上一篇P23，下一篇P233\n> 所以，当同学们从一篇**翻页**到下一篇时，李四**通过\"下一篇\"的页码来定位**。\n> 1. 李四很快就发现，当他**定位到“下一篇时”，同学们都念完第一段了**\n> 2. 某天学渣张三被抓去念早读\n>    张三：**“同学们，翻开第20篇”**\n>    李四：**啪一下就站起来了**\n\n**同学们的书就是数组，李四的书就是链表**\n\n| | 数组 | 链表 |\n|-|-|-|\n| 存储方式 | 连续 | 离散，通过寻址的方式链接 |\n| 随机访问速度 | **极快** | 很慢 |\n| 遍历速度 | **极快** | 快 |\n| 可变性 | 仅支持改 | **任意位置增删改** |\n\n所以数组有什么用？\n- 数组是在内存中**整块**存储的**运行时大小不可变**的数据结构\n- 因为这个特性，数组是**访问速度最快的数据结构**\n- 事实上，李四的**链表**还是基于**数组**的。众多的数据结构都能使用数组来实现。\n\n### 指针与数组\n\n- **数组是内存中的一小块，而指针用于描述内存中的一个点**\n- 因此，数组用于存储，指针主要用于访问\n- 描述C的数组，只需要一个指针表示起始地址，一个整数表示长度\n- 指针加法：偏移sizeof(指针类型)的量\n\nC语言数组取地址的小细节\n\n```c\n// Arrays in Memory\n#include <stdio.h>\nint main () {\n  char array_2d[3][3];      // 二维数组\n  printf(\"%x %x\\n\", array_2d, array_2d + 1);\n  printf(\"%x %x\\n\", &array_2d, &array_2d + 1);\n  return 0;\n}\n\n```\n\n输出：\n\n```bash\n$ gcc main.c -o main && ./main\n594af137 594af13a\n594af137 594af140\n```\n\n`array_2d, array_2d + 1`两个值相差3，说明数组名被转换为char[3]的指针（等价于&array_2d[0]）\n`&array_2d, &array_2d + 1`两个值相差9，说明数组名的取地址为char[3][3]的指针\n`array_2d`和`&array_2d`相等，而且都是第一个元素的地址\n\n### 数组在内存中\n\n```c\n// Arrays in Memory\n\n#include <stdio.h>\n\nvoid PrintMem(int *p, int len) {    // 输出一块长度为len的内存中的数据\n  while(len--) printf(\"%d \", *p++);\n  printf(\"\\n\");\n}\n\nint main () {\n  int array[9] = {11, 12, 13, 21, 22, 23, 31, 32, 33};    // 一维数组\n  int array_2d[3][3];                                     // 二维数组\n\n  // 按期望的二维数组在内存中的分布，将一维数组元素的值赋给二维数组\n  int index = 0;\n  for (int y = 0; y < 3; ++y)\n    for (int x = 0; x < 3; ++x) array_2d[y][x] = array[index++];\n\n  // 分别输出两个数组内存中的数据\n  PrintMem((int *)&array, 9);\n  PrintMem((int *)&array_2d, 9);\n\n  return 0;\n}\n\n```\n\n输出：\n\n```bash\n$ gcc main.c -o main && ./main\n11 12 13 21 22 23 31 32 33 \n11 12 13 21 22 23 31 32 33\n```\n\n**这块内存划重点**\n\n![一维数组](array.png)\n![二维数组](2D_array.png)\n\n## 开发一个井字棋游戏\n\n### 什么是井字棋\n\n| 因为 | 所以 |\n|-|-| \n| 一个3x3的平面游戏 | 用一个3x3的数组存储 |\n| 有两位玩家，XO两种棋子，同时还有未放置棋子的空白 | 数组类型为char |\n| 当3个棋子连成线时获胜 | 游戏获胜的逻辑判断 |\n| 当9个格子都被占用且没人获胜时平局 | 游戏平局的逻辑判断 |\n\n### 第一步：确定如何存储游戏的数据\n\n```c\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  // 危险代码\n  if (kMap[y][x] != ' ') return 0;          // 有棋子了\n  return kMap[y][x] = sign;                 // 放置棋子\n}\n\n```\n\n### 第二步：将数据输出到屏幕上\n\n```c\ninline void ClearScreen() {\n  // printf(\"\\033[2J\\033[0;0H\");  // On Linux\n  system(\"cls\");  // On Windows\n}\n\nvoid Draw() {\n  ClearScreen();\n  puts(\"Tictactoe\\n\");\n  for (int i = 0; i < 3; ++i) {\n    printf(\"%c|%c|%c\\n\", kMap[i][0], kMap[i][1], kMap[i][2]);\n    if (i != 2) printf(\"一一一\\n\");\n  }\n}\n\n```\n\n### 第三步：处理玩家控制\n\n```c\n  int cnt = 0, y, x;\n\n  while (cnt < 9) {       // 显然，有效输入不会超过9次\n    printf(\"\\nInput (Y X) to set %c: \", cnt & 1 ? 'X' : 'O'); // 奇数次为O，偶数次为X\n    scanf(\"%d %d\", &y, &x);\n    if (!Set(y - 1, x - 1, cnt & 1 ? 'X' : 'O')) {\n      puts(\"Unexpected input\");\n      continue;           // 无效输入\n    }\n\n    Draw();               // 每次输入完后输出画面\n    if (Check()) break;   // 判断游戏获胜\n    ++cnt;\n  }\n\n```\n\n### 第四步：判断游戏结束的条件\n\n```c\ninline bool Equal(char x, char y, char z) { // 方便判断3个字符\n  return x != ' ' && x == y && y == z;\n}\n\nbool Check() {\n  if (Equal(kMap[0][0], kMap[1][1], kMap[2][2])) return true;   // 左斜\n  if (Equal(kMap[2][0], kMap[1][1], kMap[0][2])) return true;   // 右斜\n\n  for (int i = 0; i < 3; ++i) {\n    if (Equal(kMap[i][0], kMap[i][1], kMap[i][2])) return true; // 行\n    if (Equal(kMap[0][i], kMap[1][i], kMap[2][i])) return true; // 列\n  }\n  return false;\n}\n\n// 在main函数中\n  if (cnt != 9) {                 // 获胜结束\n    printf(\"\\nPlayer %c Win!\\n\\n\", cnt & 1 ? 'X' : 'O');\n  } else {                        // 平局结束\n    puts(\"\\nDraw Game!\\n\");\n  }\n\n```\n\n### 数组越界\n\n```c\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  // 危险代码\n  if (kMap[y][x] != ' ') return 0;          // 有棋子了\n  return kMap[y][x] = sign;                 // 放置棋子\n}\n\n```\n\n这段代码中，当`x >= 3`时会发生什么？\n![二维数组](2D_array.png)\n输入1，6时，y=0，x=5，覆盖到图中a23的位置\n\n```\nTictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: 1 6\n```\n\n```\nTictactoe\n\n | | \n一一一\n | |O\n一一一\n | | \n\nInput (Y X) to set X: \n```\n\n如果输入-1000000 1呢？程序将会崩溃\n\n```\nTictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: -1000000 1  \n[1]    6357 segmentation fault  ./main\n```\n\n**所以要访问数组时要注意边界**\n\n```c\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  if (x < 0 || x >= 3 || y < 0 || y >= 3 || kMap[y][x] != ' ') return 0;  // 有棋子了\n  return kMap[y][x] = sign;                                               // 放置棋子\n}\n```\n\n\n### 完整代码\n\n```c\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  if (x < 0 || x >= 3 || y < 0 || y >= 3 || kMap[y][x] != ' ') return 0;  // 有棋子了\n  return kMap[y][x] = sign;                                               // 放置棋子\n}\n\ninline void ClearScreen() {\n  // printf(\"\\033[2J\\033[0;0H\");  // On Linux\n  system(\"cls\");  // On Windows\n}\n\nvoid Draw() {\n  ClearScreen();\n  puts(\"Tictactoe\\n\");\n  for (int i = 0; i < 3; ++i) {\n    printf(\"%c|%c|%c\\n\", kMap[i][0], kMap[i][1], kMap[i][2]);\n    if (i != 2) printf(\"-+-+-\\n\");\n  }\n}\n\ninline bool Equal(char x, char y, char z) { // 方便判断3个字符\n  return x != ' ' && x == y && y == z;\n}\n\nbool Check() {\n  if (Equal(kMap[0][0], kMap[1][1], kMap[2][2])) return true;   // 左斜\n  if (Equal(kMap[2][0], kMap[1][1], kMap[0][2])) return true;   // 右斜\n\n  for (int i = 0; i < 3; ++i) {\n    if (Equal(kMap[i][0], kMap[i][1], kMap[i][2])) return true; // 行\n    if (Equal(kMap[0][i], kMap[1][i], kMap[2][i])) return true; // 列\n  }\n  return false;\n}\n\nint main() {\n  memset(kMap, ' ', sizeof(kMap));\n  Draw();\n\n  int cnt = 0, y, x;\n\n  while (cnt < 9) {       // 显然，有效输入不会超过9次\n    printf(\"\\nInput (Y X) to set %c: \", cnt & 1 ? 'X' : 'O'); // 奇数次为O，偶数次为X\n    scanf(\"%d %d\", &y, &x);\n    if (!Set(y - 1, x - 1, cnt & 1 ? 'X' : 'O')) {\n      puts(\"Unexpected input\");\n      continue;           // 无效输入\n    }\n\n    Draw();               // 每次输入完后输出画面\n    if (Check()) break;   // 判断游戏获胜\n    ++cnt;\n  }\n\n  if (cnt != 9) {\n    printf(\"\\nPlayer %c Win!\\n\\n\", cnt & 1 ? 'X' : 'O');\n  } else {\n    puts(\"\\nDraw Game!\\n\");\n  }\n\n  system(\"pause\");  // On Windows\n  return 0;\n}\n```\n\n## 用CE进行破解\n\n学CE有什么用？在4399和单机游戏中当科学家。。。\n\n其实人家主要用来分析和修改内存。\n\n[下载CE](https://www.cheatengine.org/)\n\n### 破解过程\n\n![打开进程](ce_1.png)\n\n<br />\n\n![搜索数组](ce_2.png)\n\n起始时数组为9个空格\n\n输出字符对应的十六进制ASCII码（O：4f，X：58，空格：20）\n\n```bash\npython3 -c 'print(hex(ord(input())))'\n```\n\n<br />\n\n![缩小范围](ce_3.png)\n\n出现了一大堆数据，其中只有一个是我们想要的，可以通过改变它的值再次搜索\n\n在游戏中输入：1 1，然后返回CE操作\n\n![修改](ce_4.png)\n\n修改到达成胜利条件，之后在游戏中输入2 2\n\n![修改成功](ce_5.png)\n","slug":"CTF-Tictactoe-Game-CE-Hacking","published":1,"updated":"2021-04-25T07:11:17.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuouj000azcl0r5ivccrc","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>2020-11-20下午CTF课上的小实验</p>\n<h3 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h3><ul>\n<li><strong>C语言数组及其在内存中的结构</strong></li>\n<li>开发一个井字棋游戏</li>\n<li>用CE进行破解</li>\n</ul>\n<h2 id=\"C语言的数组\"><a href=\"#C语言的数组\" class=\"headerlink\" title=\"C语言的数组\"></a>C语言的数组</h2><h3 id=\"数组和链表\"><a href=\"#数组和链表\" class=\"headerlink\" title=\"数组和链表\"></a>数组和链表</h3><blockquote>\n<p>高三时同学们统一购买了一本必背64篇的小本本，而转学来的李四书上的顺序与同学们不同。<br>为了跟同学们同步，ta想出了个好办法：<strong>在每篇古文上，记下它在同学们书上的上下篇，对应到李四书上的页码</strong>。<br>如：生于忧患，死于安乐   上一篇P23，下一篇P233<br>所以，当同学们从一篇<strong>翻页</strong>到下一篇时，李四<strong>通过”下一篇”的页码来定位</strong>。</p>\n<ol>\n<li>李四很快就发现，当他<strong>定位到“下一篇时”，同学们都念完第一段了</strong></li>\n<li>某天学渣张三被抓去念早读<br>张三：<strong>“同学们，翻开第20篇”</strong><br>李四：<strong>啪一下就站起来了</strong></li>\n</ol>\n</blockquote>\n<p><strong>同学们的书就是数组，李四的书就是链表</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储方式</td>\n<td>连续</td>\n<td>离散，通过寻址的方式链接</td>\n</tr>\n<tr>\n<td>随机访问速度</td>\n<td><strong>极快</strong></td>\n<td>很慢</td>\n</tr>\n<tr>\n<td>遍历速度</td>\n<td><strong>极快</strong></td>\n<td>快</td>\n</tr>\n<tr>\n<td>可变性</td>\n<td>仅支持改</td>\n<td><strong>任意位置增删改</strong></td>\n</tr>\n</tbody></table>\n<p>所以数组有什么用？</p>\n<ul>\n<li>数组是在内存中<strong>整块</strong>存储的<strong>运行时大小不可变</strong>的数据结构</li>\n<li>因为这个特性，数组是<strong>访问速度最快的数据结构</strong></li>\n<li>事实上，李四的<strong>链表</strong>还是基于<strong>数组</strong>的。众多的数据结构都能使用数组来实现。</li>\n</ul>\n<h3 id=\"指针与数组\"><a href=\"#指针与数组\" class=\"headerlink\" title=\"指针与数组\"></a>指针与数组</h3><ul>\n<li><strong>数组是内存中的一小块，而指针用于描述内存中的一个点</strong></li>\n<li>因此，数组用于存储，指针主要用于访问</li>\n<li>描述C的数组，只需要一个指针表示起始地址，一个整数表示长度</li>\n<li>指针加法：偏移sizeof(指针类型)的量</li>\n</ul>\n<p>C语言数组取地址的小细节</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">// Arrays in Memory</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> array_2d<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// 二维数组</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\\n\"</span><span class=\"token punctuation\">,</span> array_2d<span class=\"token punctuation\">,</span> array_2d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>array_2d<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>array_2d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ gcc main.c -o main <span class=\"token operator\">&amp;&amp;</span> ./main\n594af137 594af13a\n594af137 594af140<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>array_2d, array_2d + 1</code>两个值相差3，说明数组名被转换为char[3]的指针（等价于&amp;array_2d[0]）<br><code>&amp;array_2d, &amp;array_2d + 1</code>两个值相差9，说明数组名的取地址为char[3][3]的指针<br><code>array_2d</code>和<code>&amp;array_2d</code>相等，而且都是第一个元素的地址</p>\n<h3 id=\"数组在内存中\"><a href=\"#数组在内存中\" class=\"headerlink\" title=\"数组在内存中\"></a>数组在内存中</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">// Arrays in Memory</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintMem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\" spellcheck=\"true\">// 输出一块长度为len的内存中的数据</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 一维数组</span>\n  <span class=\"token keyword\">int</span> array_2d<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                                     <span class=\"token comment\" spellcheck=\"true\">// 二维数组</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 按期望的二维数组在内存中的分布，将一维数组元素的值赋给二维数组</span>\n  <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> array_2d<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 分别输出两个数组内存中的数据</span>\n  <span class=\"token function\">PrintMem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">PrintMem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>array_2d<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">$ gcc main.c -o main <span class=\"token operator\">&amp;&amp;</span> ./main\n11 12 13 21 22 23 31 32 33 \n11 12 13 21 22 23 31 32 33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>这块内存划重点</strong></p>\n<p><img src=\"array.png\" alt=\"一维数组\"><br><img src=\"2D_array.png\" alt=\"二维数组\"></p>\n<h2 id=\"开发一个井字棋游戏\"><a href=\"#开发一个井字棋游戏\" class=\"headerlink\" title=\"开发一个井字棋游戏\"></a>开发一个井字棋游戏</h2><h3 id=\"什么是井字棋\"><a href=\"#什么是井字棋\" class=\"headerlink\" title=\"什么是井字棋\"></a>什么是井字棋</h3><table>\n<thead>\n<tr>\n<th>因为</th>\n<th>所以</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一个3x3的平面游戏</td>\n<td>用一个3x3的数组存储</td>\n</tr>\n<tr>\n<td>有两位玩家，XO两种棋子，同时还有未放置棋子的空白</td>\n<td>数组类型为char</td>\n</tr>\n<tr>\n<td>当3个棋子连成线时获胜</td>\n<td>游戏获胜的逻辑判断</td>\n</tr>\n<tr>\n<td>当9个格子都被占用且没人获胜时平局</td>\n<td>游戏平局的逻辑判断</td>\n</tr>\n</tbody></table>\n<h3 id=\"第一步：确定如何存储游戏的数据\"><a href=\"#第一步：确定如何存储游戏的数据\" class=\"headerlink\" title=\"第一步：确定如何存储游戏的数据\"></a>第一步：确定如何存储游戏的数据</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> bool <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 在y行x列放置sign棋子</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 危险代码</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// 有棋子了</span>\n  <span class=\"token keyword\">return</span> kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sign<span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">// 放置棋子</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第二步：将数据输出到屏幕上\"><a href=\"#第二步：将数据输出到屏幕上\" class=\"headerlink\" title=\"第二步：将数据输出到屏幕上\"></a>第二步：将数据输出到屏幕上</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ClearScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// printf(\"\\033[2J\\033[0;0H\");  // On Linux</span>\n  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// On Windows</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ClearScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tictactoe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c|%c|%c\\n\"</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一一一\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第三步：处理玩家控制\"><a href=\"#第三步：处理玩家控制\" class=\"headerlink\" title=\"第三步：处理玩家控制\"></a>第三步：处理玩家控制</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\">  <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\" spellcheck=\"true\">// 显然，有效输入不会超过9次</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nInput (Y X) to set %c: \"</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'X'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 奇数次为O，偶数次为X</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'X'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">// 无效输入</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\" spellcheck=\"true\">// 每次输入完后输出画面</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 判断游戏获胜</span>\n    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"第四步：判断游戏结束的条件\"><a href=\"#第四步：判断游戏结束的条件\" class=\"headerlink\" title=\"第四步：判断游戏结束的条件\"></a>第四步：判断游戏结束的条件</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token keyword\">inline</span> bool <span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 方便判断3个字符</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">==</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">Check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 左斜</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 右斜</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 行</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 列</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 在main函数中</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                 <span class=\"token comment\" spellcheck=\"true\">// 获胜结束</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nPlayer %c Win!\\n\\n\"</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'X'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\" spellcheck=\"true\">// 平局结束</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDraw Game!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数组越界\"><a href=\"#数组越界\" class=\"headerlink\" title=\"数组越界\"></a>数组越界</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> bool <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 在y行x列放置sign棋子</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 危险代码</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">// 有棋子了</span>\n  <span class=\"token keyword\">return</span> kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sign<span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">// 放置棋子</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这段代码中，当<code>x &gt;= 3</code>时会发生什么？<br><img src=\"2D_array.png\" alt=\"二维数组\"><br>输入1，6时，y=0，x=5，覆盖到图中a23的位置</p>\n<pre><code>Tictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: 1 6</code></pre><pre><code>Tictactoe\n\n | | \n一一一\n | |O\n一一一\n | | \n\nInput (Y X) to set X: </code></pre><p>如果输入-1000000 1呢？程序将会崩溃</p>\n<pre><code>Tictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: -1000000 1  \n[1]    6357 segmentation fault  ./main</code></pre><p><strong>所以要访问数组时要注意边界</strong></p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> bool <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 在y行x列放置sign棋子</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 有棋子了</span>\n  <span class=\"token keyword\">return</span> kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sign<span class=\"token punctuation\">;</span>                                               <span class=\"token comment\" spellcheck=\"true\">// 放置棋子</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _CRT_SECURE_NO_WARNINGS</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">char</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> bool <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sign<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">// 在y行x列放置sign棋子</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 有棋子了</span>\n  <span class=\"token keyword\">return</span> kMap<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sign<span class=\"token punctuation\">;</span>                                               <span class=\"token comment\" spellcheck=\"true\">// 放置棋子</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ClearScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// printf(\"\\033[2J\\033[0;0H\");  // On Linux</span>\n  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// On Windows</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ClearScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tictactoe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c|%c|%c\\n\"</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-+-+-\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> bool <span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 方便判断3个字符</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">==</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">Check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 左斜</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 右斜</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 行</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kMap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 列</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>kMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\" spellcheck=\"true\">// 显然，有效输入不会超过9次</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nInput (Y X) to set %c: \"</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'X'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 奇数次为O，偶数次为X</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'X'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">// 无效输入</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\" spellcheck=\"true\">// 每次输入完后输出画面</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 判断游戏获胜</span>\n    <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nPlayer %c Win!\\n\\n\"</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'X'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDraw Game!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// On Windows</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"用CE进行破解\"><a href=\"#用CE进行破解\" class=\"headerlink\" title=\"用CE进行破解\"></a>用CE进行破解</h2><p>学CE有什么用？在4399和单机游戏中当科学家。。。</p>\n<p>其实人家主要用来分析和修改内存。</p>\n<p><a href=\"https://www.cheatengine.org/\" target=\"_blank\" rel=\"noopener\">下载CE</a></p>\n<h3 id=\"破解过程\"><a href=\"#破解过程\" class=\"headerlink\" title=\"破解过程\"></a>破解过程</h3><p><img src=\"ce_1.png\" alt=\"打开进程\"></p>\n<br>\n\n<p><img src=\"ce_2.png\" alt=\"搜索数组\"></p>\n<p>起始时数组为9个空格</p>\n<p>输出字符对应的十六进制ASCII码（O：4f，X：58，空格：20）</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">python3 -c <span class=\"token string\">'print(hex(ord(input())))'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<br>\n\n<p><img src=\"ce_3.png\" alt=\"缩小范围\"></p>\n<p>出现了一大堆数据，其中只有一个是我们想要的，可以通过改变它的值再次搜索</p>\n<p>在游戏中输入：1 1，然后返回CE操作</p>\n<p><img src=\"ce_4.png\" alt=\"修改\"></p>\n<p>修改到达成胜利条件，之后在游戏中输入2 2</p>\n<p><img src=\"ce_5.png\" alt=\"修改成功\"></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>2020-11-20下午CTF课上的小实验</p>\n<h3 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h3><ul>\n<li><strong>C语言数组及其在内存中的结构</strong></li>\n<li>开发一个井字棋游戏</li>\n<li>用CE进行破解</li>\n</ul>\n<h2 id=\"C语言的数组\"><a href=\"#C语言的数组\" class=\"headerlink\" title=\"C语言的数组\"></a>C语言的数组</h2><h3 id=\"数组和链表\"><a href=\"#数组和链表\" class=\"headerlink\" title=\"数组和链表\"></a>数组和链表</h3><blockquote>\n<p>高三时同学们统一购买了一本必背64篇的小本本，而转学来的李四书上的顺序与同学们不同。<br>为了跟同学们同步，ta想出了个好办法：<strong>在每篇古文上，记下它在同学们书上的上下篇，对应到李四书上的页码</strong>。<br>如：生于忧患，死于安乐   上一篇P23，下一篇P233<br>所以，当同学们从一篇<strong>翻页</strong>到下一篇时，李四<strong>通过”下一篇”的页码来定位</strong>。</p>\n<ol>\n<li>李四很快就发现，当他<strong>定位到“下一篇时”，同学们都念完第一段了</strong></li>\n<li>某天学渣张三被抓去念早读<br>张三：<strong>“同学们，翻开第20篇”</strong><br>李四：<strong>啪一下就站起来了</strong></li>\n</ol>\n</blockquote>\n<p><strong>同学们的书就是数组，李四的书就是链表</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储方式</td>\n<td>连续</td>\n<td>离散，通过寻址的方式链接</td>\n</tr>\n<tr>\n<td>随机访问速度</td>\n<td><strong>极快</strong></td>\n<td>很慢</td>\n</tr>\n<tr>\n<td>遍历速度</td>\n<td><strong>极快</strong></td>\n<td>快</td>\n</tr>\n<tr>\n<td>可变性</td>\n<td>仅支持改</td>\n<td><strong>任意位置增删改</strong></td>\n</tr>\n</tbody></table>\n<p>所以数组有什么用？</p>\n<ul>\n<li>数组是在内存中<strong>整块</strong>存储的<strong>运行时大小不可变</strong>的数据结构</li>\n<li>因为这个特性，数组是<strong>访问速度最快的数据结构</strong></li>\n<li>事实上，李四的<strong>链表</strong>还是基于<strong>数组</strong>的。众多的数据结构都能使用数组来实现。</li>\n</ul>\n<h3 id=\"指针与数组\"><a href=\"#指针与数组\" class=\"headerlink\" title=\"指针与数组\"></a>指针与数组</h3><ul>\n<li><strong>数组是内存中的一小块，而指针用于描述内存中的一个点</strong></li>\n<li>因此，数组用于存储，指针主要用于访问</li>\n<li>描述C的数组，只需要一个指针表示起始地址，一个整数表示长度</li>\n<li>指针加法：偏移sizeof(指针类型)的量</li>\n</ul>\n<p>C语言数组取地址的小细节</p>\n<pre><code class=\"c\">// Arrays in Memory\n#include &lt;stdio.h&gt;\nint main () {\n  char array_2d[3][3];      // 二维数组\n  printf(&quot;%x %x\\n&quot;, array_2d, array_2d + 1);\n  printf(&quot;%x %x\\n&quot;, &amp;array_2d, &amp;array_2d + 1);\n  return 0;\n}\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"bash\">$ gcc main.c -o main &amp;&amp; ./main\n594af137 594af13a\n594af137 594af140</code></pre>\n<p><code>array_2d, array_2d + 1</code>两个值相差3，说明数组名被转换为char[3]的指针（等价于&amp;array_2d[0]）<br><code>&amp;array_2d, &amp;array_2d + 1</code>两个值相差9，说明数组名的取地址为char[3][3]的指针<br><code>array_2d</code>和<code>&amp;array_2d</code>相等，而且都是第一个元素的地址</p>\n<h3 id=\"数组在内存中\"><a href=\"#数组在内存中\" class=\"headerlink\" title=\"数组在内存中\"></a>数组在内存中</h3><pre><code class=\"c\">// Arrays in Memory\n\n#include &lt;stdio.h&gt;\n\nvoid PrintMem(int *p, int len) {    // 输出一块长度为len的内存中的数据\n  while(len--) printf(&quot;%d &quot;, *p++);\n  printf(&quot;\\n&quot;);\n}\n\nint main () {\n  int array[9] = {11, 12, 13, 21, 22, 23, 31, 32, 33};    // 一维数组\n  int array_2d[3][3];                                     // 二维数组\n\n  // 按期望的二维数组在内存中的分布，将一维数组元素的值赋给二维数组\n  int index = 0;\n  for (int y = 0; y &lt; 3; ++y)\n    for (int x = 0; x &lt; 3; ++x) array_2d[y][x] = array[index++];\n\n  // 分别输出两个数组内存中的数据\n  PrintMem((int *)&amp;array, 9);\n  PrintMem((int *)&amp;array_2d, 9);\n\n  return 0;\n}\n</code></pre>\n<p>输出：</p>\n<pre><code class=\"bash\">$ gcc main.c -o main &amp;&amp; ./main\n11 12 13 21 22 23 31 32 33 \n11 12 13 21 22 23 31 32 33</code></pre>\n<p><strong>这块内存划重点</strong></p>\n<p><img src=\"array.png\" alt=\"一维数组\"><br><img src=\"2D_array.png\" alt=\"二维数组\"></p>\n<h2 id=\"开发一个井字棋游戏\"><a href=\"#开发一个井字棋游戏\" class=\"headerlink\" title=\"开发一个井字棋游戏\"></a>开发一个井字棋游戏</h2><h3 id=\"什么是井字棋\"><a href=\"#什么是井字棋\" class=\"headerlink\" title=\"什么是井字棋\"></a>什么是井字棋</h3><table>\n<thead>\n<tr>\n<th>因为</th>\n<th>所以</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>一个3x3的平面游戏</td>\n<td>用一个3x3的数组存储</td>\n</tr>\n<tr>\n<td>有两位玩家，XO两种棋子，同时还有未放置棋子的空白</td>\n<td>数组类型为char</td>\n</tr>\n<tr>\n<td>当3个棋子连成线时获胜</td>\n<td>游戏获胜的逻辑判断</td>\n</tr>\n<tr>\n<td>当9个格子都被占用且没人获胜时平局</td>\n<td>游戏平局的逻辑判断</td>\n</tr>\n</tbody></table>\n<h3 id=\"第一步：确定如何存储游戏的数据\"><a href=\"#第一步：确定如何存储游戏的数据\" class=\"headerlink\" title=\"第一步：确定如何存储游戏的数据\"></a>第一步：确定如何存储游戏的数据</h3><pre><code class=\"c\">char kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  // 危险代码\n  if (kMap[y][x] != &#39; &#39;) return 0;          // 有棋子了\n  return kMap[y][x] = sign;                 // 放置棋子\n}\n</code></pre>\n<h3 id=\"第二步：将数据输出到屏幕上\"><a href=\"#第二步：将数据输出到屏幕上\" class=\"headerlink\" title=\"第二步：将数据输出到屏幕上\"></a>第二步：将数据输出到屏幕上</h3><pre><code class=\"c\">inline void ClearScreen() {\n  // printf(&quot;\\033[2J\\033[0;0H&quot;);  // On Linux\n  system(&quot;cls&quot;);  // On Windows\n}\n\nvoid Draw() {\n  ClearScreen();\n  puts(&quot;Tictactoe\\n&quot;);\n  for (int i = 0; i &lt; 3; ++i) {\n    printf(&quot;%c|%c|%c\\n&quot;, kMap[i][0], kMap[i][1], kMap[i][2]);\n    if (i != 2) printf(&quot;一一一\\n&quot;);\n  }\n}\n</code></pre>\n<h3 id=\"第三步：处理玩家控制\"><a href=\"#第三步：处理玩家控制\" class=\"headerlink\" title=\"第三步：处理玩家控制\"></a>第三步：处理玩家控制</h3><pre><code class=\"c\">  int cnt = 0, y, x;\n\n  while (cnt &lt; 9) {       // 显然，有效输入不会超过9次\n    printf(&quot;\\nInput (Y X) to set %c: &quot;, cnt &amp; 1 ? &#39;X&#39; : &#39;O&#39;); // 奇数次为O，偶数次为X\n    scanf(&quot;%d %d&quot;, &amp;y, &amp;x);\n    if (!Set(y - 1, x - 1, cnt &amp; 1 ? &#39;X&#39; : &#39;O&#39;)) {\n      puts(&quot;Unexpected input&quot;);\n      continue;           // 无效输入\n    }\n\n    Draw();               // 每次输入完后输出画面\n    if (Check()) break;   // 判断游戏获胜\n    ++cnt;\n  }\n</code></pre>\n<h3 id=\"第四步：判断游戏结束的条件\"><a href=\"#第四步：判断游戏结束的条件\" class=\"headerlink\" title=\"第四步：判断游戏结束的条件\"></a>第四步：判断游戏结束的条件</h3><pre><code class=\"c\">inline bool Equal(char x, char y, char z) { // 方便判断3个字符\n  return x != &#39; &#39; &amp;&amp; x == y &amp;&amp; y == z;\n}\n\nbool Check() {\n  if (Equal(kMap[0][0], kMap[1][1], kMap[2][2])) return true;   // 左斜\n  if (Equal(kMap[2][0], kMap[1][1], kMap[0][2])) return true;   // 右斜\n\n  for (int i = 0; i &lt; 3; ++i) {\n    if (Equal(kMap[i][0], kMap[i][1], kMap[i][2])) return true; // 行\n    if (Equal(kMap[0][i], kMap[1][i], kMap[2][i])) return true; // 列\n  }\n  return false;\n}\n\n// 在main函数中\n  if (cnt != 9) {                 // 获胜结束\n    printf(&quot;\\nPlayer %c Win!\\n\\n&quot;, cnt &amp; 1 ? &#39;X&#39; : &#39;O&#39;);\n  } else {                        // 平局结束\n    puts(&quot;\\nDraw Game!\\n&quot;);\n  }\n</code></pre>\n<h3 id=\"数组越界\"><a href=\"#数组越界\" class=\"headerlink\" title=\"数组越界\"></a>数组越界</h3><pre><code class=\"c\">char kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  // 危险代码\n  if (kMap[y][x] != &#39; &#39;) return 0;          // 有棋子了\n  return kMap[y][x] = sign;                 // 放置棋子\n}\n</code></pre>\n<p>这段代码中，当<code>x &gt;= 3</code>时会发生什么？<br><img src=\"2D_array.png\" alt=\"二维数组\"><br>输入1，6时，y=0，x=5，覆盖到图中a23的位置</p>\n<pre><code>Tictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: 1 6</code></pre><pre><code>Tictactoe\n\n | | \n一一一\n | |O\n一一一\n | | \n\nInput (Y X) to set X: </code></pre><p>如果输入-1000000 1呢？程序将会崩溃</p>\n<pre><code>Tictactoe\n\n | | \n一一一\n | | \n一一一\n | | \n\nInput (Y X) to set O: -1000000 1  \n[1]    6357 segmentation fault  ./main</code></pre><p><strong>所以要访问数组时要注意边界</strong></p>\n<pre><code class=\"c\">char kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  if (x &lt; 0 || x &gt;= 3 || y &lt; 0 || y &gt;= 3 || kMap[y][x] != &#39; &#39;) return 0;  // 有棋子了\n  return kMap[y][x] = sign;                                               // 放置棋子\n}</code></pre>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><pre><code class=\"c\">#define _CRT_SECURE_NO_WARNINGS\n\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nchar kMap[3][3] = {0};\n\ninline bool Set(int y, int x, char sign) {  // 在y行x列放置sign棋子\n  if (x &lt; 0 || x &gt;= 3 || y &lt; 0 || y &gt;= 3 || kMap[y][x] != &#39; &#39;) return 0;  // 有棋子了\n  return kMap[y][x] = sign;                                               // 放置棋子\n}\n\ninline void ClearScreen() {\n  // printf(&quot;\\033[2J\\033[0;0H&quot;);  // On Linux\n  system(&quot;cls&quot;);  // On Windows\n}\n\nvoid Draw() {\n  ClearScreen();\n  puts(&quot;Tictactoe\\n&quot;);\n  for (int i = 0; i &lt; 3; ++i) {\n    printf(&quot;%c|%c|%c\\n&quot;, kMap[i][0], kMap[i][1], kMap[i][2]);\n    if (i != 2) printf(&quot;-+-+-\\n&quot;);\n  }\n}\n\ninline bool Equal(char x, char y, char z) { // 方便判断3个字符\n  return x != &#39; &#39; &amp;&amp; x == y &amp;&amp; y == z;\n}\n\nbool Check() {\n  if (Equal(kMap[0][0], kMap[1][1], kMap[2][2])) return true;   // 左斜\n  if (Equal(kMap[2][0], kMap[1][1], kMap[0][2])) return true;   // 右斜\n\n  for (int i = 0; i &lt; 3; ++i) {\n    if (Equal(kMap[i][0], kMap[i][1], kMap[i][2])) return true; // 行\n    if (Equal(kMap[0][i], kMap[1][i], kMap[2][i])) return true; // 列\n  }\n  return false;\n}\n\nint main() {\n  memset(kMap, &#39; &#39;, sizeof(kMap));\n  Draw();\n\n  int cnt = 0, y, x;\n\n  while (cnt &lt; 9) {       // 显然，有效输入不会超过9次\n    printf(&quot;\\nInput (Y X) to set %c: &quot;, cnt &amp; 1 ? &#39;X&#39; : &#39;O&#39;); // 奇数次为O，偶数次为X\n    scanf(&quot;%d %d&quot;, &amp;y, &amp;x);\n    if (!Set(y - 1, x - 1, cnt &amp; 1 ? &#39;X&#39; : &#39;O&#39;)) {\n      puts(&quot;Unexpected input&quot;);\n      continue;           // 无效输入\n    }\n\n    Draw();               // 每次输入完后输出画面\n    if (Check()) break;   // 判断游戏获胜\n    ++cnt;\n  }\n\n  if (cnt != 9) {\n    printf(&quot;\\nPlayer %c Win!\\n\\n&quot;, cnt &amp; 1 ? &#39;X&#39; : &#39;O&#39;);\n  } else {\n    puts(&quot;\\nDraw Game!\\n&quot;);\n  }\n\n  system(&quot;pause&quot;);  // On Windows\n  return 0;\n}</code></pre>\n<h2 id=\"用CE进行破解\"><a href=\"#用CE进行破解\" class=\"headerlink\" title=\"用CE进行破解\"></a>用CE进行破解</h2><p>学CE有什么用？在4399和单机游戏中当科学家。。。</p>\n<p>其实人家主要用来分析和修改内存。</p>\n<p><a href=\"https://www.cheatengine.org/\" target=\"_blank\" rel=\"noopener\">下载CE</a></p>\n<h3 id=\"破解过程\"><a href=\"#破解过程\" class=\"headerlink\" title=\"破解过程\"></a>破解过程</h3><p><img src=\"ce_1.png\" alt=\"打开进程\"></p>\n<br>\n\n<p><img src=\"ce_2.png\" alt=\"搜索数组\"></p>\n<p>起始时数组为9个空格</p>\n<p>输出字符对应的十六进制ASCII码（O：4f，X：58，空格：20）</p>\n<pre><code class=\"bash\">python3 -c &#39;print(hex(ord(input())))&#39;</code></pre>\n<br>\n\n<p><img src=\"ce_3.png\" alt=\"缩小范围\"></p>\n<p>出现了一大堆数据，其中只有一个是我们想要的，可以通过改变它的值再次搜索</p>\n<p>在游戏中输入：1 1，然后返回CE操作</p>\n<p><img src=\"ce_4.png\" alt=\"修改\"></p>\n<p>修改到达成胜利条件，之后在游戏中输入2 2</p>\n<p><img src=\"ce_5.png\" alt=\"修改成功\"></p>\n"},{"title":"Longest Monotone Subsequence","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-27T07:00:24.000Z","password":null,"summary":"最长单调子序列的动态规划/贪心+二分查找算法","_content":"\n## 严格单调递增子序列\n\n求`a[n]`的最长严格单调递增子序列长度，简称严单增子序长\n\n## 思路1：动态规划\n\n考虑`dp[i]=以a[i]结尾的最长严单增子序长`\n\n- 首先，对于`a[1]`，最长严单增子序显然是它本身，也就是长度为`dp[1]=1`\n- 对于i>1，考虑`a[i]`与`a[j], 1 <= j < i`\n  - 如果`a[j] < a[i]`，那么显然`a[j]`结尾的最长严单增子序，尾部再加上一个`a[i]`，仍然严单增\n  - 如果`a[j] >= a[i]`，那么反之，`a[i]`不能与`a[j]`结尾的子序列构成最长严单增子序\n- 则有dp方程：`dp[i] = Max{dp[i], dp[j] + 1 if a[j] < a[i] else 1}`\n\n时间复杂度：`O(n^2)`\n\n空间复杂度：`O(n)`\n\n### 模板\n\n```cpp\n// cmp： < 时为最长严单增子序列； <= 时为最长单增子序列； 反之为相应的递减\ntemplate <class Compare>\nint32_t LongestMonotoneSubsequence(const int32_t *a, const size_t &n,\n                                   const Compare &cmp) {\n  if (n == 0 || a == nullptr) return 0;\n\n  int32_t res = 1, *dp = new int32_t[n];\n\n  for (int i = 0; i < n; ++i) {\n    dp[i] = 1;\n    for (int j = 0; j < i; ++j)\n      if (cmp(a[j], a[i]) && dp[i] <= dp[j]) dp[i] = dp[j] + 1;\n    if (res < dp[i]) res = dp[i];\n  }\n\n  delete[] dp;\n  return res;\n}\n\n```\n\n## 思路2：贪心+二分查找\n\n- 考虑计算`dp[i]`时：\n- 有`x, y < i`，且`a[x] < a[y] < a[i]`，且`dp[x] = dp[y]`，那么选择`x`显然比选择`y`更好\n- 所以可以使用贪心：维护一个数组`b[]`，使得`b[j], 1<=j<=t`为`a[i], 1<=i<=n`中长度为`j`的最长单调子序列中尾元素的最小值\n- 那么，当`a[i] > b[t]`时，显然`dp[i] = b[t]+1`，同时要令`b[++t] = a[i]`\n- 反之，从`b[j], 1<=j<=t`中找出第一个满足`b[j]>=a[i]`的，令`b[j] = a[i]`\n- 可以发现最终`dp[n] = t`，故可省去`dp[i]`\n- 可以发现`b[]`是满足严单增的，故`a[i] <= b[t]`时可用二分法查找\n\n时间复杂度：`O(nlogn)`\n\n空间复杂度：`O(n)`\n\n### 模板\n\n```cpp\n// cmp： < 时为第一个大于key的； <= 时为最后一个等于或第一个大于； 反之为相应的\ntemplate <class Compare>\nint32_t BinarySearch(const int32_t *a, const size_t &n, const int32_t &key,\n              const Compare &cmp) {\n  size_t lp = 0, rp = n - 1, mp;\n  if (cmp(a[rp], key)) return n;\n\n  while (lp != rp) {\n    mp = (lp + rp) >> 1;\n    if (cmp(a[mp], key)) {\n      lp = mp + 1;\n    } else {\n      rp = mp;\n    }\n  }\n  return lp;\n}\n\n// cmp： < 时为最长严单增子序列； <= 时为最长单增子序列； 反之为相应的递减\ntemplate <class Compare>\nint32_t LongestMonotoneSubsequence(const int32_t *a, const size_t &n,\n                                   const Compare &cmp) {\n  if (n == 0) return 0;\n\n  int32_t res = 0, *b = new int32_t[n];\n  b[0] = a[0];\n\n  for (int i = 1; i < n; ++i) {\n    if (cmp(b[res], a[i])) {\n      b[++res] = a[i];\n    } else {\n      b[BinarySearch(b, res, a[i], cmp)] = a[i];\n    }\n  }\n\n  delete[] b;\n  return res + 1;\n}\n\n```\n","source":"_posts/Longest-Monotone-Subsequence.md","raw":"---\ntitle: Longest Monotone Subsequence\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-27 15:00:24\npassword:\nsummary: 最长单调子序列的动态规划/贪心+二分查找算法\ntags:\n- 动态规划\n- 贪心\n- 二分查找\ncategories:\n- 算法\n---\n\n## 严格单调递增子序列\n\n求`a[n]`的最长严格单调递增子序列长度，简称严单增子序长\n\n## 思路1：动态规划\n\n考虑`dp[i]=以a[i]结尾的最长严单增子序长`\n\n- 首先，对于`a[1]`，最长严单增子序显然是它本身，也就是长度为`dp[1]=1`\n- 对于i>1，考虑`a[i]`与`a[j], 1 <= j < i`\n  - 如果`a[j] < a[i]`，那么显然`a[j]`结尾的最长严单增子序，尾部再加上一个`a[i]`，仍然严单增\n  - 如果`a[j] >= a[i]`，那么反之，`a[i]`不能与`a[j]`结尾的子序列构成最长严单增子序\n- 则有dp方程：`dp[i] = Max{dp[i], dp[j] + 1 if a[j] < a[i] else 1}`\n\n时间复杂度：`O(n^2)`\n\n空间复杂度：`O(n)`\n\n### 模板\n\n```cpp\n// cmp： < 时为最长严单增子序列； <= 时为最长单增子序列； 反之为相应的递减\ntemplate <class Compare>\nint32_t LongestMonotoneSubsequence(const int32_t *a, const size_t &n,\n                                   const Compare &cmp) {\n  if (n == 0 || a == nullptr) return 0;\n\n  int32_t res = 1, *dp = new int32_t[n];\n\n  for (int i = 0; i < n; ++i) {\n    dp[i] = 1;\n    for (int j = 0; j < i; ++j)\n      if (cmp(a[j], a[i]) && dp[i] <= dp[j]) dp[i] = dp[j] + 1;\n    if (res < dp[i]) res = dp[i];\n  }\n\n  delete[] dp;\n  return res;\n}\n\n```\n\n## 思路2：贪心+二分查找\n\n- 考虑计算`dp[i]`时：\n- 有`x, y < i`，且`a[x] < a[y] < a[i]`，且`dp[x] = dp[y]`，那么选择`x`显然比选择`y`更好\n- 所以可以使用贪心：维护一个数组`b[]`，使得`b[j], 1<=j<=t`为`a[i], 1<=i<=n`中长度为`j`的最长单调子序列中尾元素的最小值\n- 那么，当`a[i] > b[t]`时，显然`dp[i] = b[t]+1`，同时要令`b[++t] = a[i]`\n- 反之，从`b[j], 1<=j<=t`中找出第一个满足`b[j]>=a[i]`的，令`b[j] = a[i]`\n- 可以发现最终`dp[n] = t`，故可省去`dp[i]`\n- 可以发现`b[]`是满足严单增的，故`a[i] <= b[t]`时可用二分法查找\n\n时间复杂度：`O(nlogn)`\n\n空间复杂度：`O(n)`\n\n### 模板\n\n```cpp\n// cmp： < 时为第一个大于key的； <= 时为最后一个等于或第一个大于； 反之为相应的\ntemplate <class Compare>\nint32_t BinarySearch(const int32_t *a, const size_t &n, const int32_t &key,\n              const Compare &cmp) {\n  size_t lp = 0, rp = n - 1, mp;\n  if (cmp(a[rp], key)) return n;\n\n  while (lp != rp) {\n    mp = (lp + rp) >> 1;\n    if (cmp(a[mp], key)) {\n      lp = mp + 1;\n    } else {\n      rp = mp;\n    }\n  }\n  return lp;\n}\n\n// cmp： < 时为最长严单增子序列； <= 时为最长单增子序列； 反之为相应的递减\ntemplate <class Compare>\nint32_t LongestMonotoneSubsequence(const int32_t *a, const size_t &n,\n                                   const Compare &cmp) {\n  if (n == 0) return 0;\n\n  int32_t res = 0, *b = new int32_t[n];\n  b[0] = a[0];\n\n  for (int i = 1; i < n; ++i) {\n    if (cmp(b[res], a[i])) {\n      b[++res] = a[i];\n    } else {\n      b[BinarySearch(b, res, a[i], cmp)] = a[i];\n    }\n  }\n\n  delete[] b;\n  return res + 1;\n}\n\n```\n","slug":"Longest-Monotone-Subsequence","published":1,"updated":"2021-04-25T07:11:17.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuoum000dzcl0bghk6iop","content":"<h2 id=\"严格单调递增子序列\"><a href=\"#严格单调递增子序列\" class=\"headerlink\" title=\"严格单调递增子序列\"></a>严格单调递增子序列</h2><p>求<code>a[n]</code>的最长严格单调递增子序列长度，简称严单增子序长</p>\n<h2 id=\"思路1：动态规划\"><a href=\"#思路1：动态规划\" class=\"headerlink\" title=\"思路1：动态规划\"></a>思路1：动态规划</h2><p>考虑<code>dp[i]=以a[i]结尾的最长严单增子序长</code></p>\n<ul>\n<li>首先，对于<code>a[1]</code>，最长严单增子序显然是它本身，也就是长度为<code>dp[1]=1</code></li>\n<li>对于i&gt;1，考虑<code>a[i]</code>与<code>a[j], 1 &lt;= j &lt; i</code><ul>\n<li>如果<code>a[j] &lt; a[i]</code>，那么显然<code>a[j]</code>结尾的最长严单增子序，尾部再加上一个<code>a[i]</code>，仍然严单增</li>\n<li>如果<code>a[j] &gt;= a[i]</code>，那么反之，<code>a[i]</code>不能与<code>a[j]</code>结尾的子序列构成最长严单增子序</li>\n</ul>\n</li>\n<li>则有dp方程：<code>dp[i] = Max{dp[i], dp[j] + 1 if a[j] &lt; a[i] else 1}</code></li>\n</ul>\n<p>时间复杂度：<code>O(n^2)</code></p>\n<p>空间复杂度：<code>O(n)</code></p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// cmp： &lt; 时为最长严单增子序列； &lt;= 时为最长单增子序列； 反之为相应的递减</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Compare</span><span class=\"token operator\">></span>\nint32_t <span class=\"token function\">LongestMonotoneSubsequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span>\n                                   <span class=\"token keyword\">const</span> Compare <span class=\"token operator\">&amp;</span>cmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> a <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  int32_t res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> int32_t<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"思路2：贪心-二分查找\"><a href=\"#思路2：贪心-二分查找\" class=\"headerlink\" title=\"思路2：贪心+二分查找\"></a>思路2：贪心+二分查找</h2><ul>\n<li>考虑计算<code>dp[i]</code>时：</li>\n<li>有<code>x, y &lt; i</code>，且<code>a[x] &lt; a[y] &lt; a[i]</code>，且<code>dp[x] = dp[y]</code>，那么选择<code>x</code>显然比选择<code>y</code>更好</li>\n<li>所以可以使用贪心：维护一个数组<code>b[]</code>，使得<code>b[j], 1&lt;=j&lt;=t</code>为<code>a[i], 1&lt;=i&lt;=n</code>中长度为<code>j</code>的最长单调子序列中尾元素的最小值</li>\n<li>那么，当<code>a[i] &gt; b[t]</code>时，显然<code>dp[i] = b[t]+1</code>，同时要令<code>b[++t] = a[i]</code></li>\n<li>反之，从<code>b[j], 1&lt;=j&lt;=t</code>中找出第一个满足<code>b[j]&gt;=a[i]</code>的，令<code>b[j] = a[i]</code></li>\n<li>可以发现最终<code>dp[n] = t</code>，故可省去<code>dp[i]</code></li>\n<li>可以发现<code>b[]</code>是满足严单增的，故<code>a[i] &lt;= b[t]</code>时可用二分法查找</li>\n</ul>\n<p>时间复杂度：<code>O(nlogn)</code></p>\n<p>空间复杂度：<code>O(n)</code></p>\n<h3 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// cmp： &lt; 时为第一个大于key的； &lt;= 时为最后一个等于或第一个大于； 反之为相应的</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Compare</span><span class=\"token operator\">></span>\nint32_t <span class=\"token function\">BinarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> int32_t <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">const</span> Compare <span class=\"token operator\">&amp;</span>cmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t lp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rp <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>rp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lp <span class=\"token operator\">!=</span> rp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lp <span class=\"token operator\">+</span> rp<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      lp <span class=\"token operator\">=</span> mp <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      rp <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> lp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// cmp： &lt; 时为最长严单增子序列； &lt;= 时为最长单增子序列； 反之为相应的递减</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Compare</span><span class=\"token operator\">></span>\nint32_t <span class=\"token function\">LongestMonotoneSubsequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span>\n                                   <span class=\"token keyword\">const</span> Compare <span class=\"token operator\">&amp;</span>cmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  int32_t res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> int32_t<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      b<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      b<span class=\"token punctuation\">[</span><span class=\"token function\">BinarySearch</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"严格单调递增子序列\"><a href=\"#严格单调递增子序列\" class=\"headerlink\" title=\"严格单调递增子序列\"></a>严格单调递增子序列</h2><p>求<code>a[n]</code>的最长严格单调递增子序列长度，简称严单增子序长</p>\n<h2 id=\"思路1：动态规划\"><a href=\"#思路1：动态规划\" class=\"headerlink\" title=\"思路1：动态规划\"></a>思路1：动态规划</h2><p>考虑<code>dp[i]=以a[i]结尾的最长严单增子序长</code></p>\n<ul>\n<li>首先，对于<code>a[1]</code>，最长严单增子序显然是它本身，也就是长度为<code>dp[1]=1</code></li>\n<li>对于i&gt;1，考虑<code>a[i]</code>与<code>a[j], 1 &lt;= j &lt; i</code><ul>\n<li>如果<code>a[j] &lt; a[i]</code>，那么显然<code>a[j]</code>结尾的最长严单增子序，尾部再加上一个<code>a[i]</code>，仍然严单增</li>\n<li>如果<code>a[j] &gt;= a[i]</code>，那么反之，<code>a[i]</code>不能与<code>a[j]</code>结尾的子序列构成最长严单增子序</li>\n</ul>\n</li>\n<li>则有dp方程：<code>dp[i] = Max{dp[i], dp[j] + 1 if a[j] &lt; a[i] else 1}</code></li>\n</ul>\n<p>时间复杂度：<code>O(n^2)</code></p>\n<p>空间复杂度：<code>O(n)</code></p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre><code class=\"cpp\">// cmp： &lt; 时为最长严单增子序列； &lt;= 时为最长单增子序列； 反之为相应的递减\ntemplate &lt;class Compare&gt;\nint32_t LongestMonotoneSubsequence(const int32_t *a, const size_t &amp;n,\n                                   const Compare &amp;cmp) {\n  if (n == 0 || a == nullptr) return 0;\n\n  int32_t res = 1, *dp = new int32_t[n];\n\n  for (int i = 0; i &lt; n; ++i) {\n    dp[i] = 1;\n    for (int j = 0; j &lt; i; ++j)\n      if (cmp(a[j], a[i]) &amp;&amp; dp[i] &lt;= dp[j]) dp[i] = dp[j] + 1;\n    if (res &lt; dp[i]) res = dp[i];\n  }\n\n  delete[] dp;\n  return res;\n}\n</code></pre>\n<h2 id=\"思路2：贪心-二分查找\"><a href=\"#思路2：贪心-二分查找\" class=\"headerlink\" title=\"思路2：贪心+二分查找\"></a>思路2：贪心+二分查找</h2><ul>\n<li>考虑计算<code>dp[i]</code>时：</li>\n<li>有<code>x, y &lt; i</code>，且<code>a[x] &lt; a[y] &lt; a[i]</code>，且<code>dp[x] = dp[y]</code>，那么选择<code>x</code>显然比选择<code>y</code>更好</li>\n<li>所以可以使用贪心：维护一个数组<code>b[]</code>，使得<code>b[j], 1&lt;=j&lt;=t</code>为<code>a[i], 1&lt;=i&lt;=n</code>中长度为<code>j</code>的最长单调子序列中尾元素的最小值</li>\n<li>那么，当<code>a[i] &gt; b[t]</code>时，显然<code>dp[i] = b[t]+1</code>，同时要令<code>b[++t] = a[i]</code></li>\n<li>反之，从<code>b[j], 1&lt;=j&lt;=t</code>中找出第一个满足<code>b[j]&gt;=a[i]</code>的，令<code>b[j] = a[i]</code></li>\n<li>可以发现最终<code>dp[n] = t</code>，故可省去<code>dp[i]</code></li>\n<li>可以发现<code>b[]</code>是满足严单增的，故<code>a[i] &lt;= b[t]</code>时可用二分法查找</li>\n</ul>\n<p>时间复杂度：<code>O(nlogn)</code></p>\n<p>空间复杂度：<code>O(n)</code></p>\n<h3 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre><code class=\"cpp\">// cmp： &lt; 时为第一个大于key的； &lt;= 时为最后一个等于或第一个大于； 反之为相应的\ntemplate &lt;class Compare&gt;\nint32_t BinarySearch(const int32_t *a, const size_t &amp;n, const int32_t &amp;key,\n              const Compare &amp;cmp) {\n  size_t lp = 0, rp = n - 1, mp;\n  if (cmp(a[rp], key)) return n;\n\n  while (lp != rp) {\n    mp = (lp + rp) &gt;&gt; 1;\n    if (cmp(a[mp], key)) {\n      lp = mp + 1;\n    } else {\n      rp = mp;\n    }\n  }\n  return lp;\n}\n\n// cmp： &lt; 时为最长严单增子序列； &lt;= 时为最长单增子序列； 反之为相应的递减\ntemplate &lt;class Compare&gt;\nint32_t LongestMonotoneSubsequence(const int32_t *a, const size_t &amp;n,\n                                   const Compare &amp;cmp) {\n  if (n == 0) return 0;\n\n  int32_t res = 0, *b = new int32_t[n];\n  b[0] = a[0];\n\n  for (int i = 1; i &lt; n; ++i) {\n    if (cmp(b[res], a[i])) {\n      b[++res] = a[i];\n    } else {\n      b[BinarySearch(b, res, a[i], cmp)] = a[i];\n    }\n  }\n\n  delete[] b;\n  return res + 1;\n}\n</code></pre>\n"},{"title":"Minimum Spanning Tree","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2020-11-27T07:09:39.000Z","password":null,"summary":"最小生成树的Prim算法和Kruskal算法","_content":"\n## 最小生成树\n\n有`n`个城市，任意两个城市间修路要花钱，用`n-1`条路在最小开销的情况下连通所有城市，就是最小生成树\n\n[模板题：洛谷P3366 【模板】最小生成树](https://www.luogu.com.cn/problem/P3366)\n\n## Prim算法\n\n### 描述\n\n此算法又称作加点法\n\n1. 输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$\n2. 初始化：$V_{new} = ${$x$}，其中$x$为$V$的任一节点（起始点），$E_{new} = ${}\n3. 重复下列操作，直到$V_{new} = V$\n   1. 在$E$中选取权值最小的边$(u, v)$，其中$u∈V_{new}$且$v∉V_{new}$\n   2. 将$v$加入$V_{new}$，将$(u, v)加入E_{new}$\n4. 输出：使用$V_{new}和E_{new}来描述所得到的最小生成树$\n\n### 具体实现\n\n- 维护一个数组`vis[]`，令所有$u∈V_{new}$的`vis[u] = true`\n- 维护一个数组`dist[]`，使得`dist[v]`是以访问过的点为出点，v为入点的最小边长\n- 这样，在执行Prim算法3.1时，我们只需要寻找满足`vis[v] = false`和`dist[v]`最小的`v`\n- 每次找到`v`后，执行Prim算法3.2，令`vis[v] = 1`，并且`res += dist[v]`\n- 为了维护`dist[]`，每次找到`v`后，`v`变为访问过的出点，则更新以`v`为出点未访问过的为入点的最小边长\n\n- 空间复杂度：$O(V^2)$\n- 时间复杂度：$O(V^2)$\n\n### Prim模板\n\n```cpp\ntemplate<class T>\nint32_t Prim(const T &graph, const size_t &n) {\n  int32_t res = 0;\n  bool *vis = new bool[n + 1];\n  int32_t *dist = new int32_t[n + 1];\n\n  for (int i = 0; i <= n; ++i) {\n    vis[i] = 0;\n    dist[i] = kInf;\n  }\n\n  dist[1] = 0;\n  for (int i = 1; i <= n; ++i) {\n    int32_t x = 0;\n    for (int j = 1; j <= n; ++j)\n      if (!vis[j] && dist[j] < dist[x]) x = j;\n\n    vis[x] = true;\n    res += dist[x];\n\n    for (int j = 1; j <= n; ++j)\n      if (!vis[j] && dist[j] > graph[x][j]) dist[j] = graph[x][j];\n  }\n\n  delete[] dist;\n  delete[] vis;\n  return res;\n}\n\n```\n\n### 堆优化\n\n- 执行Prim算法3.1时，我们只需要寻找满足`vis[v] = false`和`dist[v]`最小的`v`\n- 根据`dist[]`的性质，可对其使用堆排序\n- 这样，在执行Prim算法3.1时，从堆中取出记录有入点和权值的边\n- 若入点已访问，则舍弃；否则，执行Prim算法3.2，令`vis[v] = 1`，并且`res += 权值`\n- 每次找到`v`后，`v`变为访问过的出点，则更新以`v`为出点未访问过的为入点的最小边长，将其放入堆中\n\n- 空间复杂度：$O(V^2)$\n- 时间复杂度：$O(ElogV)$（通常要使用邻接矩阵）\n\n### 堆优化Prim模板\n\n```cpp\nstruct Node {\n  int val, p;\n  inline bool operator<(const Node &other) const { return val > other.val; }\n};\n\ntemplate <class T>\nint32_t HeapPrim(const T &graph, const size_t &n) {\n  int32_t res = 0;\n  bool *vis = new bool[n + 1];\n  std::priority_queue<Node> heap;\n\n  for (int i = 1; i <= n; ++i) vis[i] = 0;\n\n  for (heap.push(Node{0, 1}); !heap.empty();) {\n    Node node = heap.top();\n    heap.pop();\n    if (vis[node.p]) continue;\n\n    vis[node.p] = true;\n    res += node.val;\n\n    for (int i = 1; i <= n; ++i) {\n      if (vis[i]) continue;\n      if (graph[node.p][i] != kInf) heap.push(Node{graph[node.p][i], i});\n    }\n  }\n\n  delete[] vis;\n  return res;\n}\n\n```\n\n## Kruskal算法\n\n### 描述\n\n此算法又称作加边法\n\n1. 输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$\n2. 初始化：新建图G，G中拥有原图中相同的节点，但没有边\n3. 重复以下步骤，知道G中所有节点都在同一个连同分量中\n   1. 取出权值最小的边\n   2. 如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中\n\n### 实现\n\n- 使用并查集来维护连通分量\n\n- 空间复杂度：$O(E+V)$\n- 时间复杂度：$O(ElogE)$\n\n### Kruskal模板\n\n```cpp\nclass DisjointSet {\n  int32_t *_;\n\n public:\n  DisjointSet(const int &n) : _(new int32_t[n + 1]) {\n    for (int i = 1; i <= n; ++i) _[i] = i;\n  }\n\n  ~DisjointSet() { delete[] _; }\n\n  int32_t Find(const int &x) { return x == _[x] ? x : _[x] = Find(_[x]); }\n  void Merge(const int &x, const int &y) { _[Find(x)] = _[Find(y)]; }\n};\n\nstruct Edge {\n  int src, dst, val;\n  inline bool operator<(const Edge &other) const { return val < other.val; }\n};\n\nint32_t Kruskal(Edge *edges, const size_t &n, const size_t &m) {\n  int32_t res = 0;\n  DisjointSet disjoint_set(n);\n\n  std::sort(edges + 1, edges + 1 + m);\n\n  for (int i = 1; i <= m; ++i) {\n    int32_t src = disjoint_set.Find(edges[i].src),\n            dst = disjoint_set.Find(edges[i].dst);\n    if (src == dst) continue;\n    disjoint_set.Merge(src, dst);\n    res += edges[i].val;\n  }\n\n  return res;\n}\n```\n\n## 总结\n\n- Kruskal易于理解，且容易实现\n- Prim算法在边密集的图中效率更高\n- Kruskal在边稀疏的图中中效率更高\n","source":"_posts/Minimum-Spanning-Tree.md","raw":"---\ntitle: Minimum Spanning Tree\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-11-27 15:09:39\npassword:\nsummary: 最小生成树的Prim算法和Kruskal算法\ntags:\n- 最小生成树\n- 图论\n- 堆排序\n- 并查集\ncategories:\n- 算法\n---\n\n## 最小生成树\n\n有`n`个城市，任意两个城市间修路要花钱，用`n-1`条路在最小开销的情况下连通所有城市，就是最小生成树\n\n[模板题：洛谷P3366 【模板】最小生成树](https://www.luogu.com.cn/problem/P3366)\n\n## Prim算法\n\n### 描述\n\n此算法又称作加点法\n\n1. 输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$\n2. 初始化：$V_{new} = ${$x$}，其中$x$为$V$的任一节点（起始点），$E_{new} = ${}\n3. 重复下列操作，直到$V_{new} = V$\n   1. 在$E$中选取权值最小的边$(u, v)$，其中$u∈V_{new}$且$v∉V_{new}$\n   2. 将$v$加入$V_{new}$，将$(u, v)加入E_{new}$\n4. 输出：使用$V_{new}和E_{new}来描述所得到的最小生成树$\n\n### 具体实现\n\n- 维护一个数组`vis[]`，令所有$u∈V_{new}$的`vis[u] = true`\n- 维护一个数组`dist[]`，使得`dist[v]`是以访问过的点为出点，v为入点的最小边长\n- 这样，在执行Prim算法3.1时，我们只需要寻找满足`vis[v] = false`和`dist[v]`最小的`v`\n- 每次找到`v`后，执行Prim算法3.2，令`vis[v] = 1`，并且`res += dist[v]`\n- 为了维护`dist[]`，每次找到`v`后，`v`变为访问过的出点，则更新以`v`为出点未访问过的为入点的最小边长\n\n- 空间复杂度：$O(V^2)$\n- 时间复杂度：$O(V^2)$\n\n### Prim模板\n\n```cpp\ntemplate<class T>\nint32_t Prim(const T &graph, const size_t &n) {\n  int32_t res = 0;\n  bool *vis = new bool[n + 1];\n  int32_t *dist = new int32_t[n + 1];\n\n  for (int i = 0; i <= n; ++i) {\n    vis[i] = 0;\n    dist[i] = kInf;\n  }\n\n  dist[1] = 0;\n  for (int i = 1; i <= n; ++i) {\n    int32_t x = 0;\n    for (int j = 1; j <= n; ++j)\n      if (!vis[j] && dist[j] < dist[x]) x = j;\n\n    vis[x] = true;\n    res += dist[x];\n\n    for (int j = 1; j <= n; ++j)\n      if (!vis[j] && dist[j] > graph[x][j]) dist[j] = graph[x][j];\n  }\n\n  delete[] dist;\n  delete[] vis;\n  return res;\n}\n\n```\n\n### 堆优化\n\n- 执行Prim算法3.1时，我们只需要寻找满足`vis[v] = false`和`dist[v]`最小的`v`\n- 根据`dist[]`的性质，可对其使用堆排序\n- 这样，在执行Prim算法3.1时，从堆中取出记录有入点和权值的边\n- 若入点已访问，则舍弃；否则，执行Prim算法3.2，令`vis[v] = 1`，并且`res += 权值`\n- 每次找到`v`后，`v`变为访问过的出点，则更新以`v`为出点未访问过的为入点的最小边长，将其放入堆中\n\n- 空间复杂度：$O(V^2)$\n- 时间复杂度：$O(ElogV)$（通常要使用邻接矩阵）\n\n### 堆优化Prim模板\n\n```cpp\nstruct Node {\n  int val, p;\n  inline bool operator<(const Node &other) const { return val > other.val; }\n};\n\ntemplate <class T>\nint32_t HeapPrim(const T &graph, const size_t &n) {\n  int32_t res = 0;\n  bool *vis = new bool[n + 1];\n  std::priority_queue<Node> heap;\n\n  for (int i = 1; i <= n; ++i) vis[i] = 0;\n\n  for (heap.push(Node{0, 1}); !heap.empty();) {\n    Node node = heap.top();\n    heap.pop();\n    if (vis[node.p]) continue;\n\n    vis[node.p] = true;\n    res += node.val;\n\n    for (int i = 1; i <= n; ++i) {\n      if (vis[i]) continue;\n      if (graph[node.p][i] != kInf) heap.push(Node{graph[node.p][i], i});\n    }\n  }\n\n  delete[] vis;\n  return res;\n}\n\n```\n\n## Kruskal算法\n\n### 描述\n\n此算法又称作加边法\n\n1. 输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$\n2. 初始化：新建图G，G中拥有原图中相同的节点，但没有边\n3. 重复以下步骤，知道G中所有节点都在同一个连同分量中\n   1. 取出权值最小的边\n   2. 如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中\n\n### 实现\n\n- 使用并查集来维护连通分量\n\n- 空间复杂度：$O(E+V)$\n- 时间复杂度：$O(ElogE)$\n\n### Kruskal模板\n\n```cpp\nclass DisjointSet {\n  int32_t *_;\n\n public:\n  DisjointSet(const int &n) : _(new int32_t[n + 1]) {\n    for (int i = 1; i <= n; ++i) _[i] = i;\n  }\n\n  ~DisjointSet() { delete[] _; }\n\n  int32_t Find(const int &x) { return x == _[x] ? x : _[x] = Find(_[x]); }\n  void Merge(const int &x, const int &y) { _[Find(x)] = _[Find(y)]; }\n};\n\nstruct Edge {\n  int src, dst, val;\n  inline bool operator<(const Edge &other) const { return val < other.val; }\n};\n\nint32_t Kruskal(Edge *edges, const size_t &n, const size_t &m) {\n  int32_t res = 0;\n  DisjointSet disjoint_set(n);\n\n  std::sort(edges + 1, edges + 1 + m);\n\n  for (int i = 1; i <= m; ++i) {\n    int32_t src = disjoint_set.Find(edges[i].src),\n            dst = disjoint_set.Find(edges[i].dst);\n    if (src == dst) continue;\n    disjoint_set.Merge(src, dst);\n    res += edges[i].val;\n  }\n\n  return res;\n}\n```\n\n## 总结\n\n- Kruskal易于理解，且容易实现\n- Prim算法在边密集的图中效率更高\n- Kruskal在边稀疏的图中中效率更高\n","slug":"Minimum-Spanning-Tree","published":1,"updated":"2021-04-25T07:11:17.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuouo000ezcl0kbhm677y","content":"<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p>有<code>n</code>个城市，任意两个城市间修路要花钱，用<code>n-1</code>条路在最小开销的情况下连通所有城市，就是最小生成树</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P3366\" target=\"_blank\" rel=\"noopener\">模板题：洛谷P3366 【模板】最小生成树</a></p>\n<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>此算法又称作加点法</p>\n<ol>\n<li>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$</li>\n<li>初始化：$V_{new} = ${$x$}，其中$x$为$V$的任一节点（起始点），$E_{new} = ${}</li>\n<li>重复下列操作，直到$V_{new} = V$<ol>\n<li>在$E$中选取权值最小的边$(u, v)$，其中$u∈V_{new}$且$v∉V_{new}$</li>\n<li>将$v$加入$V_{new}$，将$(u, v)加入E_{new}$</li>\n</ol>\n</li>\n<li>输出：使用$V_{new}和E_{new}来描述所得到的最小生成树$</li>\n</ol>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><ul>\n<li><p>维护一个数组<code>vis[]</code>，令所有$u∈V_{new}$的<code>vis[u] = true</code></p>\n</li>\n<li><p>维护一个数组<code>dist[]</code>，使得<code>dist[v]</code>是以访问过的点为出点，v为入点的最小边长</p>\n</li>\n<li><p>这样，在执行Prim算法3.1时，我们只需要寻找满足<code>vis[v] = false</code>和<code>dist[v]</code>最小的<code>v</code></p>\n</li>\n<li><p>每次找到<code>v</code>后，执行Prim算法3.2，令<code>vis[v] = 1</code>，并且<code>res += dist[v]</code></p>\n</li>\n<li><p>为了维护<code>dist[]</code>，每次找到<code>v</code>后，<code>v</code>变为访问过的出点，则更新以<code>v</code>为出点未访问过的为入点的最小边长</p>\n</li>\n<li><p>空间复杂度：$O(V^2)$</p>\n</li>\n<li><p>时间复杂度：$O(V^2)$</p>\n</li>\n</ul>\n<h3 id=\"Prim模板\"><a href=\"#Prim模板\" class=\"headerlink\" title=\"Prim模板\"></a>Prim模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\nint32_t <span class=\"token function\">Prim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  int32_t res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token operator\">*</span>vis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  int32_t <span class=\"token operator\">*</span>dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> int32_t<span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kInf<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  dist<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    int32_t x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> x <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\n    vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> graph<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vis<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"堆优化\"><a href=\"#堆优化\" class=\"headerlink\" title=\"堆优化\"></a>堆优化</h3><ul>\n<li><p>执行Prim算法3.1时，我们只需要寻找满足<code>vis[v] = false</code>和<code>dist[v]</code>最小的<code>v</code></p>\n</li>\n<li><p>根据<code>dist[]</code>的性质，可对其使用堆排序</p>\n</li>\n<li><p>这样，在执行Prim算法3.1时，从堆中取出记录有入点和权值的边</p>\n</li>\n<li><p>若入点已访问，则舍弃；否则，执行Prim算法3.2，令<code>vis[v] = 1</code>，并且<code>res += 权值</code></p>\n</li>\n<li><p>每次找到<code>v</code>后，<code>v</code>变为访问过的出点，则更新以<code>v</code>为出点未访问过的为入点的最小边长，将其放入堆中</p>\n</li>\n<li><p>空间复杂度：$O(V^2)$</p>\n</li>\n<li><p>时间复杂度：$O(ElogV)$（通常要使用邻接矩阵）</p>\n</li>\n</ul>\n<h3 id=\"堆优化Prim模板\"><a href=\"#堆优化Prim模板\" class=\"headerlink\" title=\"堆优化Prim模板\"></a>堆优化Prim模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> Node <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Node <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> val <span class=\"token operator\">></span> other<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\nint32_t <span class=\"token function\">HeapPrim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  int32_t res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token operator\">*</span>vis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>priority_queue<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span> heap<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node node <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    vis<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> kInf<span class=\"token punctuation\">)</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">{</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vis<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>此算法又称作加边法</p>\n<ol>\n<li>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$</li>\n<li>初始化：新建图G，G中拥有原图中相同的节点，但没有边</li>\n<li>重复以下步骤，知道G中所有节点都在同一个连同分量中<ol>\n<li>取出权值最小的边</li>\n<li>如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li><p>使用并查集来维护连通分量</p>\n</li>\n<li><p>空间复杂度：$O(E+V)$</p>\n</li>\n<li><p>时间复杂度：$O(ElogE)$</p>\n</li>\n</ul>\n<h3 id=\"Kruskal模板\"><a href=\"#Kruskal模板\" class=\"headerlink\" title=\"Kruskal模板\"></a>Kruskal模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DisjointSet</span> <span class=\"token punctuation\">{</span>\n  int32_t <span class=\"token operator\">*</span>_<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">DisjointSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> int32_t<span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> _<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">~</span><span class=\"token function\">DisjointSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  int32_t <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">==</span> _<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> _<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> _<span class=\"token punctuation\">[</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _<span class=\"token punctuation\">[</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Edge <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Edge <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> val <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nint32_t <span class=\"token function\">Kruskal</span><span class=\"token punctuation\">(</span>Edge <span class=\"token operator\">*</span>edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  int32_t res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  DisjointSet <span class=\"token function\">disjoint_set</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>edges <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> edges <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    int32_t src <span class=\"token operator\">=</span> disjoint_set<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            dst <span class=\"token operator\">=</span> disjoint_set<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> dst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    disjoint_set<span class=\"token punctuation\">.</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Kruskal易于理解，且容易实现</li>\n<li>Prim算法在边密集的图中效率更高</li>\n<li>Kruskal在边稀疏的图中中效率更高</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p>有<code>n</code>个城市，任意两个城市间修路要花钱，用<code>n-1</code>条路在最小开销的情况下连通所有城市，就是最小生成树</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P3366\" target=\"_blank\" rel=\"noopener\">模板题：洛谷P3366 【模板】最小生成树</a></p>\n<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>此算法又称作加点法</p>\n<ol>\n<li>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$</li>\n<li>初始化：$V_{new} = ${$x$}，其中$x$为$V$的任一节点（起始点），$E_{new} = ${}</li>\n<li>重复下列操作，直到$V_{new} = V$<ol>\n<li>在$E$中选取权值最小的边$(u, v)$，其中$u∈V_{new}$且$v∉V_{new}$</li>\n<li>将$v$加入$V_{new}$，将$(u, v)加入E_{new}$</li>\n</ol>\n</li>\n<li>输出：使用$V_{new}和E_{new}来描述所得到的最小生成树$</li>\n</ol>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><ul>\n<li><p>维护一个数组<code>vis[]</code>，令所有$u∈V_{new}$的<code>vis[u] = true</code></p>\n</li>\n<li><p>维护一个数组<code>dist[]</code>，使得<code>dist[v]</code>是以访问过的点为出点，v为入点的最小边长</p>\n</li>\n<li><p>这样，在执行Prim算法3.1时，我们只需要寻找满足<code>vis[v] = false</code>和<code>dist[v]</code>最小的<code>v</code></p>\n</li>\n<li><p>每次找到<code>v</code>后，执行Prim算法3.2，令<code>vis[v] = 1</code>，并且<code>res += dist[v]</code></p>\n</li>\n<li><p>为了维护<code>dist[]</code>，每次找到<code>v</code>后，<code>v</code>变为访问过的出点，则更新以<code>v</code>为出点未访问过的为入点的最小边长</p>\n</li>\n<li><p>空间复杂度：$O(V^2)$</p>\n</li>\n<li><p>时间复杂度：$O(V^2)$</p>\n</li>\n</ul>\n<h3 id=\"Prim模板\"><a href=\"#Prim模板\" class=\"headerlink\" title=\"Prim模板\"></a>Prim模板</h3><pre><code class=\"cpp\">template&lt;class T&gt;\nint32_t Prim(const T &amp;graph, const size_t &amp;n) {\n  int32_t res = 0;\n  bool *vis = new bool[n + 1];\n  int32_t *dist = new int32_t[n + 1];\n\n  for (int i = 0; i &lt;= n; ++i) {\n    vis[i] = 0;\n    dist[i] = kInf;\n  }\n\n  dist[1] = 0;\n  for (int i = 1; i &lt;= n; ++i) {\n    int32_t x = 0;\n    for (int j = 1; j &lt;= n; ++j)\n      if (!vis[j] &amp;&amp; dist[j] &lt; dist[x]) x = j;\n\n    vis[x] = true;\n    res += dist[x];\n\n    for (int j = 1; j &lt;= n; ++j)\n      if (!vis[j] &amp;&amp; dist[j] &gt; graph[x][j]) dist[j] = graph[x][j];\n  }\n\n  delete[] dist;\n  delete[] vis;\n  return res;\n}\n</code></pre>\n<h3 id=\"堆优化\"><a href=\"#堆优化\" class=\"headerlink\" title=\"堆优化\"></a>堆优化</h3><ul>\n<li><p>执行Prim算法3.1时，我们只需要寻找满足<code>vis[v] = false</code>和<code>dist[v]</code>最小的<code>v</code></p>\n</li>\n<li><p>根据<code>dist[]</code>的性质，可对其使用堆排序</p>\n</li>\n<li><p>这样，在执行Prim算法3.1时，从堆中取出记录有入点和权值的边</p>\n</li>\n<li><p>若入点已访问，则舍弃；否则，执行Prim算法3.2，令<code>vis[v] = 1</code>，并且<code>res += 权值</code></p>\n</li>\n<li><p>每次找到<code>v</code>后，<code>v</code>变为访问过的出点，则更新以<code>v</code>为出点未访问过的为入点的最小边长，将其放入堆中</p>\n</li>\n<li><p>空间复杂度：$O(V^2)$</p>\n</li>\n<li><p>时间复杂度：$O(ElogV)$（通常要使用邻接矩阵）</p>\n</li>\n</ul>\n<h3 id=\"堆优化Prim模板\"><a href=\"#堆优化Prim模板\" class=\"headerlink\" title=\"堆优化Prim模板\"></a>堆优化Prim模板</h3><pre><code class=\"cpp\">struct Node {\n  int val, p;\n  inline bool operator&lt;(const Node &amp;other) const { return val &gt; other.val; }\n};\n\ntemplate &lt;class T&gt;\nint32_t HeapPrim(const T &amp;graph, const size_t &amp;n) {\n  int32_t res = 0;\n  bool *vis = new bool[n + 1];\n  std::priority_queue&lt;Node&gt; heap;\n\n  for (int i = 1; i &lt;= n; ++i) vis[i] = 0;\n\n  for (heap.push(Node{0, 1}); !heap.empty();) {\n    Node node = heap.top();\n    heap.pop();\n    if (vis[node.p]) continue;\n\n    vis[node.p] = true;\n    res += node.val;\n\n    for (int i = 1; i &lt;= n; ++i) {\n      if (vis[i]) continue;\n      if (graph[node.p][i] != kInf) heap.push(Node{graph[node.p][i], i});\n    }\n  }\n\n  delete[] vis;\n  return res;\n}\n</code></pre>\n<h2 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>此算法又称作加边法</p>\n<ol>\n<li>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$</li>\n<li>初始化：新建图G，G中拥有原图中相同的节点，但没有边</li>\n<li>重复以下步骤，知道G中所有节点都在同一个连同分量中<ol>\n<li>取出权值最小的边</li>\n<li>如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li><p>使用并查集来维护连通分量</p>\n</li>\n<li><p>空间复杂度：$O(E+V)$</p>\n</li>\n<li><p>时间复杂度：$O(ElogE)$</p>\n</li>\n</ul>\n<h3 id=\"Kruskal模板\"><a href=\"#Kruskal模板\" class=\"headerlink\" title=\"Kruskal模板\"></a>Kruskal模板</h3><pre><code class=\"cpp\">class DisjointSet {\n  int32_t *_;\n\n public:\n  DisjointSet(const int &amp;n) : _(new int32_t[n + 1]) {\n    for (int i = 1; i &lt;= n; ++i) _[i] = i;\n  }\n\n  ~DisjointSet() { delete[] _; }\n\n  int32_t Find(const int &amp;x) { return x == _[x] ? x : _[x] = Find(_[x]); }\n  void Merge(const int &amp;x, const int &amp;y) { _[Find(x)] = _[Find(y)]; }\n};\n\nstruct Edge {\n  int src, dst, val;\n  inline bool operator&lt;(const Edge &amp;other) const { return val &lt; other.val; }\n};\n\nint32_t Kruskal(Edge *edges, const size_t &amp;n, const size_t &amp;m) {\n  int32_t res = 0;\n  DisjointSet disjoint_set(n);\n\n  std::sort(edges + 1, edges + 1 + m);\n\n  for (int i = 1; i &lt;= m; ++i) {\n    int32_t src = disjoint_set.Find(edges[i].src),\n            dst = disjoint_set.Find(edges[i].dst);\n    if (src == dst) continue;\n    disjoint_set.Merge(src, dst);\n    res += edges[i].val;\n  }\n\n  return res;\n}</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Kruskal易于理解，且容易实现</li>\n<li>Prim算法在边密集的图中效率更高</li>\n<li>Kruskal在边稀疏的图中中效率更高</li>\n</ul>\n"},{"title":"Knapsack Problem","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2020-12-14T12:19:46.000Z","password":null,"summary":"背包问题","_content":"\n## 01背包\n\n### 从搜索说起\n\n#### 简化问题\n\n> 考虑这样一个问题：有一个背包和有$N$个物品，单价为$V_i$（**可负**），求装进背包的最大价值\n\n- 递归的重复逻辑：对于任一物品，有选与不选两种情况；而解是这两种情况中的大者\n- 递归的边界：没有更多物品了\n\n```cpp\nint Dfs(const int &x) { // 第 x 个物品\n  if (x == 0) return 0;  // x = 0 不是物品\n  return std::max(Dfs(x - 1), Dfs(x - 1) + v[i]); // 选与不选的大者为解\n}\n// Call: Dfs(N);\n```\n\n#### 暴力01背包\n\n> 再把这个问题升级，加入一个限制条件：背包最大负重为$W_{max}$，以及每个物品都有一定重量\n> 也就是说：有一个最大负重为$W_{max}$的背包，和$N$**个**物品，单重为$W_i$、单价为$V_i$，求装进背包的最大价值\n\n- 加入这个限制条件后，递归函数需要一个额外的参数：剩余的背包负重，以判断是否放得下这个物品\n\n```cpp\nint Dfs(const int &x, const int &y) { // 剩余的背包负重为 y\n  if (x == 0) return 0;\n  if (y < w[x]) return Dfs(x - 1, y); // 放不下了，看看下一个\n  return std::max(Dfs(x - 1, y), Dfs(x - 1, y - w[x]) + w[x]);\n}\n// call: Dfs(N, Wmax)\n```\n\n这样就可以解01背包了，但是，算法的时间复杂度是$O(2^n)$（深度为n的二叉树），难以接受\n\n#### 优化：记忆化+贪心\n\n- 深度为n的二叉树中，可以用一个3元组记录每个节点：`(x, y, res)`，其中`x, y`意义与`Dfs(x, y)`相同，决定了以此节点为根的子树的结构；`res`则为其解。\n- 利用贪心可以进行剪枝：若有3元组`t1, t2`，且`t1.x = t2.x, t1.x = t2.y`，则它们的子树结构相同。而此时抛弃`res`小的节点而选择大者是不会影响根节点的结果值的。\n- 故可以用一个二维数组`dp[x][y] = res`记录节点`(x, y, res)`，并维护`res`最大\n\n```cpp\n// memset(dp, 0xff, sizeof(dp));\nint Dfs(const int &x, const int &y) { // 剩余的背包负重为 y\n  if (dp[x][y] >= 0) return dp[x][y];\n  if (x == 0) return dp[x][y] = 0;\n  if (y < w[x]) return dp[x][y] = Dfs(x - 1, y); // 放不下了，看看下一个\n  return dp[x][y] = std::max(Dfs(x - 1, y), Dfs(x - 1, y - w[x]) + w[x]);\n}\n// call: Dfs(N, Wmax)\n```\n\n时间复杂度是$O(nW)$（对于每个`x, y`，`dp[x][y]`只会进入递归一次（当其值为初始时））\n\n### 动态规划的01背包\n\n经过优化后的算法，其解不再是一颗二叉树了，剪枝之后成为一个表；而用循环的写法更加简单直观，可以改写成以下的形式：\n\n```cpp\n// const int kInf = -0x3f3f3f3f;\nint SolveZeroOneKnapsack() {\n  for (int i = 0; i <= Wmax; ++i) dp[0][i] = -kInf;\n  for (int i = 1; i <= N; ++i)\n    for (int j = 0; j <= Wmax; ++j)\n      if (j < w[i]) {\n        dp[i][j] = dp[i - 1][j];\n      } else {\n        dp[i][j] = std::max(dp[i - 1][j], dp[i - 1][j - w[i]] + w[i]); \n      }\n  return dp[N][Wmax];\n}\n```\n\n这就是所谓的**动态规划**了，其与递归的不同也可以直观的看出来：**递归是从大到小的，而动态规划是从小到大的**（递归在填表时也是从小到大的）。\n\n$dp[i][j]=Max(dp[i-1][j],dp[i-1][j-w[i]]+v[i]);$被称作**状态转移方程，负责从小推大**\n\n小的状态有二：其中$dp[i-1][j]$对应不选第$i$件，$dp[i-1][j-w[i]]+v[i]$对应选的情况\n\n#### 记忆化+贪心与动态规划的关系\n\n能采用动态规划解决的问题，一般要具有三个性质：[来源](https://zhuanlan.zhihu.com/p/126361983)\n> 1. 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n> 2. 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。\n> 3. 有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）\n\n分析01背包的记忆化搜索+贪心算法与以上3点的关系，可以发现：\n> 1. 最优化原理由贪心满足了\n> 2. 搜索过程中的类似**后续遍历**的顺序，决定了状态`x-1`在状态`x`之前确定，并不再改变，即满足无后效性\n> 3. 显然\n\n#### 压缩数组\n\n分析状态转移方程，发现：\n- 状态$(i,j)$仅由$(i-1,j),\\ (i-1,j-w[i])$转移得来\n- 故处于状态$(i,j)$时，可以省去$(i-1,x)(x>j)$，从而降低空间复杂度\n- 使用二维数组实现时，$j$的顺序无关紧要\n- 使用一维数组实现时，$j$的顺序变得重要了：省去的是$(i-1,x)(x>j)$，**故应倒序**\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = Wmax; j >= w[i]; --j)\n    dp[j] = Max(dp[j], dp[j - w[i]] + v[i]);\n```\n\n#### 满载限制\n\n添加一个限制条件：只有装满背包的方案才是合法的，装不满输出`-1`\n\n解法是：初始化时`dp[i] = -kInf, dp[0] = 0`，这样，最终DP完成后判断`dp[Wmax] < 0`即可\n\n## 完全背包\n\n> 有一个最大负重为$W_{max}$的背包，和$N$**种**物品，**每种无限个**，单重为$W_i$、单价为$V_i$，求装进背包的最大价值\n\n有状态转移方程：$dp[i][j]=Max(dp[i-1][j],dp[i][j-w[i]]+v[i]);$\n\n其中$dp[i-1][j]$对应不选第$i$件，$dp[i][j-w[i]]+v[i]$对应选的情况\n\n因为**每种无限个**的条件，又有$dp[i][x] (x<j)$由当前种类的选择转移而来，故应是$dp[i]$而非$dp[i-1]$\n\n与01背包相同，仍可进行空间压缩，此时省去的是$(i-1,x)(x<j)$，**故应正序**\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = w[i]; j <= Wmax ++j)\n    dp[j] = Max(dp[j], dp[j - w[i]] + v[i]);\n```\n\n## 多重背包\n\n> 有一个最大负重为$W_{max}$的背包，和$N$种物品，**每种个数为$C_i$**、单重为$W_i$、单价为$V_i$，求装进背包的最大价值\n\n### 朴素算法\n\n对01背包的原理略有理解之后，可以这样写：变为共有$\\sum_{i=1}^{N}C[i]$个物品的01背包：\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = 1; j <= C[i]; ++j)\n    for (int k = Wmax; k >= W[i]; --k) dp[k] = Max(dp[k], dp[k - W[i]] + V[i]);\n```\n\n也可以这样理解：对于每种物品，枚举选取几个，视作单价=单价×个数，重量=重量x个数的单个物品，即变成01背包问题：\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = 1; j <= C[i]; ++j) {\n    int w = j * W[i], v = j * V[i];\n    for (int k = Wmax; k >= w; --k) dp[k] = Max(dp[k], dp[k - w] + v);\n  }\n```\n\n以上两种的时间复杂度，都为$O(W\\sum_{i=1}^{N}C[i])$，第二种常数略低一点\n\n### 二进制优化\n\n当$C[i]$增大时，上面的算法时间复杂度可能会很高，有没有什么优化空间？\n\n对于第一种做法：选取了第一种的第一件与第二件，与选取了第一种的第二件和第三件，这两种状态是相同的\n\n> 例如：对于$W_{max}=3, C[1]=3,\\ W[1]=1, V[1]=1$\n> 选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$\n> 选$2$个：$dp[3]=dp[3-1]+1=2,\\ dp[2]=dp[2-1]+1=2,\\ dp[1]=dp[1-1]+1=1$\n> 选$3$个：$dp[3]=dp[3-1]+1=3,\\ dp[2]=dp[2-1]+1=2,\\ dp[2]=dp[1-1]+1=1$\n\n对于第二种做法：当依次选取$x$、$y$个、和$z$个时，若有$z=x+y$，显然在完成$x$的基础上选取$y$时，会经过状态$x+y$即$z$，那么状态$z$**被访问了不止一次，这就是可优化之处**\n\n> 例如：对于$W_{max}=3,\\ C[1]=3,\\ W[1]=1,\\ V[1]=1$\n> 选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$\n> 选$2$个：**$dp[3]=dp[3-2]+2=3$**$,\\ dp[2]=dp[2-2]+2=2$\n> 选$3$个：**$dp[3]=dp[3-3]+3=3$**\n\n**想要优化，就要让每个状态被访问的次数尽可能的少**，考虑第二种做法，有没有办法让每个$z=x+y$，被唯一的一对$x<y$表示呢？$答案就是二进制$：\n\n> 对于任意$x<=2^n(n∈N^+)$，有$x=\\sum_{i=0}^{n-1}p_i2^i(p_i=1\\ or\\ 0)$，也就是说$x$只能被每个$2^i$相加至多$1$次得到\n\n那么考虑$C[i]=2^n$的情况：将$C[i]$拆分成$2^0,2^1...2^{n-1}$件，就能让每个状态只被访问一次了\n\n而$C[i]$不是$2$的整数次幂时怎么办？在**末尾**加上非整数部分即可（**注意一定要末尾，否则会导致某些状态被重复访问**）\n\n时间复杂度，$O(W\\sum_{i=1}^{N}logC[i])$\n\n#### 模板\n\n[模板题：洛谷P1776 宝物筛选](https://www.luogu.com.cn/problem/P1776)\n\n```cpp\n#include <iostream>\n\nconst int kN = 1e5 + 1;\nint N, Wmax, V[kN], W[kN], C[kN];\nint dp[kN];\n\ninline size_t HighBit(size_t x) {\n  for (size_t i = 1; i < sizeof(x) << 3; i <<= 1) x |= (x >> i);\n  return (x >> 1) + 1;\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> N >> Wmax;\n  for (int i = 1; i <= N; ++i) std::cin >> V[i] >> W[i] >> C[i];\n  for (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n  for (int i = 1; i <= N; ++i) {\n    int hb = HighBit(C[i] + 1);\n    int remainder = C[i] + 1 - hb;\n    for (int j = 1; j < hb; j <<= 1) {\n      int w = j * W[i], v = j * V[i];\n      for (int k = Wmax; k >= w; --k) dp[k] = std::max(dp[k], dp[k - w] + v);\n    }\n    if (remainder) {\n      int w = remainder * W[i], v = remainder * V[i];\n      for (int k = Wmax; k >= w; --k) dp[k] = std::max(dp[k], dp[k - w] + v);\n    }\n  }\n\n  std::cout << dp[Wmax] << \"\\n\";\n  return 0;\n}\n\n```\n\n> 为了实现了这样的效果： \n> 14 = 7 + (7)\n> 15 = 15 + (0)\n> 16 = 15 + (1)\n> 17 = 15 + (2)\n> 使用`HighBit(x)`函数取出`x`的二进制最高位，其原理是：将最高位1扩散到低位，之后右移1位再加1进位即可\n\n## 分组背包\n\n> 有一个最大负重为$W_{max}$的背包，和$N$**件**物品，单重为$W_i$、单价为$V_i$；同时这些物品被划分为多组，**同组的最多选一个**，求装进背包的最大价值\n\n就是变成了将**组**视作01背包中的**个**，同时这些**个**的重量和价值不一定相等\n\n[模板题：洛谷P1757 通天之分组背包](https://www.luogu.com.cn/problem/P1757)\n\n```cpp\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\nfor (const auto &i : G) // G是组的集合，i是一个组\n  for (int j = Wmax; j >= 0; --j)\n    for (const auto &k : i) // i是一个组，k是组中物品的索引\n      if (j >= W[k]) dp[j] = Max(dp[j], dp[j - W[k]] + V[k]);\n```\n\n### 贪心优化\n\n显然，对于同组的物品：\n- 当重量相同时，选择价值最大的总是最好的\n- 当价值相同时，选择重量最小的总是最好的\n  ","source":"_posts/Knapsack-Problem.md","raw":"---\ntitle: Knapsack Problem\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-12-14 20:19:46\npassword:\nsummary: 背包问题\ntags:\n- 动态规划\n- 背包DP\ncategories:\n- 算法\n---\n\n## 01背包\n\n### 从搜索说起\n\n#### 简化问题\n\n> 考虑这样一个问题：有一个背包和有$N$个物品，单价为$V_i$（**可负**），求装进背包的最大价值\n\n- 递归的重复逻辑：对于任一物品，有选与不选两种情况；而解是这两种情况中的大者\n- 递归的边界：没有更多物品了\n\n```cpp\nint Dfs(const int &x) { // 第 x 个物品\n  if (x == 0) return 0;  // x = 0 不是物品\n  return std::max(Dfs(x - 1), Dfs(x - 1) + v[i]); // 选与不选的大者为解\n}\n// Call: Dfs(N);\n```\n\n#### 暴力01背包\n\n> 再把这个问题升级，加入一个限制条件：背包最大负重为$W_{max}$，以及每个物品都有一定重量\n> 也就是说：有一个最大负重为$W_{max}$的背包，和$N$**个**物品，单重为$W_i$、单价为$V_i$，求装进背包的最大价值\n\n- 加入这个限制条件后，递归函数需要一个额外的参数：剩余的背包负重，以判断是否放得下这个物品\n\n```cpp\nint Dfs(const int &x, const int &y) { // 剩余的背包负重为 y\n  if (x == 0) return 0;\n  if (y < w[x]) return Dfs(x - 1, y); // 放不下了，看看下一个\n  return std::max(Dfs(x - 1, y), Dfs(x - 1, y - w[x]) + w[x]);\n}\n// call: Dfs(N, Wmax)\n```\n\n这样就可以解01背包了，但是，算法的时间复杂度是$O(2^n)$（深度为n的二叉树），难以接受\n\n#### 优化：记忆化+贪心\n\n- 深度为n的二叉树中，可以用一个3元组记录每个节点：`(x, y, res)`，其中`x, y`意义与`Dfs(x, y)`相同，决定了以此节点为根的子树的结构；`res`则为其解。\n- 利用贪心可以进行剪枝：若有3元组`t1, t2`，且`t1.x = t2.x, t1.x = t2.y`，则它们的子树结构相同。而此时抛弃`res`小的节点而选择大者是不会影响根节点的结果值的。\n- 故可以用一个二维数组`dp[x][y] = res`记录节点`(x, y, res)`，并维护`res`最大\n\n```cpp\n// memset(dp, 0xff, sizeof(dp));\nint Dfs(const int &x, const int &y) { // 剩余的背包负重为 y\n  if (dp[x][y] >= 0) return dp[x][y];\n  if (x == 0) return dp[x][y] = 0;\n  if (y < w[x]) return dp[x][y] = Dfs(x - 1, y); // 放不下了，看看下一个\n  return dp[x][y] = std::max(Dfs(x - 1, y), Dfs(x - 1, y - w[x]) + w[x]);\n}\n// call: Dfs(N, Wmax)\n```\n\n时间复杂度是$O(nW)$（对于每个`x, y`，`dp[x][y]`只会进入递归一次（当其值为初始时））\n\n### 动态规划的01背包\n\n经过优化后的算法，其解不再是一颗二叉树了，剪枝之后成为一个表；而用循环的写法更加简单直观，可以改写成以下的形式：\n\n```cpp\n// const int kInf = -0x3f3f3f3f;\nint SolveZeroOneKnapsack() {\n  for (int i = 0; i <= Wmax; ++i) dp[0][i] = -kInf;\n  for (int i = 1; i <= N; ++i)\n    for (int j = 0; j <= Wmax; ++j)\n      if (j < w[i]) {\n        dp[i][j] = dp[i - 1][j];\n      } else {\n        dp[i][j] = std::max(dp[i - 1][j], dp[i - 1][j - w[i]] + w[i]); \n      }\n  return dp[N][Wmax];\n}\n```\n\n这就是所谓的**动态规划**了，其与递归的不同也可以直观的看出来：**递归是从大到小的，而动态规划是从小到大的**（递归在填表时也是从小到大的）。\n\n$dp[i][j]=Max(dp[i-1][j],dp[i-1][j-w[i]]+v[i]);$被称作**状态转移方程，负责从小推大**\n\n小的状态有二：其中$dp[i-1][j]$对应不选第$i$件，$dp[i-1][j-w[i]]+v[i]$对应选的情况\n\n#### 记忆化+贪心与动态规划的关系\n\n能采用动态规划解决的问题，一般要具有三个性质：[来源](https://zhuanlan.zhihu.com/p/126361983)\n> 1. 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n> 2. 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。\n> 3. 有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）\n\n分析01背包的记忆化搜索+贪心算法与以上3点的关系，可以发现：\n> 1. 最优化原理由贪心满足了\n> 2. 搜索过程中的类似**后续遍历**的顺序，决定了状态`x-1`在状态`x`之前确定，并不再改变，即满足无后效性\n> 3. 显然\n\n#### 压缩数组\n\n分析状态转移方程，发现：\n- 状态$(i,j)$仅由$(i-1,j),\\ (i-1,j-w[i])$转移得来\n- 故处于状态$(i,j)$时，可以省去$(i-1,x)(x>j)$，从而降低空间复杂度\n- 使用二维数组实现时，$j$的顺序无关紧要\n- 使用一维数组实现时，$j$的顺序变得重要了：省去的是$(i-1,x)(x>j)$，**故应倒序**\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = Wmax; j >= w[i]; --j)\n    dp[j] = Max(dp[j], dp[j - w[i]] + v[i]);\n```\n\n#### 满载限制\n\n添加一个限制条件：只有装满背包的方案才是合法的，装不满输出`-1`\n\n解法是：初始化时`dp[i] = -kInf, dp[0] = 0`，这样，最终DP完成后判断`dp[Wmax] < 0`即可\n\n## 完全背包\n\n> 有一个最大负重为$W_{max}$的背包，和$N$**种**物品，**每种无限个**，单重为$W_i$、单价为$V_i$，求装进背包的最大价值\n\n有状态转移方程：$dp[i][j]=Max(dp[i-1][j],dp[i][j-w[i]]+v[i]);$\n\n其中$dp[i-1][j]$对应不选第$i$件，$dp[i][j-w[i]]+v[i]$对应选的情况\n\n因为**每种无限个**的条件，又有$dp[i][x] (x<j)$由当前种类的选择转移而来，故应是$dp[i]$而非$dp[i-1]$\n\n与01背包相同，仍可进行空间压缩，此时省去的是$(i-1,x)(x<j)$，**故应正序**\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = w[i]; j <= Wmax ++j)\n    dp[j] = Max(dp[j], dp[j - w[i]] + v[i]);\n```\n\n## 多重背包\n\n> 有一个最大负重为$W_{max}$的背包，和$N$种物品，**每种个数为$C_i$**、单重为$W_i$、单价为$V_i$，求装进背包的最大价值\n\n### 朴素算法\n\n对01背包的原理略有理解之后，可以这样写：变为共有$\\sum_{i=1}^{N}C[i]$个物品的01背包：\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = 1; j <= C[i]; ++j)\n    for (int k = Wmax; k >= W[i]; --k) dp[k] = Max(dp[k], dp[k - W[i]] + V[i]);\n```\n\n也可以这样理解：对于每种物品，枚举选取几个，视作单价=单价×个数，重量=重量x个数的单个物品，即变成01背包问题：\n\n```cpp\n// Init\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i <= N; ++i)\n  for (int j = 1; j <= C[i]; ++j) {\n    int w = j * W[i], v = j * V[i];\n    for (int k = Wmax; k >= w; --k) dp[k] = Max(dp[k], dp[k - w] + v);\n  }\n```\n\n以上两种的时间复杂度，都为$O(W\\sum_{i=1}^{N}C[i])$，第二种常数略低一点\n\n### 二进制优化\n\n当$C[i]$增大时，上面的算法时间复杂度可能会很高，有没有什么优化空间？\n\n对于第一种做法：选取了第一种的第一件与第二件，与选取了第一种的第二件和第三件，这两种状态是相同的\n\n> 例如：对于$W_{max}=3, C[1]=3,\\ W[1]=1, V[1]=1$\n> 选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$\n> 选$2$个：$dp[3]=dp[3-1]+1=2,\\ dp[2]=dp[2-1]+1=2,\\ dp[1]=dp[1-1]+1=1$\n> 选$3$个：$dp[3]=dp[3-1]+1=3,\\ dp[2]=dp[2-1]+1=2,\\ dp[2]=dp[1-1]+1=1$\n\n对于第二种做法：当依次选取$x$、$y$个、和$z$个时，若有$z=x+y$，显然在完成$x$的基础上选取$y$时，会经过状态$x+y$即$z$，那么状态$z$**被访问了不止一次，这就是可优化之处**\n\n> 例如：对于$W_{max}=3,\\ C[1]=3,\\ W[1]=1,\\ V[1]=1$\n> 选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$\n> 选$2$个：**$dp[3]=dp[3-2]+2=3$**$,\\ dp[2]=dp[2-2]+2=2$\n> 选$3$个：**$dp[3]=dp[3-3]+3=3$**\n\n**想要优化，就要让每个状态被访问的次数尽可能的少**，考虑第二种做法，有没有办法让每个$z=x+y$，被唯一的一对$x<y$表示呢？$答案就是二进制$：\n\n> 对于任意$x<=2^n(n∈N^+)$，有$x=\\sum_{i=0}^{n-1}p_i2^i(p_i=1\\ or\\ 0)$，也就是说$x$只能被每个$2^i$相加至多$1$次得到\n\n那么考虑$C[i]=2^n$的情况：将$C[i]$拆分成$2^0,2^1...2^{n-1}$件，就能让每个状态只被访问一次了\n\n而$C[i]$不是$2$的整数次幂时怎么办？在**末尾**加上非整数部分即可（**注意一定要末尾，否则会导致某些状态被重复访问**）\n\n时间复杂度，$O(W\\sum_{i=1}^{N}logC[i])$\n\n#### 模板\n\n[模板题：洛谷P1776 宝物筛选](https://www.luogu.com.cn/problem/P1776)\n\n```cpp\n#include <iostream>\n\nconst int kN = 1e5 + 1;\nint N, Wmax, V[kN], W[kN], C[kN];\nint dp[kN];\n\ninline size_t HighBit(size_t x) {\n  for (size_t i = 1; i < sizeof(x) << 3; i <<= 1) x |= (x >> i);\n  return (x >> 1) + 1;\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> N >> Wmax;\n  for (int i = 1; i <= N; ++i) std::cin >> V[i] >> W[i] >> C[i];\n  for (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\n  for (int i = 1; i <= N; ++i) {\n    int hb = HighBit(C[i] + 1);\n    int remainder = C[i] + 1 - hb;\n    for (int j = 1; j < hb; j <<= 1) {\n      int w = j * W[i], v = j * V[i];\n      for (int k = Wmax; k >= w; --k) dp[k] = std::max(dp[k], dp[k - w] + v);\n    }\n    if (remainder) {\n      int w = remainder * W[i], v = remainder * V[i];\n      for (int k = Wmax; k >= w; --k) dp[k] = std::max(dp[k], dp[k - w] + v);\n    }\n  }\n\n  std::cout << dp[Wmax] << \"\\n\";\n  return 0;\n}\n\n```\n\n> 为了实现了这样的效果： \n> 14 = 7 + (7)\n> 15 = 15 + (0)\n> 16 = 15 + (1)\n> 17 = 15 + (2)\n> 使用`HighBit(x)`函数取出`x`的二进制最高位，其原理是：将最高位1扩散到低位，之后右移1位再加1进位即可\n\n## 分组背包\n\n> 有一个最大负重为$W_{max}$的背包，和$N$**件**物品，单重为$W_i$、单价为$V_i$；同时这些物品被划分为多组，**同组的最多选一个**，求装进背包的最大价值\n\n就是变成了将**组**视作01背包中的**个**，同时这些**个**的重量和价值不一定相等\n\n[模板题：洛谷P1757 通天之分组背包](https://www.luogu.com.cn/problem/P1757)\n\n```cpp\nfor (int i = 0; i <= Wmax; ++i) dp[i] = 0;\n\nfor (const auto &i : G) // G是组的集合，i是一个组\n  for (int j = Wmax; j >= 0; --j)\n    for (const auto &k : i) // i是一个组，k是组中物品的索引\n      if (j >= W[k]) dp[j] = Max(dp[j], dp[j - W[k]] + V[k]);\n```\n\n### 贪心优化\n\n显然，对于同组的物品：\n- 当重量相同时，选择价值最大的总是最好的\n- 当价值相同时，选择重量最小的总是最好的\n  ","slug":"Knapsack-Problem","published":1,"updated":"2021-04-25T07:11:17.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuouq000izcl0b09tlfd7","content":"<h2 id=\"01背包\"><a href=\"#01背包\" class=\"headerlink\" title=\"01背包\"></a>01背包</h2><h3 id=\"从搜索说起\"><a href=\"#从搜索说起\" class=\"headerlink\" title=\"从搜索说起\"></a>从搜索说起</h3><h4 id=\"简化问题\"><a href=\"#简化问题\" class=\"headerlink\" title=\"简化问题\"></a>简化问题</h4><blockquote>\n<p>考虑这样一个问题：有一个背包和有$N$个物品，单价为$V_i$（<strong>可负</strong>），求装进背包的最大价值</p>\n</blockquote>\n<ul>\n<li>递归的重复逻辑：对于任一物品，有选与不选两种情况；而解是这两种情况中的大者</li>\n<li>递归的边界：没有更多物品了</li>\n</ul>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 第 x 个物品</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// x = 0 不是物品</span>\n  <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 选与不选的大者为解</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// Call: Dfs(N);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"暴力01背包\"><a href=\"#暴力01背包\" class=\"headerlink\" title=\"暴力01背包\"></a>暴力01背包</h4><blockquote>\n<p>再把这个问题升级，加入一个限制条件：背包最大负重为$W_{max}$，以及每个物品都有一定重量<br>也就是说：有一个最大负重为$W_{max}$的背包，和$N$<strong>个</strong>物品，单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p>\n</blockquote>\n<ul>\n<li>加入这个限制条件后，递归函数需要一个额外的参数：剩余的背包负重，以判断是否放得下这个物品</li>\n</ul>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 剩余的背包负重为 y</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 放不下了，看看下一个</span>\n  <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// call: Dfs(N, Wmax)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样就可以解01背包了，但是，算法的时间复杂度是$O(2^n)$（深度为n的二叉树），难以接受</p>\n<h4 id=\"优化：记忆化-贪心\"><a href=\"#优化：记忆化-贪心\" class=\"headerlink\" title=\"优化：记忆化+贪心\"></a>优化：记忆化+贪心</h4><ul>\n<li>深度为n的二叉树中，可以用一个3元组记录每个节点：<code>(x, y, res)</code>，其中<code>x, y</code>意义与<code>Dfs(x, y)</code>相同，决定了以此节点为根的子树的结构；<code>res</code>则为其解。</li>\n<li>利用贪心可以进行剪枝：若有3元组<code>t1, t2</code>，且<code>t1.x = t2.x, t1.x = t2.y</code>，则它们的子树结构相同。而此时抛弃<code>res</code>小的节点而选择大者是不会影响根节点的结果值的。</li>\n<li>故可以用一个二维数组<code>dp[x][y] = res</code>记录节点<code>(x, y, res)</code>，并维护<code>res</code>最大</li>\n</ul>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// memset(dp, 0xff, sizeof(dp));</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 剩余的背包负重为 y</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 放不下了，看看下一个</span>\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Dfs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// call: Dfs(N, Wmax)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>时间复杂度是$O(nW)$（对于每个<code>x, y</code>，<code>dp[x][y]</code>只会进入递归一次（当其值为初始时））</p>\n<h3 id=\"动态规划的01背包\"><a href=\"#动态规划的01背包\" class=\"headerlink\" title=\"动态规划的01背包\"></a>动态规划的01背包</h3><p>经过优化后的算法，其解不再是一颗二叉树了，剪枝之后成为一个表；而用循环的写法更加简单直观，可以改写成以下的形式：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// const int kInf = -0x3f3f3f3f;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">SolveZeroOneKnapsack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>kInf<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Wmax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就是所谓的<strong>动态规划</strong>了，其与递归的不同也可以直观的看出来：<strong>递归是从大到小的，而动态规划是从小到大的</strong>（递归在填表时也是从小到大的）。</p>\n<p>$dp[i][j]=Max(dp[i-1][j],dp[i-1][j-w[i]]+v[i]);$被称作<strong>状态转移方程，负责从小推大</strong></p>\n<p>小的状态有二：其中$dp[i-1][j]$对应不选第$i$件，$dp[i-1][j-w[i]]+v[i]$对应选的情况</p>\n<h4 id=\"记忆化-贪心与动态规划的关系\"><a href=\"#记忆化-贪心与动态规划的关系\" class=\"headerlink\" title=\"记忆化+贪心与动态规划的关系\"></a>记忆化+贪心与动态规划的关系</h4><p>能采用动态规划解决的问题，一般要具有三个性质：<a href=\"https://zhuanlan.zhihu.com/p/126361983\" target=\"_blank\" rel=\"noopener\">来源</a></p>\n<blockquote>\n<ol>\n<li>最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</li>\n<li>无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</li>\n<li>有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）</li>\n</ol>\n</blockquote>\n<p>分析01背包的记忆化搜索+贪心算法与以上3点的关系，可以发现：</p>\n<blockquote>\n<ol>\n<li>最优化原理由贪心满足了</li>\n<li>搜索过程中的类似<strong>后续遍历</strong>的顺序，决定了状态<code>x-1</code>在状态<code>x</code>之前确定，并不再改变，即满足无后效性</li>\n<li>显然</li>\n</ol>\n</blockquote>\n<h4 id=\"压缩数组\"><a href=\"#压缩数组\" class=\"headerlink\" title=\"压缩数组\"></a>压缩数组</h4><p>分析状态转移方程，发现：</p>\n<ul>\n<li>状态$(i,j)$仅由$(i-1,j),\\ (i-1,j-w[i])$转移得来</li>\n<li>故处于状态$(i,j)$时，可以省去$(i-1,x)(x&gt;j)$，从而降低空间复杂度</li>\n<li>使用二维数组实现时，$j$的顺序无关紧要</li>\n<li>使用一维数组实现时，$j$的顺序变得重要了：省去的是$(i-1,x)(x&gt;j)$，<strong>故应倒序</strong></li>\n</ul>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// Init</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// DP</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> Wmax<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span>\n    dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"满载限制\"><a href=\"#满载限制\" class=\"headerlink\" title=\"满载限制\"></a>满载限制</h4><p>添加一个限制条件：只有装满背包的方案才是合法的，装不满输出<code>-1</code></p>\n<p>解法是：初始化时<code>dp[i] = -kInf, dp[0] = 0</code>，这样，最终DP完成后判断<code>dp[Wmax] &lt; 0</code>即可</p>\n<h2 id=\"完全背包\"><a href=\"#完全背包\" class=\"headerlink\" title=\"完全背包\"></a>完全背包</h2><blockquote>\n<p>有一个最大负重为$W_{max}$的背包，和$N$<strong>种</strong>物品，<strong>每种无限个</strong>，单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p>\n</blockquote>\n<p>有状态转移方程：$dp[i][j]=Max(dp[i-1][j],dp[i][j-w[i]]+v[i]);$</p>\n<p>其中$dp[i-1][j]$对应不选第$i$件，$dp[i][j-w[i]]+v[i]$对应选的情况</p>\n<p>因为<strong>每种无限个</strong>的条件，又有$dp[i][x] (x&lt;j)$由当前种类的选择转移而来，故应是$dp[i]$而非$dp[i-1]$</p>\n<p>与01背包相同，仍可进行空间压缩，此时省去的是$(i-1,x)(x&lt;j)$，<strong>故应正序</strong></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// Init</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// DP</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> Wmax <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n    dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"多重背包\"><a href=\"#多重背包\" class=\"headerlink\" title=\"多重背包\"></a>多重背包</h2><blockquote>\n<p>有一个最大负重为$W_{max}$的背包，和$N$种物品，<strong>每种个数为$C_i$</strong>、单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p>\n</blockquote>\n<h3 id=\"朴素算法\"><a href=\"#朴素算法\" class=\"headerlink\" title=\"朴素算法\"></a>朴素算法</h3><p>对01背包的原理略有理解之后，可以这样写：变为共有$\\sum_{i=1}^{N}C[i]$个物品的01背包：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// Init</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// DP</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> Wmax<span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> W<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>k<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> W<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> V<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以这样理解：对于每种物品，枚举选取几个，视作单价=单价×个数，重量=重量x个数的单个物品，即变成01背包问题：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// Init</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// DP</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> W<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> V<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> Wmax<span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> w<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>k<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> w<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上两种的时间复杂度，都为$O(W\\sum_{i=1}^{N}C[i])$，第二种常数略低一点</p>\n<h3 id=\"二进制优化\"><a href=\"#二进制优化\" class=\"headerlink\" title=\"二进制优化\"></a>二进制优化</h3><p>当$C[i]$增大时，上面的算法时间复杂度可能会很高，有没有什么优化空间？</p>\n<p>对于第一种做法：选取了第一种的第一件与第二件，与选取了第一种的第二件和第三件，这两种状态是相同的</p>\n<blockquote>\n<p>例如：对于$W_{max}=3, C[1]=3,\\ W[1]=1, V[1]=1$<br>选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$<br>选$2$个：$dp[3]=dp[3-1]+1=2,\\ dp[2]=dp[2-1]+1=2,\\ dp[1]=dp[1-1]+1=1$<br>选$3$个：$dp[3]=dp[3-1]+1=3,\\ dp[2]=dp[2-1]+1=2,\\ dp[2]=dp[1-1]+1=1$</p>\n</blockquote>\n<p>对于第二种做法：当依次选取$x$、$y$个、和$z$个时，若有$z=x+y$，显然在完成$x$的基础上选取$y$时，会经过状态$x+y$即$z$，那么状态$z$<strong>被访问了不止一次，这就是可优化之处</strong></p>\n<blockquote>\n<p>例如：对于$W_{max}=3,\\ C[1]=3,\\ W[1]=1,\\ V[1]=1$<br>选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$<br>选$2$个：<strong>$dp[3]=dp[3-2]+2=3$</strong>$,\\ dp[2]=dp[2-2]+2=2$<br>选$3$个：<strong>$dp[3]=dp[3-3]+3=3$</strong></p>\n</blockquote>\n<p><strong>想要优化，就要让每个状态被访问的次数尽可能的少</strong>，考虑第二种做法，有没有办法让每个$z=x+y$，被唯一的一对$x&lt;y$表示呢？$答案就是二进制$：</p>\n<blockquote>\n<p>对于任意$x&lt;=2^n(n∈N^+)$，有$x=\\sum_{i=0}^{n-1}p_i2^i(p_i=1\\ or\\ 0)$，也就是说$x$只能被每个$2^i$相加至多$1$次得到</p>\n</blockquote>\n<p>那么考虑$C[i]=2^n$的情况：将$C[i]$拆分成$2^0,2^1…2^{n-1}$件，就能让每个状态只被访问一次了</p>\n<p>而$C[i]$不是$2$的整数次幂时怎么办？在<strong>末尾</strong>加上非整数部分即可（<strong>注意一定要末尾，否则会导致某些状态被重复访问</strong>）</p>\n<p>时间复杂度，$O(W\\sum_{i=1}^{N}logC[i])$</p>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://www.luogu.com.cn/problem/P1776\" target=\"_blank\" rel=\"noopener\">模板题：洛谷P1776 宝物筛选</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> kN <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> Wmax<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">[</span>kN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">[</span>kN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">[</span>kN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>kN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> size_t <span class=\"token function\">HighBit</span><span class=\"token punctuation\">(</span>size_t x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> x <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> Wmax<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> V<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> W<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hb <span class=\"token operator\">=</span> <span class=\"token function\">HighBit</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> remainder <span class=\"token operator\">=</span> C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> hb<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> hb<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> W<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> V<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> Wmax<span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> w<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>k<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> w<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remainder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> remainder <span class=\"token operator\">*</span> W<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> remainder <span class=\"token operator\">*</span> V<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> Wmax<span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> w<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>k<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> w<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span>Wmax<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>为了实现了这样的效果：<br>14 = 7 + (7)<br>15 = 15 + (0)<br>16 = 15 + (1)<br>17 = 15 + (2)<br>使用<code>HighBit(x)</code>函数取出<code>x</code>的二进制最高位，其原理是：将最高位1扩散到低位，之后右移1位再加1进位即可</p>\n</blockquote>\n<h2 id=\"分组背包\"><a href=\"#分组背包\" class=\"headerlink\" title=\"分组背包\"></a>分组背包</h2><blockquote>\n<p>有一个最大负重为$W_{max}$的背包，和$N$<strong>件</strong>物品，单重为$W_i$、单价为$V_i$；同时这些物品被划分为多组，<strong>同组的最多选一个</strong>，求装进背包的最大价值</p>\n</blockquote>\n<p>就是变成了将<strong>组</strong>视作01背包中的<strong>个</strong>，同时这些<strong>个</strong>的重量和价值不一定相等</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P1757\" target=\"_blank\" rel=\"noopener\">模板题：洛谷P1757 通天之分组背包</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> Wmax<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>i <span class=\"token operator\">:</span> G<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// G是组的集合，i是一个组</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> Wmax<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>k <span class=\"token operator\">:</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// i是一个组，k是组中物品的索引</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> W<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> W<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> V<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"贪心优化\"><a href=\"#贪心优化\" class=\"headerlink\" title=\"贪心优化\"></a>贪心优化</h3><p>显然，对于同组的物品：</p>\n<ul>\n<li>当重量相同时，选择价值最大的总是最好的</li>\n<li>当价值相同时，选择重量最小的总是最好的</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"01背包\"><a href=\"#01背包\" class=\"headerlink\" title=\"01背包\"></a>01背包</h2><h3 id=\"从搜索说起\"><a href=\"#从搜索说起\" class=\"headerlink\" title=\"从搜索说起\"></a>从搜索说起</h3><h4 id=\"简化问题\"><a href=\"#简化问题\" class=\"headerlink\" title=\"简化问题\"></a>简化问题</h4><blockquote>\n<p>考虑这样一个问题：有一个背包和有$N$个物品，单价为$V_i$（<strong>可负</strong>），求装进背包的最大价值</p>\n</blockquote>\n<ul>\n<li>递归的重复逻辑：对于任一物品，有选与不选两种情况；而解是这两种情况中的大者</li>\n<li>递归的边界：没有更多物品了</li>\n</ul>\n<pre><code class=\"cpp\">int Dfs(const int &amp;x) { // 第 x 个物品\n  if (x == 0) return 0;  // x = 0 不是物品\n  return std::max(Dfs(x - 1), Dfs(x - 1) + v[i]); // 选与不选的大者为解\n}\n// Call: Dfs(N);</code></pre>\n<h4 id=\"暴力01背包\"><a href=\"#暴力01背包\" class=\"headerlink\" title=\"暴力01背包\"></a>暴力01背包</h4><blockquote>\n<p>再把这个问题升级，加入一个限制条件：背包最大负重为$W_{max}$，以及每个物品都有一定重量<br>也就是说：有一个最大负重为$W_{max}$的背包，和$N$<strong>个</strong>物品，单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p>\n</blockquote>\n<ul>\n<li>加入这个限制条件后，递归函数需要一个额外的参数：剩余的背包负重，以判断是否放得下这个物品</li>\n</ul>\n<pre><code class=\"cpp\">int Dfs(const int &amp;x, const int &amp;y) { // 剩余的背包负重为 y\n  if (x == 0) return 0;\n  if (y &lt; w[x]) return Dfs(x - 1, y); // 放不下了，看看下一个\n  return std::max(Dfs(x - 1, y), Dfs(x - 1, y - w[x]) + w[x]);\n}\n// call: Dfs(N, Wmax)</code></pre>\n<p>这样就可以解01背包了，但是，算法的时间复杂度是$O(2^n)$（深度为n的二叉树），难以接受</p>\n<h4 id=\"优化：记忆化-贪心\"><a href=\"#优化：记忆化-贪心\" class=\"headerlink\" title=\"优化：记忆化+贪心\"></a>优化：记忆化+贪心</h4><ul>\n<li>深度为n的二叉树中，可以用一个3元组记录每个节点：<code>(x, y, res)</code>，其中<code>x, y</code>意义与<code>Dfs(x, y)</code>相同，决定了以此节点为根的子树的结构；<code>res</code>则为其解。</li>\n<li>利用贪心可以进行剪枝：若有3元组<code>t1, t2</code>，且<code>t1.x = t2.x, t1.x = t2.y</code>，则它们的子树结构相同。而此时抛弃<code>res</code>小的节点而选择大者是不会影响根节点的结果值的。</li>\n<li>故可以用一个二维数组<code>dp[x][y] = res</code>记录节点<code>(x, y, res)</code>，并维护<code>res</code>最大</li>\n</ul>\n<pre><code class=\"cpp\">// memset(dp, 0xff, sizeof(dp));\nint Dfs(const int &amp;x, const int &amp;y) { // 剩余的背包负重为 y\n  if (dp[x][y] &gt;= 0) return dp[x][y];\n  if (x == 0) return dp[x][y] = 0;\n  if (y &lt; w[x]) return dp[x][y] = Dfs(x - 1, y); // 放不下了，看看下一个\n  return dp[x][y] = std::max(Dfs(x - 1, y), Dfs(x - 1, y - w[x]) + w[x]);\n}\n// call: Dfs(N, Wmax)</code></pre>\n<p>时间复杂度是$O(nW)$（对于每个<code>x, y</code>，<code>dp[x][y]</code>只会进入递归一次（当其值为初始时））</p>\n<h3 id=\"动态规划的01背包\"><a href=\"#动态规划的01背包\" class=\"headerlink\" title=\"动态规划的01背包\"></a>动态规划的01背包</h3><p>经过优化后的算法，其解不再是一颗二叉树了，剪枝之后成为一个表；而用循环的写法更加简单直观，可以改写成以下的形式：</p>\n<pre><code class=\"cpp\">// const int kInf = -0x3f3f3f3f;\nint SolveZeroOneKnapsack() {\n  for (int i = 0; i &lt;= Wmax; ++i) dp[0][i] = -kInf;\n  for (int i = 1; i &lt;= N; ++i)\n    for (int j = 0; j &lt;= Wmax; ++j)\n      if (j &lt; w[i]) {\n        dp[i][j] = dp[i - 1][j];\n      } else {\n        dp[i][j] = std::max(dp[i - 1][j], dp[i - 1][j - w[i]] + w[i]); \n      }\n  return dp[N][Wmax];\n}</code></pre>\n<p>这就是所谓的<strong>动态规划</strong>了，其与递归的不同也可以直观的看出来：<strong>递归是从大到小的，而动态规划是从小到大的</strong>（递归在填表时也是从小到大的）。</p>\n<p>$dp[i][j]=Max(dp[i-1][j],dp[i-1][j-w[i]]+v[i]);$被称作<strong>状态转移方程，负责从小推大</strong></p>\n<p>小的状态有二：其中$dp[i-1][j]$对应不选第$i$件，$dp[i-1][j-w[i]]+v[i]$对应选的情况</p>\n<h4 id=\"记忆化-贪心与动态规划的关系\"><a href=\"#记忆化-贪心与动态规划的关系\" class=\"headerlink\" title=\"记忆化+贪心与动态规划的关系\"></a>记忆化+贪心与动态规划的关系</h4><p>能采用动态规划解决的问题，一般要具有三个性质：<a href=\"https://zhuanlan.zhihu.com/p/126361983\" target=\"_blank\" rel=\"noopener\">来源</a></p>\n<blockquote>\n<ol>\n<li>最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</li>\n<li>无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</li>\n<li>有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）</li>\n</ol>\n</blockquote>\n<p>分析01背包的记忆化搜索+贪心算法与以上3点的关系，可以发现：</p>\n<blockquote>\n<ol>\n<li>最优化原理由贪心满足了</li>\n<li>搜索过程中的类似<strong>后续遍历</strong>的顺序，决定了状态<code>x-1</code>在状态<code>x</code>之前确定，并不再改变，即满足无后效性</li>\n<li>显然</li>\n</ol>\n</blockquote>\n<h4 id=\"压缩数组\"><a href=\"#压缩数组\" class=\"headerlink\" title=\"压缩数组\"></a>压缩数组</h4><p>分析状态转移方程，发现：</p>\n<ul>\n<li>状态$(i,j)$仅由$(i-1,j),\\ (i-1,j-w[i])$转移得来</li>\n<li>故处于状态$(i,j)$时，可以省去$(i-1,x)(x&gt;j)$，从而降低空间复杂度</li>\n<li>使用二维数组实现时，$j$的顺序无关紧要</li>\n<li>使用一维数组实现时，$j$的顺序变得重要了：省去的是$(i-1,x)(x&gt;j)$，<strong>故应倒序</strong></li>\n</ul>\n<pre><code class=\"cpp\">// Init\nfor (int i = 0; i &lt;= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i &lt;= N; ++i)\n  for (int j = Wmax; j &gt;= w[i]; --j)\n    dp[j] = Max(dp[j], dp[j - w[i]] + v[i]);</code></pre>\n<h4 id=\"满载限制\"><a href=\"#满载限制\" class=\"headerlink\" title=\"满载限制\"></a>满载限制</h4><p>添加一个限制条件：只有装满背包的方案才是合法的，装不满输出<code>-1</code></p>\n<p>解法是：初始化时<code>dp[i] = -kInf, dp[0] = 0</code>，这样，最终DP完成后判断<code>dp[Wmax] &lt; 0</code>即可</p>\n<h2 id=\"完全背包\"><a href=\"#完全背包\" class=\"headerlink\" title=\"完全背包\"></a>完全背包</h2><blockquote>\n<p>有一个最大负重为$W_{max}$的背包，和$N$<strong>种</strong>物品，<strong>每种无限个</strong>，单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p>\n</blockquote>\n<p>有状态转移方程：$dp[i][j]=Max(dp[i-1][j],dp[i][j-w[i]]+v[i]);$</p>\n<p>其中$dp[i-1][j]$对应不选第$i$件，$dp[i][j-w[i]]+v[i]$对应选的情况</p>\n<p>因为<strong>每种无限个</strong>的条件，又有$dp[i][x] (x&lt;j)$由当前种类的选择转移而来，故应是$dp[i]$而非$dp[i-1]$</p>\n<p>与01背包相同，仍可进行空间压缩，此时省去的是$(i-1,x)(x&lt;j)$，<strong>故应正序</strong></p>\n<pre><code class=\"cpp\">// Init\nfor (int i = 0; i &lt;= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i &lt;= N; ++i)\n  for (int j = w[i]; j &lt;= Wmax ++j)\n    dp[j] = Max(dp[j], dp[j - w[i]] + v[i]);</code></pre>\n<h2 id=\"多重背包\"><a href=\"#多重背包\" class=\"headerlink\" title=\"多重背包\"></a>多重背包</h2><blockquote>\n<p>有一个最大负重为$W_{max}$的背包，和$N$种物品，<strong>每种个数为$C_i$</strong>、单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p>\n</blockquote>\n<h3 id=\"朴素算法\"><a href=\"#朴素算法\" class=\"headerlink\" title=\"朴素算法\"></a>朴素算法</h3><p>对01背包的原理略有理解之后，可以这样写：变为共有$\\sum_{i=1}^{N}C[i]$个物品的01背包：</p>\n<pre><code class=\"cpp\">// Init\nfor (int i = 0; i &lt;= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i &lt;= N; ++i)\n  for (int j = 1; j &lt;= C[i]; ++j)\n    for (int k = Wmax; k &gt;= W[i]; --k) dp[k] = Max(dp[k], dp[k - W[i]] + V[i]);</code></pre>\n<p>也可以这样理解：对于每种物品，枚举选取几个，视作单价=单价×个数，重量=重量x个数的单个物品，即变成01背包问题：</p>\n<pre><code class=\"cpp\">// Init\nfor (int i = 0; i &lt;= Wmax; ++i) dp[i] = 0;\n\n// DP\nfor (int i = 1; i &lt;= N; ++i)\n  for (int j = 1; j &lt;= C[i]; ++j) {\n    int w = j * W[i], v = j * V[i];\n    for (int k = Wmax; k &gt;= w; --k) dp[k] = Max(dp[k], dp[k - w] + v);\n  }</code></pre>\n<p>以上两种的时间复杂度，都为$O(W\\sum_{i=1}^{N}C[i])$，第二种常数略低一点</p>\n<h3 id=\"二进制优化\"><a href=\"#二进制优化\" class=\"headerlink\" title=\"二进制优化\"></a>二进制优化</h3><p>当$C[i]$增大时，上面的算法时间复杂度可能会很高，有没有什么优化空间？</p>\n<p>对于第一种做法：选取了第一种的第一件与第二件，与选取了第一种的第二件和第三件，这两种状态是相同的</p>\n<blockquote>\n<p>例如：对于$W_{max}=3, C[1]=3,\\ W[1]=1, V[1]=1$<br>选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$<br>选$2$个：$dp[3]=dp[3-1]+1=2,\\ dp[2]=dp[2-1]+1=2,\\ dp[1]=dp[1-1]+1=1$<br>选$3$个：$dp[3]=dp[3-1]+1=3,\\ dp[2]=dp[2-1]+1=2,\\ dp[2]=dp[1-1]+1=1$</p>\n</blockquote>\n<p>对于第二种做法：当依次选取$x$、$y$个、和$z$个时，若有$z=x+y$，显然在完成$x$的基础上选取$y$时，会经过状态$x+y$即$z$，那么状态$z$<strong>被访问了不止一次，这就是可优化之处</strong></p>\n<blockquote>\n<p>例如：对于$W_{max}=3,\\ C[1]=3,\\ W[1]=1,\\ V[1]=1$<br>选$1$个：$dp[3]=dp[3-1]+1=1,\\ dp[2]=dp[2-1]+1=1,\\ dp[1]=dp[1-1]+1=1$<br>选$2$个：<strong>$dp[3]=dp[3-2]+2=3$</strong>$,\\ dp[2]=dp[2-2]+2=2$<br>选$3$个：<strong>$dp[3]=dp[3-3]+3=3$</strong></p>\n</blockquote>\n<p><strong>想要优化，就要让每个状态被访问的次数尽可能的少</strong>，考虑第二种做法，有没有办法让每个$z=x+y$，被唯一的一对$x&lt;y$表示呢？$答案就是二进制$：</p>\n<blockquote>\n<p>对于任意$x&lt;=2^n(n∈N^+)$，有$x=\\sum_{i=0}^{n-1}p_i2^i(p_i=1\\ or\\ 0)$，也就是说$x$只能被每个$2^i$相加至多$1$次得到</p>\n</blockquote>\n<p>那么考虑$C[i]=2^n$的情况：将$C[i]$拆分成$2^0,2^1…2^{n-1}$件，就能让每个状态只被访问一次了</p>\n<p>而$C[i]$不是$2$的整数次幂时怎么办？在<strong>末尾</strong>加上非整数部分即可（<strong>注意一定要末尾，否则会导致某些状态被重复访问</strong>）</p>\n<p>时间复杂度，$O(W\\sum_{i=1}^{N}logC[i])$</p>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://www.luogu.com.cn/problem/P1776\" target=\"_blank\" rel=\"noopener\">模板题：洛谷P1776 宝物筛选</a></p>\n<pre><code class=\"cpp\">#include &lt;iostream&gt;\n\nconst int kN = 1e5 + 1;\nint N, Wmax, V[kN], W[kN], C[kN];\nint dp[kN];\n\ninline size_t HighBit(size_t x) {\n  for (size_t i = 1; i &lt; sizeof(x) &lt;&lt; 3; i &lt;&lt;= 1) x |= (x &gt;&gt; i);\n  return (x &gt;&gt; 1) + 1;\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin &gt;&gt; N &gt;&gt; Wmax;\n  for (int i = 1; i &lt;= N; ++i) std::cin &gt;&gt; V[i] &gt;&gt; W[i] &gt;&gt; C[i];\n  for (int i = 0; i &lt;= Wmax; ++i) dp[i] = 0;\n\n  for (int i = 1; i &lt;= N; ++i) {\n    int hb = HighBit(C[i] + 1);\n    int remainder = C[i] + 1 - hb;\n    for (int j = 1; j &lt; hb; j &lt;&lt;= 1) {\n      int w = j * W[i], v = j * V[i];\n      for (int k = Wmax; k &gt;= w; --k) dp[k] = std::max(dp[k], dp[k - w] + v);\n    }\n    if (remainder) {\n      int w = remainder * W[i], v = remainder * V[i];\n      for (int k = Wmax; k &gt;= w; --k) dp[k] = std::max(dp[k], dp[k - w] + v);\n    }\n  }\n\n  std::cout &lt;&lt; dp[Wmax] &lt;&lt; &quot;\\n&quot;;\n  return 0;\n}\n</code></pre>\n<blockquote>\n<p>为了实现了这样的效果：<br>14 = 7 + (7)<br>15 = 15 + (0)<br>16 = 15 + (1)<br>17 = 15 + (2)<br>使用<code>HighBit(x)</code>函数取出<code>x</code>的二进制最高位，其原理是：将最高位1扩散到低位，之后右移1位再加1进位即可</p>\n</blockquote>\n<h2 id=\"分组背包\"><a href=\"#分组背包\" class=\"headerlink\" title=\"分组背包\"></a>分组背包</h2><blockquote>\n<p>有一个最大负重为$W_{max}$的背包，和$N$<strong>件</strong>物品，单重为$W_i$、单价为$V_i$；同时这些物品被划分为多组，<strong>同组的最多选一个</strong>，求装进背包的最大价值</p>\n</blockquote>\n<p>就是变成了将<strong>组</strong>视作01背包中的<strong>个</strong>，同时这些<strong>个</strong>的重量和价值不一定相等</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P1757\" target=\"_blank\" rel=\"noopener\">模板题：洛谷P1757 通天之分组背包</a></p>\n<pre><code class=\"cpp\">for (int i = 0; i &lt;= Wmax; ++i) dp[i] = 0;\n\nfor (const auto &amp;i : G) // G是组的集合，i是一个组\n  for (int j = Wmax; j &gt;= 0; --j)\n    for (const auto &amp;k : i) // i是一个组，k是组中物品的索引\n      if (j &gt;= W[k]) dp[j] = Max(dp[j], dp[j - W[k]] + V[k]);</code></pre>\n<h3 id=\"贪心优化\"><a href=\"#贪心优化\" class=\"headerlink\" title=\"贪心优化\"></a>贪心优化</h3><p>显然，对于同组的物品：</p>\n<ul>\n<li>当重量相同时，选择价值最大的总是最好的</li>\n<li>当价值相同时，选择重量最小的总是最好的</li>\n</ul>\n"},{"title":"Post Blogs With Hexo","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-11-22T05:50:54.000Z","password":null,"summary":"使用Hexo发布博客","_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=858520&auto=1&height=66\"></iframe></div>\n\n## 博客搭建\n\n[超详细Hexo+Github博客搭建小白教程](https://zhuanlan.zhihu.com/p/35668237)\n\n## 写文章\n\n```bash\ncd $blog_root\nhexo new post \"post title\"\nls source\\_posts\n```\n\n生成了`post-title`文件夹存放资源文件；`post-title.md`文件存放文章。\n\n## 发布文章\n\n```bash\ncd $blog_root\nhexo clean && hexo g && hexo s\n```\n在`localhost:4000`预览效果\n\n\n```bash\nhexo d\n```\n\n上传到GitHub\n\n## 备份博客\n\n```bash\ncd $blog_root\ngit add .\ngit commit -m \"message here\"\ngit push origin hexo\n```\n","source":"_posts/Post-Blogs-With-Hexo.md","raw":"---\ntitle: Post Blogs With Hexo\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-11-22 13:50:54\npassword:\nsummary: 使用Hexo发布博客\ntags:\n- 教程\n- 博客\ncategories:\n- 博客维护\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=858520&auto=1&height=66\"></iframe></div>\n\n## 博客搭建\n\n[超详细Hexo+Github博客搭建小白教程](https://zhuanlan.zhihu.com/p/35668237)\n\n## 写文章\n\n```bash\ncd $blog_root\nhexo new post \"post title\"\nls source\\_posts\n```\n\n生成了`post-title`文件夹存放资源文件；`post-title.md`文件存放文章。\n\n## 发布文章\n\n```bash\ncd $blog_root\nhexo clean && hexo g && hexo s\n```\n在`localhost:4000`预览效果\n\n\n```bash\nhexo d\n```\n\n上传到GitHub\n\n## 备份博客\n\n```bash\ncd $blog_root\ngit add .\ngit commit -m \"message here\"\ngit push origin hexo\n```\n","slug":"Post-Blogs-With-Hexo","published":1,"updated":"2021-04-25T07:11:17.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuous000kzcl0zzxz3j38","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=858520&auto=1&height=66\"></iframe></div>\n\n<h2 id=\"博客搭建\"><a href=\"#博客搭建\" class=\"headerlink\" title=\"博客搭建\"></a>博客搭建</h2><p><a href=\"https://zhuanlan.zhihu.com/p/35668237\" target=\"_blank\" rel=\"noopener\">超详细Hexo+Github博客搭建小白教程</a></p>\n<h2 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h2><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token variable\">$blog_root</span>\nhexo new post <span class=\"token string\">\"post title\"</span>\n<span class=\"token function\">ls</span> source\\_posts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>生成了<code>post-title</code>文件夹存放资源文件；<code>post-title.md</code>文件存放文章。</p>\n<h2 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token variable\">$blog_root</span>\nhexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在<code>localhost:4000</code>预览效果</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">hexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上传到GitHub</p>\n<h2 id=\"备份博客\"><a href=\"#备份博客\" class=\"headerlink\" title=\"备份博客\"></a>备份博客</h2><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token variable\">$blog_root</span>\n<span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"message here\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=858520&auto=1&height=66\"></iframe></div>\n\n<h2 id=\"博客搭建\"><a href=\"#博客搭建\" class=\"headerlink\" title=\"博客搭建\"></a>博客搭建</h2><p><a href=\"https://zhuanlan.zhihu.com/p/35668237\" target=\"_blank\" rel=\"noopener\">超详细Hexo+Github博客搭建小白教程</a></p>\n<h2 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h2><pre><code class=\"bash\">cd $blog_root\nhexo new post &quot;post title&quot;\nls source\\_posts</code></pre>\n<p>生成了<code>post-title</code>文件夹存放资源文件；<code>post-title.md</code>文件存放文章。</p>\n<h2 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2><pre><code class=\"bash\">cd $blog_root\nhexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre>\n<p>在<code>localhost:4000</code>预览效果</p>\n<pre><code class=\"bash\">hexo d</code></pre>\n<p>上传到GitHub</p>\n<h2 id=\"备份博客\"><a href=\"#备份博客\" class=\"headerlink\" title=\"备份博客\"></a>备份博客</h2><pre><code class=\"bash\">cd $blog_root\ngit add .\ngit commit -m &quot;message here&quot;\ngit push origin hexo</code></pre>\n"},{"title":"RMQ","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2020-12-15T17:12:23.000Z","password":null,"summary":"区间最大（最小）查询","_content":"\n## 区间最大（最小）值查询\n\n给定一个大小为$n$的数组，及$m$组询问，每次询问求区间$[l,r]$的最大（最小）值\n\n### 暴力算法\n\n以区间最大值查询为例：\n\n```cpp\n// a[n + 1]：给定数组\n// max[n + 1][n + 1]：max[l][r]记录a中区间[l,r]的最小值\nfor (int i = 1; i <= n; ++i) {\n  max[i][i] = a[i];\n  for (int j = i + 1; j <= n; ++j)\n    max[i][j] = std::min(max[i][j - 1], a[j]);\n  }\n```\n\n暴力算法的时间和空间复杂度都为：$O(n^2)$\n\n### 优化思路：分治法，记忆化搜索\n\n先考虑求单次查询时显然有：$Min(a[i]|l\\leq i\\leq r)=Min(Min(a[i]|l\\leq i\\leq ⌊\\frac{l+r}{2}⌋), Min(a[i]|⌈\\frac{l+r}{2}⌉\\leq i\\leq r))$\n\n```cpp\nint RMQMax(const int &l, const int &r) {\n  if (l == r) return a[l];\n  int &&m = (l + r) >> 1;\n  return std::max(RMQMax(l, m), RMQMax(m + 1, r));\n}\n```\n\n单次查询的时间复杂度是：$O(logn)$\n\n但如何把分治法用于多次查询呢？考虑**记忆化搜索**：在分治过程中打表\n- `RMQMax`的时间复杂度是$O(logn)$，故考虑$O(nlogn)$的表\n- 每次递归都把区间对半分割，故可考虑省去右端点，而改为记录区间长度$2^loglen$，这样每次递归只需把$loglen-=1$\n- 当区间长度不是$2$的整数次幂时，只需要把原区间划分成两个长为$2$的整数次幂的区间即可\n\n#### 模板\n\n[模板题：HRBUST1189 区间最大值II](https://vjudge.net/problem/HRBUST-1189)\n\n```cpp\n// Init\nstd::memset(dp, 0xff, sizeof(dp));\n\nint RMQDAC(const int &l, const int &loglen) {\n  if (dp[l][loglen] != -1) return dp[l][loglen];\n  if (loglen == 0) return dp[l][0] = a[l];\n  return dp[l][loglen] = std::max(RMQMax(l, loglen - 1),\n                                  RMQMax(l + Pow2(loglen - 1), loglen - 1));\n}\n\ninline int RMQMax(const int &l, const int &r) {\n  int loglen = std::log2(r - l + 1);\n  return std::max(RMQDAC(l, loglen), RMQDAC(r - Pow2(loglen) + 1, loglen));\n}\n```\n\n### 动态规划的Sparse Table（ST）算法\n\n分析一下记忆化搜索，就可以把它化作多态规划的ST算法\n\n#### 模板\n\n```cpp\ninline int Pow2(const int &x) { return 1 << x; }\nvoid RMQST() {\n  for (int i = 1; i <= n; ++i) max[i][0] = min[i][0] = a[i];\n  for (int j = 1; Pow2(j) <= n; ++j)\n    for (int i = 1; i + Pow2(j - 1) <= n; ++i) {\n      max[i][j] = std::max(max[i][j - 1], max[i + Pow2(j - 1)][j - 1]);\n      min[i][j] = std::min(min[i][j - 1], min[i + Pow2(j - 1)][j - 1]);\n    }\n}\ninline int RMQMax(const int &l, const int &r) {\n  int loglen = log2(r - l + 1);\n  return std::max(max[l][loglen], max[r - Pow2(loglen) + 1][loglen]);\n}\ninline int RMQMin(const int &l, const int &r) {\n  int loglen = log2(r - l + 1);\n  return std::min(min[l][loglen], min[r - Pow2(loglen) + 1][k]);\n}\n```\n","source":"_posts/RMQ.md","raw":"---\ntitle: RMQ\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-12-16 01:12:23\npassword:\nsummary: 区间最大（最小）查询\ntags:\n- 动态规划\n- ST算法\ncategories:\n- 算法\n---\n\n## 区间最大（最小）值查询\n\n给定一个大小为$n$的数组，及$m$组询问，每次询问求区间$[l,r]$的最大（最小）值\n\n### 暴力算法\n\n以区间最大值查询为例：\n\n```cpp\n// a[n + 1]：给定数组\n// max[n + 1][n + 1]：max[l][r]记录a中区间[l,r]的最小值\nfor (int i = 1; i <= n; ++i) {\n  max[i][i] = a[i];\n  for (int j = i + 1; j <= n; ++j)\n    max[i][j] = std::min(max[i][j - 1], a[j]);\n  }\n```\n\n暴力算法的时间和空间复杂度都为：$O(n^2)$\n\n### 优化思路：分治法，记忆化搜索\n\n先考虑求单次查询时显然有：$Min(a[i]|l\\leq i\\leq r)=Min(Min(a[i]|l\\leq i\\leq ⌊\\frac{l+r}{2}⌋), Min(a[i]|⌈\\frac{l+r}{2}⌉\\leq i\\leq r))$\n\n```cpp\nint RMQMax(const int &l, const int &r) {\n  if (l == r) return a[l];\n  int &&m = (l + r) >> 1;\n  return std::max(RMQMax(l, m), RMQMax(m + 1, r));\n}\n```\n\n单次查询的时间复杂度是：$O(logn)$\n\n但如何把分治法用于多次查询呢？考虑**记忆化搜索**：在分治过程中打表\n- `RMQMax`的时间复杂度是$O(logn)$，故考虑$O(nlogn)$的表\n- 每次递归都把区间对半分割，故可考虑省去右端点，而改为记录区间长度$2^loglen$，这样每次递归只需把$loglen-=1$\n- 当区间长度不是$2$的整数次幂时，只需要把原区间划分成两个长为$2$的整数次幂的区间即可\n\n#### 模板\n\n[模板题：HRBUST1189 区间最大值II](https://vjudge.net/problem/HRBUST-1189)\n\n```cpp\n// Init\nstd::memset(dp, 0xff, sizeof(dp));\n\nint RMQDAC(const int &l, const int &loglen) {\n  if (dp[l][loglen] != -1) return dp[l][loglen];\n  if (loglen == 0) return dp[l][0] = a[l];\n  return dp[l][loglen] = std::max(RMQMax(l, loglen - 1),\n                                  RMQMax(l + Pow2(loglen - 1), loglen - 1));\n}\n\ninline int RMQMax(const int &l, const int &r) {\n  int loglen = std::log2(r - l + 1);\n  return std::max(RMQDAC(l, loglen), RMQDAC(r - Pow2(loglen) + 1, loglen));\n}\n```\n\n### 动态规划的Sparse Table（ST）算法\n\n分析一下记忆化搜索，就可以把它化作多态规划的ST算法\n\n#### 模板\n\n```cpp\ninline int Pow2(const int &x) { return 1 << x; }\nvoid RMQST() {\n  for (int i = 1; i <= n; ++i) max[i][0] = min[i][0] = a[i];\n  for (int j = 1; Pow2(j) <= n; ++j)\n    for (int i = 1; i + Pow2(j - 1) <= n; ++i) {\n      max[i][j] = std::max(max[i][j - 1], max[i + Pow2(j - 1)][j - 1]);\n      min[i][j] = std::min(min[i][j - 1], min[i + Pow2(j - 1)][j - 1]);\n    }\n}\ninline int RMQMax(const int &l, const int &r) {\n  int loglen = log2(r - l + 1);\n  return std::max(max[l][loglen], max[r - Pow2(loglen) + 1][loglen]);\n}\ninline int RMQMin(const int &l, const int &r) {\n  int loglen = log2(r - l + 1);\n  return std::min(min[l][loglen], min[r - Pow2(loglen) + 1][k]);\n}\n```\n","slug":"RMQ","published":1,"updated":"2021-04-25T07:11:17.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuouu000pzcl0ywkxin3b","content":"<h2 id=\"区间最大（最小）值查询\"><a href=\"#区间最大（最小）值查询\" class=\"headerlink\" title=\"区间最大（最小）值查询\"></a>区间最大（最小）值查询</h2><p>给定一个大小为$n$的数组，及$m$组询问，每次询问求区间$[l,r]$的最大（最小）值</p>\n<h3 id=\"暴力算法\"><a href=\"#暴力算法\" class=\"headerlink\" title=\"暴力算法\"></a>暴力算法</h3><p>以区间最大值查询为例：</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// a[n + 1]：给定数组</span>\n<span class=\"token comment\" spellcheck=\"true\">// max[n + 1][n + 1]：max[l][r]记录a中区间[l,r]的最小值</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n    max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>暴力算法的时间和空间复杂度都为：$O(n^2)$</p>\n<h3 id=\"优化思路：分治法，记忆化搜索\"><a href=\"#优化思路：分治法，记忆化搜索\" class=\"headerlink\" title=\"优化思路：分治法，记忆化搜索\"></a>优化思路：分治法，记忆化搜索</h3><p>先考虑求单次查询时显然有：$Min(a[i]|l\\leq i\\leq r)=Min(Min(a[i]|l\\leq i\\leq ⌊\\frac{l+r}{2}⌋), Min(a[i]|⌈\\frac{l+r}{2}⌉\\leq i\\leq r))$</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;&amp;</span>m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>单次查询的时间复杂度是：$O(logn)$</p>\n<p>但如何把分治法用于多次查询呢？考虑<strong>记忆化搜索</strong>：在分治过程中打表</p>\n<ul>\n<li><code>RMQMax</code>的时间复杂度是$O(logn)$，故考虑$O(nlogn)$的表</li>\n<li>每次递归都把区间对半分割，故可考虑省去右端点，而改为记录区间长度$2^loglen$，这样每次递归只需把$loglen-=1$</li>\n<li>当区间长度不是$2$的整数次幂时，只需要把原区间划分成两个长为$2$的整数次幂的区间即可</li>\n</ul>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/HRBUST-1189\" target=\"_blank\" rel=\"noopener\">模板题：HRBUST1189 区间最大值II</a></p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// Init</span>\nstd<span class=\"token operator\">::</span><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">RMQDAC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>loglen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>loglen<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>loglen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loglen <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>loglen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> loglen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>loglen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loglen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> loglen <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">RMQDAC</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> loglen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RMQDAC</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>loglen<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> loglen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"动态规划的Sparse-Table（ST）算法\"><a href=\"#动态规划的Sparse-Table（ST）算法\" class=\"headerlink\" title=\"动态规划的Sparse Table（ST）算法\"></a>动态规划的Sparse Table（ST）算法</h3><p>分析一下记忆化搜索，就可以把它化作多态规划的ST算法</p>\n<h4 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h4><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">RMQST</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      min<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">RMQMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> loglen <span class=\"token operator\">=</span> <span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>loglen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>loglen<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>loglen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">RMQMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> loglen <span class=\"token operator\">=</span> <span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>loglen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> <span class=\"token function\">Pow2</span><span class=\"token punctuation\">(</span>loglen<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"区间最大（最小）值查询\"><a href=\"#区间最大（最小）值查询\" class=\"headerlink\" title=\"区间最大（最小）值查询\"></a>区间最大（最小）值查询</h2><p>给定一个大小为$n$的数组，及$m$组询问，每次询问求区间$[l,r]$的最大（最小）值</p>\n<h3 id=\"暴力算法\"><a href=\"#暴力算法\" class=\"headerlink\" title=\"暴力算法\"></a>暴力算法</h3><p>以区间最大值查询为例：</p>\n<pre><code class=\"cpp\">// a[n + 1]：给定数组\n// max[n + 1][n + 1]：max[l][r]记录a中区间[l,r]的最小值\nfor (int i = 1; i &lt;= n; ++i) {\n  max[i][i] = a[i];\n  for (int j = i + 1; j &lt;= n; ++j)\n    max[i][j] = std::min(max[i][j - 1], a[j]);\n  }</code></pre>\n<p>暴力算法的时间和空间复杂度都为：$O(n^2)$</p>\n<h3 id=\"优化思路：分治法，记忆化搜索\"><a href=\"#优化思路：分治法，记忆化搜索\" class=\"headerlink\" title=\"优化思路：分治法，记忆化搜索\"></a>优化思路：分治法，记忆化搜索</h3><p>先考虑求单次查询时显然有：$Min(a[i]|l\\leq i\\leq r)=Min(Min(a[i]|l\\leq i\\leq ⌊\\frac{l+r}{2}⌋), Min(a[i]|⌈\\frac{l+r}{2}⌉\\leq i\\leq r))$</p>\n<pre><code class=\"cpp\">int RMQMax(const int &amp;l, const int &amp;r) {\n  if (l == r) return a[l];\n  int &amp;&amp;m = (l + r) &gt;&gt; 1;\n  return std::max(RMQMax(l, m), RMQMax(m + 1, r));\n}</code></pre>\n<p>单次查询的时间复杂度是：$O(logn)$</p>\n<p>但如何把分治法用于多次查询呢？考虑<strong>记忆化搜索</strong>：在分治过程中打表</p>\n<ul>\n<li><code>RMQMax</code>的时间复杂度是$O(logn)$，故考虑$O(nlogn)$的表</li>\n<li>每次递归都把区间对半分割，故可考虑省去右端点，而改为记录区间长度$2^loglen$，这样每次递归只需把$loglen-=1$</li>\n<li>当区间长度不是$2$的整数次幂时，只需要把原区间划分成两个长为$2$的整数次幂的区间即可</li>\n</ul>\n<h4 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h4><p><a href=\"https://vjudge.net/problem/HRBUST-1189\" target=\"_blank\" rel=\"noopener\">模板题：HRBUST1189 区间最大值II</a></p>\n<pre><code class=\"cpp\">// Init\nstd::memset(dp, 0xff, sizeof(dp));\n\nint RMQDAC(const int &amp;l, const int &amp;loglen) {\n  if (dp[l][loglen] != -1) return dp[l][loglen];\n  if (loglen == 0) return dp[l][0] = a[l];\n  return dp[l][loglen] = std::max(RMQMax(l, loglen - 1),\n                                  RMQMax(l + Pow2(loglen - 1), loglen - 1));\n}\n\ninline int RMQMax(const int &amp;l, const int &amp;r) {\n  int loglen = std::log2(r - l + 1);\n  return std::max(RMQDAC(l, loglen), RMQDAC(r - Pow2(loglen) + 1, loglen));\n}</code></pre>\n<h3 id=\"动态规划的Sparse-Table（ST）算法\"><a href=\"#动态规划的Sparse-Table（ST）算法\" class=\"headerlink\" title=\"动态规划的Sparse Table（ST）算法\"></a>动态规划的Sparse Table（ST）算法</h3><p>分析一下记忆化搜索，就可以把它化作多态规划的ST算法</p>\n<h4 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h4><pre><code class=\"cpp\">inline int Pow2(const int &amp;x) { return 1 &lt;&lt; x; }\nvoid RMQST() {\n  for (int i = 1; i &lt;= n; ++i) max[i][0] = min[i][0] = a[i];\n  for (int j = 1; Pow2(j) &lt;= n; ++j)\n    for (int i = 1; i + Pow2(j - 1) &lt;= n; ++i) {\n      max[i][j] = std::max(max[i][j - 1], max[i + Pow2(j - 1)][j - 1]);\n      min[i][j] = std::min(min[i][j - 1], min[i + Pow2(j - 1)][j - 1]);\n    }\n}\ninline int RMQMax(const int &amp;l, const int &amp;r) {\n  int loglen = log2(r - l + 1);\n  return std::max(max[l][loglen], max[r - Pow2(loglen) + 1][loglen]);\n}\ninline int RMQMin(const int &amp;l, const int &amp;r) {\n  int loglen = log2(r - l + 1);\n  return std::min(min[l][loglen], min[r - Pow2(loglen) + 1][k]);\n}</code></pre>\n"},{"title":"Prefix Sum and Finite Difference","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-08T15:25:38.000Z","password":null,"summary":"前缀和与差分","_content":"\n## 前缀和\n\n### 定义\n\n$$\nsum[i]=\n\\begin{cases}\n0&                   {i=0}\\\\\\\\\n\\sum_{j=1}^{i}a[j]&  {i\\geq 1}\n\\end{cases}\n$$\n\n写成代码是：\n`sum[0] = 0;`\n`sum[i] = sum[i - 1] + a[i]`\n\n### 应用\n\n- 快速求区间和\n\n根据定义，有 $\\sum_{i=l}^{r}a[i] = sum[r] - sum[l - 1]$\n\n### 二维前缀和\n\n![$A\\cup B = A + B - A\\cap B$](Inclusion–exclusion%20principle.png)\n\n$$\nsum[y][x]=\n\\begin{cases}\n0&                   {y=0\\ or\\ x=0}\\\\\\\\\n\\sum_{i=1}^{y}\\sum_{j=1}^{x}a[i][j]&  {y\\geq 1\\ and\\ x\\geq 1}\n\\end{cases}\n$$\n\n根据容斥原理，有：\n`sum[y][0] = sum[0][x] = 0`\n`sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x]`\n\n- 快速求二维区间和\n\n根据定义，有 $\\sum_{y=y_0}^{y1}\\sum_{x=x_0}^{x1}a[y][x] = sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1]$\n\n### 模板\n\n```cpp\nvoid GeneratePrefixSum(int sum[], const int a[], const int &size) {\n  sum[0] = 0;\n  for (int i = 1; i <= size; ++i) sum[i] = sum[i - 1] + a[i];\n}\n\ninline int GetSum(const int sum[], const int &l, const int &r) {\n  return sum[r] - sum[l - 1];\n}\n\nvoid GeneratePrefixSum2D(int *sum[], const int *a[], const int &size_y,\n                         const int &size_x) {\n  for (int x = 0; x <= size_x; ++x) sum[0][x] = 0;\n\n  for (int y = 1; y <= size_y; ++y) {\n    sum[y][0] = 0;\n    for (int x = 1; x <= size_x; ++x)\n      sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x];\n  }\n}\n\ninline int GetSum2D(const int *sum[], const int &y0, const int &x0,\n                    const int &y1, const int &x1) {\n  return sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0][x0];\n}\n\n```\n\n## 差分\n\n### 定义\n\n$diff[i]=a[i] - a[i-1] (i\\geq 1且a[0] = 0)$\n\n差分是前缀和的逆运算，$a[]$是$diff[]$的前缀和\n\n### 应用\n\n- 区间染色转端点染色\n\n若有操作 $a[i] += t x\\leq i\\leq y$，可以令 $diff[x] += t, diff[y + 1] -= t$，对$diff$求前缀和，$sum[i]$即得所有操作对$a[i]$的影响\n\n### 二维差分\n\n二维前缀和的逆运算\n\n`diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1]`\n\n### 模板\n\n```cpp\nvoid GenerateFiniteDiff(int diff[], const int a[], const int &size) {\n  for (int i = 1; i <= size; ++i) diff[i] = a[i] - a[i - 1];\n}\n\ninline void Modify(int diff[], const int &l, const int &r, const int &val) {\n  diff[l] += val, diff[r + 1] -= val;\n}\n\nvoid GenerateFiniteDiff2D(int *diff[], const int *a[], const int &size_y,\n                          const int &size_x) {\n  for (int y = 1; y <= size_y; ++y) {\n    for (int x = 1; x <= size_x; ++x)\n      diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1];\n  }\n}\n\ninline void Modify2D(int *diff[], const int &y0, const int &x0, const int &y1,\n                     const int &x1, const int &val) {\n  diff[y0][x0] += val;\n  diff[y1 + 1][x0] -= val;\n  diff[y0][x1 + 1] -= val;\n  diff[y1 + 1][x1 + 1] += val;\n}\n\n```\n\n## 解题\n\n[CF1262E. Arson In Berland Forest](https://codeforces.com/problemset/problem/1262/E)\n\n题意：给一张有`x`和`.`两个标记的图，已知每单位时间`X`会扩散到周围8格，求最长的扩散时间及此时初始的图\n\n### 思路\n\n- 数据规模是$10^6$，考虑用**二分答案**求可能的时间，下界为0，上界为$max(m, n)$。\n- 确定`Judge(t)`函数：\n  - 对于答案的`X`点，在时间为$t$时，以其为左上角，$2t+1$为边长的正方形在输入图中都必须是`X`\n  - 那么可以枚举所有的`X`点，符合条件（输入图中以其为左上角的`X`必须有$(2t+1)^2$个）时对以其为左上角，边长为$2t+1$的正方形进行染色\n  - 最终若有输入图的`X`未被染色（染色数量小于输入图`X`的数量）则`Judge(t)`失败，反之成功\n- 考虑对其进行优化：\n  - 枚举符合条件的点时，如何快速计算输入图中以其为中心的`X`的数量？使用**二维前缀和**处理输入图\n  - 如何计算染色数量？使用**二维差分**进行端点染色，对差分计算**二维前缀和**后，将非0转为1，再计算一次**二维前缀和**\n- 时间复杂度：$O(nmlogn)$ 大约是$10^7$，本题 time limit per test: 2s\n\n### AC代码\n\n```cpp\n#include <iostream>\n#include <vector>\n\ntypedef std::vector<std::vector<int64_t> > V;\nint n, m;\nchar str[int(1e6 + 5)];\nV sum, diff, ds;\n\ninline int d(const int &x) { return x << 1; }\n\ninline int64_t GetSum2D(const V &sum, const int &y0, const int &x0,\n                        const int &y1, const int &x1) {\n  return sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1];\n}\n\ninline void Modify2D(V &diff, const int &y0, const int &x0, const int &y1,\n                     const int &x1, const int64_t &val) {\n  diff[y0][x0] += val;\n  diff[y1 + 1][x1 + 1] += val;\n  diff[y1 + 1][x0] -= val;\n  diff[y0][x1 + 1] -= val;\n}\n\nbool Judge(const int64_t &t) {\n  for (int i = 1; i <= n + 1; ++i) diff[i].assign(m + 2, 0);\n\n  for (int i = 1, sz_i = n - d(t); i <= sz_i; ++i)\n    for (int j = 1, sz_j = m - d(t); j <= sz_j; ++j)\n      if (GetSum2D(sum, i, j, i + d(t), j + d(t)) ==\n          int64_t(d(t) + 1) * (d(t) + 1))\n        Modify2D(diff, i, j, i + d(t), j + d(t), 1);\n\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= m; ++j) {\n      diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n      ds[i][j] =\n          ds[i - 1][j] + ds[i][j - 1] - ds[i - 1][j - 1] + (diff[i][j] > 0);\n    }\n\n  return GetSum2D(sum, 1, 1, n, m) == GetSum2D(ds, 1, 1, n, m);\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> n >> m;\n\n  // 计算输入图中'X'数量的前缀和\n  sum.resize(n + 1);\n  sum[0].resize(m + 1, 0);\n  for (int i = 1; i <= n; ++i) {\n    std::cin >> str + 1;\n\n    sum[i].resize(m + 1);\n    sum[i][0] = 0;\n    for (int j = 1; j <= m; ++j)\n      sum[i][j] =\n          sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + (str[j] == 'X');\n  }\n\n  // 初始化差分及其前缀和\n  diff.resize(n + 2);\n  ds.resize(n + 1);\n  diff[0].resize(m + 2, 0);\n  for (int i = 0; i <= n; ++i) ds[i].resize(m + 1, 0);\n\n  int r = (n > m ? n : m);\n  for (int l = 0, mid; l < r;) {\n    mid = (l + r) >> 1;\n    if (Judge(mid)) {\n      l = mid + 1;\n    } else {\n      r = mid;\n    }\n  }\n\n  std::cout << --r << \"\\n\";\n  for (int i = 1; i <= n; ++i) diff[i].assign(m + 1, 0);\n\n  for (int i = 1, sz_i = n - d(r); i <= sz_i; ++i)\n    for (int j = 1, sz_j = m - d(r); j <= sz_j; ++j)\n      if (GetSum2D(sum, i, j, i + d(r), j + d(r)) == (d(r) + 1) * (d(r) + 1))\n        diff[i + r][j + r] = 1;\n\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) std::cout << (diff[i][j] ? \"X\" : \".\");\n    std::cout << \"\\n\";\n  }\n\n  return 0;\n}\n\n```\n","source":"_posts/Prefix-Sum-and-Finite-Difference.md","raw":"---\ntitle: Prefix Sum and Finite Difference\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-08 23:25:38\npassword:\nsummary: 前缀和与差分\ntags:\n- 前缀和\n- 差分\ncategories:\n- 算法\n---\n\n## 前缀和\n\n### 定义\n\n$$\nsum[i]=\n\\begin{cases}\n0&                   {i=0}\\\\\\\\\n\\sum_{j=1}^{i}a[j]&  {i\\geq 1}\n\\end{cases}\n$$\n\n写成代码是：\n`sum[0] = 0;`\n`sum[i] = sum[i - 1] + a[i]`\n\n### 应用\n\n- 快速求区间和\n\n根据定义，有 $\\sum_{i=l}^{r}a[i] = sum[r] - sum[l - 1]$\n\n### 二维前缀和\n\n![$A\\cup B = A + B - A\\cap B$](Inclusion–exclusion%20principle.png)\n\n$$\nsum[y][x]=\n\\begin{cases}\n0&                   {y=0\\ or\\ x=0}\\\\\\\\\n\\sum_{i=1}^{y}\\sum_{j=1}^{x}a[i][j]&  {y\\geq 1\\ and\\ x\\geq 1}\n\\end{cases}\n$$\n\n根据容斥原理，有：\n`sum[y][0] = sum[0][x] = 0`\n`sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x]`\n\n- 快速求二维区间和\n\n根据定义，有 $\\sum_{y=y_0}^{y1}\\sum_{x=x_0}^{x1}a[y][x] = sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1]$\n\n### 模板\n\n```cpp\nvoid GeneratePrefixSum(int sum[], const int a[], const int &size) {\n  sum[0] = 0;\n  for (int i = 1; i <= size; ++i) sum[i] = sum[i - 1] + a[i];\n}\n\ninline int GetSum(const int sum[], const int &l, const int &r) {\n  return sum[r] - sum[l - 1];\n}\n\nvoid GeneratePrefixSum2D(int *sum[], const int *a[], const int &size_y,\n                         const int &size_x) {\n  for (int x = 0; x <= size_x; ++x) sum[0][x] = 0;\n\n  for (int y = 1; y <= size_y; ++y) {\n    sum[y][0] = 0;\n    for (int x = 1; x <= size_x; ++x)\n      sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x];\n  }\n}\n\ninline int GetSum2D(const int *sum[], const int &y0, const int &x0,\n                    const int &y1, const int &x1) {\n  return sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0][x0];\n}\n\n```\n\n## 差分\n\n### 定义\n\n$diff[i]=a[i] - a[i-1] (i\\geq 1且a[0] = 0)$\n\n差分是前缀和的逆运算，$a[]$是$diff[]$的前缀和\n\n### 应用\n\n- 区间染色转端点染色\n\n若有操作 $a[i] += t x\\leq i\\leq y$，可以令 $diff[x] += t, diff[y + 1] -= t$，对$diff$求前缀和，$sum[i]$即得所有操作对$a[i]$的影响\n\n### 二维差分\n\n二维前缀和的逆运算\n\n`diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1]`\n\n### 模板\n\n```cpp\nvoid GenerateFiniteDiff(int diff[], const int a[], const int &size) {\n  for (int i = 1; i <= size; ++i) diff[i] = a[i] - a[i - 1];\n}\n\ninline void Modify(int diff[], const int &l, const int &r, const int &val) {\n  diff[l] += val, diff[r + 1] -= val;\n}\n\nvoid GenerateFiniteDiff2D(int *diff[], const int *a[], const int &size_y,\n                          const int &size_x) {\n  for (int y = 1; y <= size_y; ++y) {\n    for (int x = 1; x <= size_x; ++x)\n      diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1];\n  }\n}\n\ninline void Modify2D(int *diff[], const int &y0, const int &x0, const int &y1,\n                     const int &x1, const int &val) {\n  diff[y0][x0] += val;\n  diff[y1 + 1][x0] -= val;\n  diff[y0][x1 + 1] -= val;\n  diff[y1 + 1][x1 + 1] += val;\n}\n\n```\n\n## 解题\n\n[CF1262E. Arson In Berland Forest](https://codeforces.com/problemset/problem/1262/E)\n\n题意：给一张有`x`和`.`两个标记的图，已知每单位时间`X`会扩散到周围8格，求最长的扩散时间及此时初始的图\n\n### 思路\n\n- 数据规模是$10^6$，考虑用**二分答案**求可能的时间，下界为0，上界为$max(m, n)$。\n- 确定`Judge(t)`函数：\n  - 对于答案的`X`点，在时间为$t$时，以其为左上角，$2t+1$为边长的正方形在输入图中都必须是`X`\n  - 那么可以枚举所有的`X`点，符合条件（输入图中以其为左上角的`X`必须有$(2t+1)^2$个）时对以其为左上角，边长为$2t+1$的正方形进行染色\n  - 最终若有输入图的`X`未被染色（染色数量小于输入图`X`的数量）则`Judge(t)`失败，反之成功\n- 考虑对其进行优化：\n  - 枚举符合条件的点时，如何快速计算输入图中以其为中心的`X`的数量？使用**二维前缀和**处理输入图\n  - 如何计算染色数量？使用**二维差分**进行端点染色，对差分计算**二维前缀和**后，将非0转为1，再计算一次**二维前缀和**\n- 时间复杂度：$O(nmlogn)$ 大约是$10^7$，本题 time limit per test: 2s\n\n### AC代码\n\n```cpp\n#include <iostream>\n#include <vector>\n\ntypedef std::vector<std::vector<int64_t> > V;\nint n, m;\nchar str[int(1e6 + 5)];\nV sum, diff, ds;\n\ninline int d(const int &x) { return x << 1; }\n\ninline int64_t GetSum2D(const V &sum, const int &y0, const int &x0,\n                        const int &y1, const int &x1) {\n  return sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1];\n}\n\ninline void Modify2D(V &diff, const int &y0, const int &x0, const int &y1,\n                     const int &x1, const int64_t &val) {\n  diff[y0][x0] += val;\n  diff[y1 + 1][x1 + 1] += val;\n  diff[y1 + 1][x0] -= val;\n  diff[y0][x1 + 1] -= val;\n}\n\nbool Judge(const int64_t &t) {\n  for (int i = 1; i <= n + 1; ++i) diff[i].assign(m + 2, 0);\n\n  for (int i = 1, sz_i = n - d(t); i <= sz_i; ++i)\n    for (int j = 1, sz_j = m - d(t); j <= sz_j; ++j)\n      if (GetSum2D(sum, i, j, i + d(t), j + d(t)) ==\n          int64_t(d(t) + 1) * (d(t) + 1))\n        Modify2D(diff, i, j, i + d(t), j + d(t), 1);\n\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= m; ++j) {\n      diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n      ds[i][j] =\n          ds[i - 1][j] + ds[i][j - 1] - ds[i - 1][j - 1] + (diff[i][j] > 0);\n    }\n\n  return GetSum2D(sum, 1, 1, n, m) == GetSum2D(ds, 1, 1, n, m);\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin >> n >> m;\n\n  // 计算输入图中'X'数量的前缀和\n  sum.resize(n + 1);\n  sum[0].resize(m + 1, 0);\n  for (int i = 1; i <= n; ++i) {\n    std::cin >> str + 1;\n\n    sum[i].resize(m + 1);\n    sum[i][0] = 0;\n    for (int j = 1; j <= m; ++j)\n      sum[i][j] =\n          sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + (str[j] == 'X');\n  }\n\n  // 初始化差分及其前缀和\n  diff.resize(n + 2);\n  ds.resize(n + 1);\n  diff[0].resize(m + 2, 0);\n  for (int i = 0; i <= n; ++i) ds[i].resize(m + 1, 0);\n\n  int r = (n > m ? n : m);\n  for (int l = 0, mid; l < r;) {\n    mid = (l + r) >> 1;\n    if (Judge(mid)) {\n      l = mid + 1;\n    } else {\n      r = mid;\n    }\n  }\n\n  std::cout << --r << \"\\n\";\n  for (int i = 1; i <= n; ++i) diff[i].assign(m + 1, 0);\n\n  for (int i = 1, sz_i = n - d(r); i <= sz_i; ++i)\n    for (int j = 1, sz_j = m - d(r); j <= sz_j; ++j)\n      if (GetSum2D(sum, i, j, i + d(r), j + d(r)) == (d(r) + 1) * (d(r) + 1))\n        diff[i + r][j + r] = 1;\n\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1; j <= m; ++j) std::cout << (diff[i][j] ? \"X\" : \".\");\n    std::cout << \"\\n\";\n  }\n\n  return 0;\n}\n\n```\n","slug":"Prefix-Sum-and-Finite-Difference","published":1,"updated":"2021-04-25T07:11:17.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwuuouw000szcl0ss7pxui1","content":"<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$$<br>sum[i]=<br>\\begin{cases}<br>0&amp;                   {i=0}\\\\<br>\\sum_{j=1}^{i}a[j]&amp;  {i\\geq 1}<br>\\end{cases}<br>$$</p>\n<p>写成代码是：<br><code>sum[0] = 0;</code><br><code>sum[i] = sum[i - 1] + a[i]</code></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>快速求区间和</li>\n</ul>\n<p>根据定义，有 $\\sum_{i=l}^{r}a[i] = sum[r] - sum[l - 1]$</p>\n<h3 id=\"二维前缀和\"><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3><p><img src=\"Inclusion%E2%80%93exclusion%20principle.png\" alt=\"$A\\cup B = A + B - A\\cap B$\"></p>\n<p>$$<br>sum[y][x]=<br>\\begin{cases}<br>0&amp;                   {y=0\\ or\\ x=0}\\\\<br>\\sum_{i=1}^{y}\\sum_{j=1}^{x}a[i][j]&amp;  {y\\geq 1\\ and\\ x\\geq 1}<br>\\end{cases}<br>$$</p>\n<p>根据容斥原理，有：<br><code>sum[y][0] = sum[0][x] = 0</code><br><code>sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x]</code></p>\n<ul>\n<li>快速求二维区间和</li>\n</ul>\n<p>根据定义，有 $\\sum_{y=y_0}^{y1}\\sum_{x=x_0}^{x1}a[y][x] = sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1]$</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">GeneratePrefixSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">GeneratePrefixSum2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>sum<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>size_y<span class=\"token punctuation\">,</span>\n                         <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>size_x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sum<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span>\n      sum<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">GetSum2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>sum<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>y0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$diff[i]=a[i] - a[i-1] (i\\geq 1且a[0] = 0)$</p>\n<p>差分是前缀和的逆运算，$a[]$是$diff[]$的前缀和</p>\n<h3 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>区间染色转端点染色</li>\n</ul>\n<p>若有操作 $a[i] += t x\\leq i\\leq y$，可以令 $diff[x] += t, diff[y + 1] -= t$，对$diff$求前缀和，$sum[i]$即得所有操作对$a[i]$的影响</p>\n<h3 id=\"二维差分\"><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h3><p>二维前缀和的逆运算</p>\n<p><code>diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1]</code></p>\n<h3 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">GenerateFiniteDiff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> diff<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> diff<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">[</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">GenerateFiniteDiff2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>diff<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>size_y<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>size_x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> size_y<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> size_x<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span>\n      diff<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>diff<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token punctuation\">[</span>y0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span>y0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h2><p><a href=\"https://codeforces.com/problemset/problem/1262/E\" target=\"_blank\" rel=\"noopener\">CF1262E. Arson In Berland Forest</a></p>\n<p>题意：给一张有<code>x</code>和<code>.</code>两个标记的图，已知每单位时间<code>X</code>会扩散到周围8格，求最长的扩散时间及此时初始的图</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>数据规模是$10^6$，考虑用<strong>二分答案</strong>求可能的时间，下界为0，上界为$max(m, n)$。</li>\n<li>确定<code>Judge(t)</code>函数：<ul>\n<li>对于答案的<code>X</code>点，在时间为$t$时，以其为左上角，$2t+1$为边长的正方形在输入图中都必须是<code>X</code></li>\n<li>那么可以枚举所有的<code>X</code>点，符合条件（输入图中以其为左上角的<code>X</code>必须有$(2t+1)^2$个）时对以其为左上角，边长为$2t+1$的正方形进行染色</li>\n<li>最终若有输入图的<code>X</code>未被染色（染色数量小于输入图<code>X</code>的数量）则<code>Judge(t)</code>失败，反之成功</li>\n</ul>\n</li>\n<li>考虑对其进行优化：<ul>\n<li>枚举符合条件的点时，如何快速计算输入图中以其为中心的<code>X</code>的数量？使用<strong>二维前缀和</strong>处理输入图</li>\n<li>如何计算染色数量？使用<strong>二维差分</strong>进行端点染色，对差分计算<strong>二维前缀和</strong>后，将非0转为1，再计算一次<strong>二维前缀和</strong></li>\n</ul>\n</li>\n<li>时间复杂度：$O(nmlogn)$ 大约是$10^7$，本题 time limit per test: 2s</li>\n</ul>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">typedef</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span> <span class=\"token operator\">></span> V<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e6</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nV sum<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">,</span> ds<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> int64_t <span class=\"token function\">GetSum2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> V <span class=\"token operator\">&amp;</span>sum<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>y1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Modify2D</span><span class=\"token punctuation\">(</span>V <span class=\"token operator\">&amp;</span>diff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y1<span class=\"token punctuation\">,</span>\n                     <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> int64_t <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diff<span class=\"token punctuation\">[</span>y0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x0<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span>y0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">Judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int64_t <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sz_i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> sz_i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sz_j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> sz_j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetSum2D</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span>\n          <span class=\"token function\">int64_t</span><span class=\"token punctuation\">(</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">Modify2D</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> diff<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> diff<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      ds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n          ds<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> ds<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">GetSum2D</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">GetSum2D</span><span class=\"token punctuation\">(</span>ds<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 计算输入图中'X'数量的前缀和</span>\n  sum<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cin <span class=\"token operator\">>></span> str <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n          sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 初始化差分及其前缀和</span>\n  diff<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ds<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  diff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> m <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Judge</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">--</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sz_i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> sz_i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> sz_j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> sz_j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetSum2D</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        diff<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"X\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$$<br>sum[i]=<br>\\begin{cases}<br>0&amp;                   {i=0}\\\\<br>\\sum_{j=1}^{i}a[j]&amp;  {i\\geq 1}<br>\\end{cases}<br>$$</p>\n<p>写成代码是：<br><code>sum[0] = 0;</code><br><code>sum[i] = sum[i - 1] + a[i]</code></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>快速求区间和</li>\n</ul>\n<p>根据定义，有 $\\sum_{i=l}^{r}a[i] = sum[r] - sum[l - 1]$</p>\n<h3 id=\"二维前缀和\"><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3><p><img src=\"Inclusion%E2%80%93exclusion%20principle.png\" alt=\"$A\\cup B = A + B - A\\cap B$\"></p>\n<p>$$<br>sum[y][x]=<br>\\begin{cases}<br>0&amp;                   {y=0\\ or\\ x=0}\\\\<br>\\sum_{i=1}^{y}\\sum_{j=1}^{x}a[i][j]&amp;  {y\\geq 1\\ and\\ x\\geq 1}<br>\\end{cases}<br>$$</p>\n<p>根据容斥原理，有：<br><code>sum[y][0] = sum[0][x] = 0</code><br><code>sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x]</code></p>\n<ul>\n<li>快速求二维区间和</li>\n</ul>\n<p>根据定义，有 $\\sum_{y=y_0}^{y1}\\sum_{x=x_0}^{x1}a[y][x] = sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1]$</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre><code class=\"cpp\">void GeneratePrefixSum(int sum[], const int a[], const int &amp;size) {\n  sum[0] = 0;\n  for (int i = 1; i &lt;= size; ++i) sum[i] = sum[i - 1] + a[i];\n}\n\ninline int GetSum(const int sum[], const int &amp;l, const int &amp;r) {\n  return sum[r] - sum[l - 1];\n}\n\nvoid GeneratePrefixSum2D(int *sum[], const int *a[], const int &amp;size_y,\n                         const int &amp;size_x) {\n  for (int x = 0; x &lt;= size_x; ++x) sum[0][x] = 0;\n\n  for (int y = 1; y &lt;= size_y; ++y) {\n    sum[y][0] = 0;\n    for (int x = 1; x &lt;= size_x; ++x)\n      sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x];\n  }\n}\n\ninline int GetSum2D(const int *sum[], const int &amp;y0, const int &amp;x0,\n                    const int &amp;y1, const int &amp;x1) {\n  return sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0][x0];\n}\n</code></pre>\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>$diff[i]=a[i] - a[i-1] (i\\geq 1且a[0] = 0)$</p>\n<p>差分是前缀和的逆运算，$a[]$是$diff[]$的前缀和</p>\n<h3 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li>区间染色转端点染色</li>\n</ul>\n<p>若有操作 $a[i] += t x\\leq i\\leq y$，可以令 $diff[x] += t, diff[y + 1] -= t$，对$diff$求前缀和，$sum[i]$即得所有操作对$a[i]$的影响</p>\n<h3 id=\"二维差分\"><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h3><p>二维前缀和的逆运算</p>\n<p><code>diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1]</code></p>\n<h3 id=\"模板-1\"><a href=\"#模板-1\" class=\"headerlink\" title=\"模板\"></a>模板</h3><pre><code class=\"cpp\">void GenerateFiniteDiff(int diff[], const int a[], const int &amp;size) {\n  for (int i = 1; i &lt;= size; ++i) diff[i] = a[i] - a[i - 1];\n}\n\ninline void Modify(int diff[], const int &amp;l, const int &amp;r, const int &amp;val) {\n  diff[l] += val, diff[r + 1] -= val;\n}\n\nvoid GenerateFiniteDiff2D(int *diff[], const int *a[], const int &amp;size_y,\n                          const int &amp;size_x) {\n  for (int y = 1; y &lt;= size_y; ++y) {\n    for (int x = 1; x &lt;= size_x; ++x)\n      diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1];\n  }\n}\n\ninline void Modify2D(int *diff[], const int &amp;y0, const int &amp;x0, const int &amp;y1,\n                     const int &amp;x1, const int &amp;val) {\n  diff[y0][x0] += val;\n  diff[y1 + 1][x0] -= val;\n  diff[y0][x1 + 1] -= val;\n  diff[y1 + 1][x1 + 1] += val;\n}\n</code></pre>\n<h2 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h2><p><a href=\"https://codeforces.com/problemset/problem/1262/E\" target=\"_blank\" rel=\"noopener\">CF1262E. Arson In Berland Forest</a></p>\n<p>题意：给一张有<code>x</code>和<code>.</code>两个标记的图，已知每单位时间<code>X</code>会扩散到周围8格，求最长的扩散时间及此时初始的图</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>数据规模是$10^6$，考虑用<strong>二分答案</strong>求可能的时间，下界为0，上界为$max(m, n)$。</li>\n<li>确定<code>Judge(t)</code>函数：<ul>\n<li>对于答案的<code>X</code>点，在时间为$t$时，以其为左上角，$2t+1$为边长的正方形在输入图中都必须是<code>X</code></li>\n<li>那么可以枚举所有的<code>X</code>点，符合条件（输入图中以其为左上角的<code>X</code>必须有$(2t+1)^2$个）时对以其为左上角，边长为$2t+1$的正方形进行染色</li>\n<li>最终若有输入图的<code>X</code>未被染色（染色数量小于输入图<code>X</code>的数量）则<code>Judge(t)</code>失败，反之成功</li>\n</ul>\n</li>\n<li>考虑对其进行优化：<ul>\n<li>枚举符合条件的点时，如何快速计算输入图中以其为中心的<code>X</code>的数量？使用<strong>二维前缀和</strong>处理输入图</li>\n<li>如何计算染色数量？使用<strong>二维差分</strong>进行端点染色，对差分计算<strong>二维前缀和</strong>后，将非0转为1，再计算一次<strong>二维前缀和</strong></li>\n</ul>\n</li>\n<li>时间复杂度：$O(nmlogn)$ 大约是$10^7$，本题 time limit per test: 2s</li>\n</ul>\n<h3 id=\"AC代码\"><a href=\"#AC代码\" class=\"headerlink\" title=\"AC代码\"></a>AC代码</h3><pre><code class=\"cpp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\ntypedef std::vector&lt;std::vector&lt;int64_t&gt; &gt; V;\nint n, m;\nchar str[int(1e6 + 5)];\nV sum, diff, ds;\n\ninline int d(const int &amp;x) { return x &lt;&lt; 1; }\n\ninline int64_t GetSum2D(const V &amp;sum, const int &amp;y0, const int &amp;x0,\n                        const int &amp;y1, const int &amp;x1) {\n  return sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1];\n}\n\ninline void Modify2D(V &amp;diff, const int &amp;y0, const int &amp;x0, const int &amp;y1,\n                     const int &amp;x1, const int64_t &amp;val) {\n  diff[y0][x0] += val;\n  diff[y1 + 1][x1 + 1] += val;\n  diff[y1 + 1][x0] -= val;\n  diff[y0][x1 + 1] -= val;\n}\n\nbool Judge(const int64_t &amp;t) {\n  for (int i = 1; i &lt;= n + 1; ++i) diff[i].assign(m + 2, 0);\n\n  for (int i = 1, sz_i = n - d(t); i &lt;= sz_i; ++i)\n    for (int j = 1, sz_j = m - d(t); j &lt;= sz_j; ++j)\n      if (GetSum2D(sum, i, j, i + d(t), j + d(t)) ==\n          int64_t(d(t) + 1) * (d(t) + 1))\n        Modify2D(diff, i, j, i + d(t), j + d(t), 1);\n\n  for (int i = 1; i &lt;= n; ++i)\n    for (int j = 1; j &lt;= m; ++j) {\n      diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n      ds[i][j] =\n          ds[i - 1][j] + ds[i][j - 1] - ds[i - 1][j - 1] + (diff[i][j] &gt; 0);\n    }\n\n  return GetSum2D(sum, 1, 1, n, m) == GetSum2D(ds, 1, 1, n, m);\n}\n\nint main() {\n  std::ios::sync_with_stdio(0);\n  std::cin.tie(0), std::cout.tie(0);\n\n  std::cin &gt;&gt; n &gt;&gt; m;\n\n  // 计算输入图中&#39;X&#39;数量的前缀和\n  sum.resize(n + 1);\n  sum[0].resize(m + 1, 0);\n  for (int i = 1; i &lt;= n; ++i) {\n    std::cin &gt;&gt; str + 1;\n\n    sum[i].resize(m + 1);\n    sum[i][0] = 0;\n    for (int j = 1; j &lt;= m; ++j)\n      sum[i][j] =\n          sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + (str[j] == &#39;X&#39;);\n  }\n\n  // 初始化差分及其前缀和\n  diff.resize(n + 2);\n  ds.resize(n + 1);\n  diff[0].resize(m + 2, 0);\n  for (int i = 0; i &lt;= n; ++i) ds[i].resize(m + 1, 0);\n\n  int r = (n &gt; m ? n : m);\n  for (int l = 0, mid; l &lt; r;) {\n    mid = (l + r) &gt;&gt; 1;\n    if (Judge(mid)) {\n      l = mid + 1;\n    } else {\n      r = mid;\n    }\n  }\n\n  std::cout &lt;&lt; --r &lt;&lt; &quot;\\n&quot;;\n  for (int i = 1; i &lt;= n; ++i) diff[i].assign(m + 1, 0);\n\n  for (int i = 1, sz_i = n - d(r); i &lt;= sz_i; ++i)\n    for (int j = 1, sz_j = m - d(r); j &lt;= sz_j; ++j)\n      if (GetSum2D(sum, i, j, i + d(r), j + d(r)) == (d(r) + 1) * (d(r) + 1))\n        diff[i + r][j + r] = 1;\n\n  for (int i = 1; i &lt;= n; ++i) {\n    for (int j = 1; j &lt;= m; ++j) std::cout &lt;&lt; (diff[i][j] ? &quot;X&quot; : &quot;.&quot;);\n    std::cout &lt;&lt; &quot;\\n&quot;;\n  }\n\n  return 0;\n}\n</code></pre>\n"}],"PostAsset":[{"_id":"source/_posts/Binary-Indexed-Tree/binary-indexed-tree.png","slug":"binary-indexed-tree.png","post":"cknwuuoua0003zcl0go2jhufx","modified":0,"renderable":0},{"_id":"source/_posts/Prefix-Sum-and-Finite-Difference/Inclusion–exclusion principle.png","slug":"Inclusion–exclusion principle.png","post":"cknwuuouw000szcl0ss7pxui1","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/2D_array.png","slug":"2D_array.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/array.png","slug":"array.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_1.png","slug":"ce_1.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_2.png","slug":"ce_2.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_3.png","slug":"ce_3.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_4.png","slug":"ce_4.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0},{"_id":"source/_posts/CTF-Tictactoe-Game-CE-Hacking/ce_5.png","slug":"ce_5.png","post":"cknwuuouj000azcl0r5ivccrc","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cknwuuou20001zcl05ip9v2ut","category_id":"cknwuuoud0005zcl0f22p9xl3","_id":"cknwuuoup000fzcl0r6gex9e1"},{"post_id":"cknwuuoum000dzcl0bghk6iop","category_id":"cknwuuoul000bzcl0tw5sbl68","_id":"cknwuuout000lzcl0wwkdbemt"},{"post_id":"cknwuuoua0003zcl0go2jhufx","category_id":"cknwuuoul000bzcl0tw5sbl68","_id":"cknwuuouv000qzcl02qquvvyb"},{"post_id":"cknwuuouo000ezcl0kbhm677y","category_id":"cknwuuoul000bzcl0tw5sbl68","_id":"cknwuuoux000tzcl0stjwhtni"},{"post_id":"cknwuuouq000izcl0b09tlfd7","category_id":"cknwuuoul000bzcl0tw5sbl68","_id":"cknwuuouy000wzcl0x0cjt6lt"},{"post_id":"cknwuuouf0007zcl0bmjtgdvh","category_id":"cknwuuoup000gzcl05xvqfemx","_id":"cknwuuouz000yzcl08m53indz"},{"post_id":"cknwuuouu000pzcl0ywkxin3b","category_id":"cknwuuoul000bzcl0tw5sbl68","_id":"cknwuuov00010zcl0vt42fg3f"},{"post_id":"cknwuuoui0009zcl0e4aa9bfh","category_id":"cknwuuouu000nzcl0wilwy7i1","_id":"cknwuuov10012zcl0yri4pukn"},{"post_id":"cknwuuouw000szcl0ss7pxui1","category_id":"cknwuuoul000bzcl0tw5sbl68","_id":"cknwuuov10013zcl03jn3rvzi"},{"post_id":"cknwuuouj000azcl0r5ivccrc","category_id":"cknwuuouu000nzcl0wilwy7i1","_id":"cknwuuov10015zcl0ja0fp7gy"},{"post_id":"cknwuuous000kzcl0zzxz3j38","category_id":"cknwuuov0000zzcl0dxk43taa","_id":"cknwuuov20016zcl0zhgs5t3x"}],"PostTag":[{"post_id":"cknwuuou20001zcl05ip9v2ut","tag_id":"cknwuuouf0006zcl0h6jlqf39","_id":"cknwuuous000jzcl0xfo6fxy7"},{"post_id":"cknwuuou20001zcl05ip9v2ut","tag_id":"cknwuuoul000czcl04arbz84h","_id":"cknwuuout000mzcl0s0kt5tso"},{"post_id":"cknwuuoua0003zcl0go2jhufx","tag_id":"cknwuuouq000hzcl05fcc8apb","_id":"cknwuuouw000rzcl0ic7w1lm6"},{"post_id":"cknwuuouf0007zcl0bmjtgdvh","tag_id":"cknwuuouu000ozcl0at9xl20n","_id":"cknwuuouz000xzcl073rfqdhy"},{"post_id":"cknwuuoui0009zcl0e4aa9bfh","tag_id":"cknwuuoux000vzcl0gybcvbry","_id":"cknwuuov20018zcl0mq7tsp8l"},{"post_id":"cknwuuoui0009zcl0e4aa9bfh","tag_id":"cknwuuov00011zcl02oj3fz76","_id":"cknwuuov20019zcl0wth4e6sg"},{"post_id":"cknwuuoui0009zcl0e4aa9bfh","tag_id":"cknwuuov10014zcl0udjd6ie2","_id":"cknwuuov3001bzcl0hvm16lyd"},{"post_id":"cknwuuouj000azcl0r5ivccrc","tag_id":"cknwuuoux000vzcl0gybcvbry","_id":"cknwuuov4001ezcl0ys1nabmo"},{"post_id":"cknwuuouj000azcl0r5ivccrc","tag_id":"cknwuuov00011zcl02oj3fz76","_id":"cknwuuov4001fzcl04fusb301"},{"post_id":"cknwuuouj000azcl0r5ivccrc","tag_id":"cknwuuov10014zcl0udjd6ie2","_id":"cknwuuov5001hzcl0xgwhspjz"},{"post_id":"cknwuuoum000dzcl0bghk6iop","tag_id":"cknwuuov4001dzcl02pnacqlu","_id":"cknwuuov5001kzcl01n0oimic"},{"post_id":"cknwuuoum000dzcl0bghk6iop","tag_id":"cknwuuov4001gzcl0j65w7luk","_id":"cknwuuov6001lzcl084s00l9l"},{"post_id":"cknwuuoum000dzcl0bghk6iop","tag_id":"cknwuuov5001izcl030zgfk8f","_id":"cknwuuov6001nzcl07e6x8mhm"},{"post_id":"cknwuuouo000ezcl0kbhm677y","tag_id":"cknwuuov5001jzcl0eapgrdi7","_id":"cknwuuov7001rzcl0k7clkl0d"},{"post_id":"cknwuuouo000ezcl0kbhm677y","tag_id":"cknwuuov6001mzcl09i2qhb75","_id":"cknwuuov7001szcl0kp2uhfc8"},{"post_id":"cknwuuouo000ezcl0kbhm677y","tag_id":"cknwuuov6001ozcl0ovpdkrol","_id":"cknwuuov8001uzcl0ewi14pev"},{"post_id":"cknwuuouo000ezcl0kbhm677y","tag_id":"cknwuuov6001pzcl0ce5w2bw2","_id":"cknwuuov8001vzcl0s31tommt"},{"post_id":"cknwuuouq000izcl0b09tlfd7","tag_id":"cknwuuov4001dzcl02pnacqlu","_id":"cknwuuov8001xzcl0a15u1ohb"},{"post_id":"cknwuuouq000izcl0b09tlfd7","tag_id":"cknwuuov8001tzcl00x0j7mip","_id":"cknwuuov9001yzcl0xl7phehf"},{"post_id":"cknwuuous000kzcl0zzxz3j38","tag_id":"cknwuuov8001wzcl08h2wwal5","_id":"cknwuuova0021zcl0z2pmdzzr"},{"post_id":"cknwuuous000kzcl0zzxz3j38","tag_id":"cknwuuov9001zzcl0rta5aapj","_id":"cknwuuova0022zcl06m19kqh6"},{"post_id":"cknwuuouu000pzcl0ywkxin3b","tag_id":"cknwuuov4001dzcl02pnacqlu","_id":"cknwuuova0025zcl0en0jet33"},{"post_id":"cknwuuouu000pzcl0ywkxin3b","tag_id":"cknwuuova0023zcl0goq9chx8","_id":"cknwuuovb0026zcl0vtvm14ib"},{"post_id":"cknwuuouw000szcl0ss7pxui1","tag_id":"cknwuuova0024zcl07lke8vsd","_id":"cknwuuovb0028zcl03lbc9nhf"},{"post_id":"cknwuuouw000szcl0ss7pxui1","tag_id":"cknwuuovb0027zcl0vw8buvwo","_id":"cknwuuovb0029zcl0h2trbe1i"}],"Tag":[{"name":"ACM","_id":"cknwuuouf0006zcl0h6jlqf39"},{"name":"错题本","_id":"cknwuuoul000czcl04arbz84h"},{"name":"树状数组","_id":"cknwuuouq000hzcl05fcc8apb"},{"name":"高数","_id":"cknwuuouu000ozcl0at9xl20n"},{"name":"CTF","_id":"cknwuuoux000vzcl0gybcvbry"},{"name":"二进制","_id":"cknwuuov00011zcl02oj3fz76"},{"name":"实验","_id":"cknwuuov10014zcl0udjd6ie2"},{"name":"动态规划","_id":"cknwuuov4001dzcl02pnacqlu"},{"name":"贪心","_id":"cknwuuov4001gzcl0j65w7luk"},{"name":"二分查找","_id":"cknwuuov5001izcl030zgfk8f"},{"name":"最小生成树","_id":"cknwuuov5001jzcl0eapgrdi7"},{"name":"图论","_id":"cknwuuov6001mzcl09i2qhb75"},{"name":"堆排序","_id":"cknwuuov6001ozcl0ovpdkrol"},{"name":"并查集","_id":"cknwuuov6001pzcl0ce5w2bw2"},{"name":"背包DP","_id":"cknwuuov8001tzcl00x0j7mip"},{"name":"教程","_id":"cknwuuov8001wzcl08h2wwal5"},{"name":"博客","_id":"cknwuuov9001zzcl0rta5aapj"},{"name":"ST算法","_id":"cknwuuova0023zcl0goq9chx8"},{"name":"前缀和","_id":"cknwuuova0024zcl07lke8vsd"},{"name":"差分","_id":"cknwuuovb0027zcl0vw8buvwo"}]}}