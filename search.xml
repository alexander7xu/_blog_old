<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Higher Mathematics</title>
      <link href="/higher-mathematics/"/>
      <url>/higher-mathematics/</url>
      
        <content type="html"><![CDATA[<h2 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h2><h3 id="函数的极限"><a href="#函数的极限" class="headerlink" title="函数的极限"></a>函数的极限</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>极限：$\lim\limits_{x\to x_0}f(x)=A\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当0&lt;|x-x_0|&lt;δ时，有|f(x)-A|&lt;ε$</p><p>左极限：$\lim\limits_{x\to x_0^-}f(x)=A\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当x_0-δ&lt;x&lt;x_0时，有|f(x)-A|&lt;ε$</p><p>右极限：$\lim\limits_{x\to x_0^+}f(x)=A\Leftrightarrow ∀ε&gt;0，∃δ&gt;0，当x_0&lt;x&lt;x_0+δ时，有|f(x)-A|&lt;ε$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>存在的充要条件：$\lim\limits_{x\to x_0}f(x)=A\Leftrightarrow \lim\limits_{x\to x_0^-}f(x)=\lim\limits_{x\to x_0^+}f(x)=A$</p><p>唯一性：$\lim\limits_{x\to x_0}f(x)=A\Rightarrow 该极限唯一$</p><p>局部有界性：$\lim\limits_{x\to x_0}f(x)=A\Rightarrow ∀M&gt;0，δ&gt;0，0&lt;|x-x_0|&lt;δ，|f(x)|≤M$</p><p>局部保号性：$\lim\limits_{x\to x_0}f(x)=A&gt;0\Rightarrow ∀δ&gt;0，0&lt;|x-x_0|&lt;δ，f(x)&gt;0$，小于0同理</p><h3 id="极限运算法则"><a href="#极限运算法则" class="headerlink" title="极限运算法则"></a>极限运算法则</h3><ul><li><strong>有限个</strong>无穷小的和是无穷小（任意个为Undefined）</li><li><strong>有限个</strong>无穷小（大）的积是无穷小（大）（任意个为Undefined）</li><li>有界函数乘无穷小的积是无穷小</li></ul><h4 id="线性运算性质"><a href="#线性运算性质" class="headerlink" title="线性运算性质"></a>线性运算性质</h4><p>$\lim f(x)=A，\lim g(x)=B\Rightarrow\lim (f(x)±g(x))=A±B$</p><p>$\lim f(x)=A，\lim g(x)=B\Rightarrow\lim (f(x)g(x))=AB$</p><p>$\lim f(x)=A，\lim g(x)=B\neq 0\Rightarrow\lim\frac{f(x)}{g(x)}=\frac{A}{B}$</p><p>$\lim (cf(x))=c\lim f(x)$（c为常数）</p><p>$\lim (f(x))^n=(\lim f(x))^n$（n为正整数）</p><h4 id="括号穿透"><a href="#括号穿透" class="headerlink" title="括号穿透"></a>括号穿透</h4><p>$\lim\limits_{x\to x_0}f(g(x))=f(\lim\limits_{x\to x_0}g(x))$</p><h3 id="极限存在准则-两个重要极限"><a href="#极限存在准则-两个重要极限" class="headerlink" title="极限存在准则 两个重要极限"></a>极限存在准则 两个重要极限</h3><h4 id="夹逼准则"><a href="#夹逼准则" class="headerlink" title="夹逼准则"></a>夹逼准则</h4><p>$x∈\mathring{U}(x_0,r)，g(x)≤f(x)≤h(x)，且\lim\limits_{x\to x_0}g(x)=\lim\limits_{x\to x_0}h(x)=A\Rightarrow \lim\limits_{x\to x_0}f(x)=A$</p><h4 id="重要极限"><a href="#重要极限" class="headerlink" title="重要极限"></a>重要极限</h4><ul><li><p>$\lim\limits_{x\to x_0}\frac{sinx}{x}=1$</p><blockquote><p>证明：$sinx&lt;x&lt;tanx\Rightarrow cosx&lt;\frac{sinx}{x}&lt;1，\lim\limits_{x\to 0}cosx=1\Rightarrow 夹逼准则证出$</p></blockquote></li><li><p>$\lim\limits_{x\to ∞}(1+\frac{1}{x})^x=\lim\limits_{x\to 0}(1+x)^\frac{1}{x}=e$</p><blockquote><p>证明：$(1+\frac{1}{n})^n二项式展开后\leq \sum_{i=0}^{n}\frac{1}{i!}\leq 2+\sum_{i=1}^{n}\frac{1}{2^i}=3-\frac{1}{2^(n-1)}\le 3$，证明极限存在，<strong>定义其为e</strong></p></blockquote></li></ul><h3 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h3><h4 id="常用等价无穷小"><a href="#常用等价无穷小" class="headerlink" title="常用等价无穷小"></a>常用等价无穷小</h4><ul><li>$x \sim sinx \sim arcsinx \sim tanx \sim arctanx \sim ln(x+1) \sim e^x-1$</li><li>$1-cosx \sim \frac{x^2}{2} \sim \frac{1}{cosx}-1$</li><li>$(1+x)^α-1 \sim αx$</li><li>$tanx-sinx \sim \frac{x^3}{2}$</li></ul><h3 id="连续函数的性质"><a href="#连续函数的性质" class="headerlink" title="连续函数的性质"></a>连续函数的性质</h3><h4 id="介值定理"><a href="#介值定理" class="headerlink" title="介值定理"></a>介值定理</h4><p>$f(x)∈c[a,b]，f(a)=A，f(b)=B\Rightarrow ∀C∈(A,B)，∃ξ∈(a,b)，st.f(ξ)=C$</p><h2 id="导数与微分"><a href="#导数与微分" class="headerlink" title="导数与微分"></a>导数与微分</h2><p>连续不一定可导（可微）；可导（可微）一定连续</p><p>不是明确可导的函数，不能直接写$f’(x)$，而要先写$\lim\limits_{x\to x_0}\frac{f(x)-f(x_0)}{x-x_0}$存在</p><h3 id="求导法则"><a href="#求导法则" class="headerlink" title="求导法则"></a>求导法则</h3><h4 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h4><p>$y=f(x)$单调、可导、且$f’(x)\neq 0\Rightarrow (f^{-1}(y))’=\frac{1}{f’(x)}$，<strong>最后记得化作$g(x)=f^{-1}(y)$</strong></p><h4 id="复合函数"><a href="#复合函数" class="headerlink" title="复合函数"></a>复合函数</h4><p>$y=f(g(x))，g(x)在x处可导，f(u)在u=g(x)处可导\Rightarrow y’=\frac{dy}{dx}=\frac{dy}{du}\frac{du}{dx}=f’(g(x))g’(x)$</p><h4 id="常用公式表及推导方法"><a href="#常用公式表及推导方法" class="headerlink" title="常用公式表及推导方法"></a>常用公式表及推导方法</h4><table><thead><tr><th>原函数</th><th>导数</th><th>推导</th></tr></thead><tbody><tr><td>$x^u$</td><td>$ux^{u-1}$</td><td>-</td></tr><tr><td>$sinx$</td><td>$cosx$</td><td>-</td></tr><tr><td>$cosx$</td><td>$-sinx$</td><td>-</td></tr><tr><td>$tanx$</td><td>$sec^2x$</td><td>$tanx=\frac{sinx}{cosx}$</td></tr><tr><td>$cotx$</td><td>$-csc^2x$</td><td>$cotx=\frac{cosx}{sinx}$</td></tr><tr><td>$secx$</td><td>$secxtanx$</td><td>$secx=\frac{1}{cosx}$</td></tr><tr><td>$cscx$</td><td>$-cscxtanx$</td><td>$cscx=\frac{1}{sinx}$</td></tr><tr><td>$arcsinx$</td><td>$\frac{1}{\sqrt{1-x^2}}$</td><td>$(arcsinx)’=\frac{1}{(siny)’}=\frac{1}{cosy}$</td></tr><tr><td>$arccosx$</td><td>$\frac{-1}{\sqrt{1-x^2}}$</td><td>同上</td></tr><tr><td>$arctanx$</td><td>$\frac{1}{1+x^2}$</td><td>同上</td></tr><tr><td>$arccotx$</td><td>$\frac{-1}{1+x^2}$</td><td>同上</td></tr><tr><td>$a^x$</td><td>$a^xlna$</td><td>-</td></tr><tr><td>$log_ax$</td><td>$\frac{1}{xlna}$</td><td>$(log_ax)’=\frac{1}{(a^y)’}=\frac{1}{a^ylna}$</td></tr></tbody></table><h3 id="常用高阶导数"><a href="#常用高阶导数" class="headerlink" title="常用高阶导数"></a>常用高阶导数</h3><table><thead><tr><th>原函数</th><th>n阶导</th></tr></thead><tbody><tr><td>$sinx$</td><td>$sin(x+\frac{n}{2}π)$</td></tr><tr><td>$cosx$</td><td>$cos(x+\frac{n}{2}π)$</td></tr><tr><td>$f(ax+b)$</td><td>$a^nf^{(n)}(ax+b)$</td></tr><tr><td>$u(x)v(x)$</td><td>$\sum_{i=0}^{n}C_{n}^{n-i}u^{(n-i)}(x)v^{(i)}(x)$</td></tr></tbody></table><h3 id="隐函数及参数方程的导数"><a href="#隐函数及参数方程的导数" class="headerlink" title="隐函数及参数方程的导数"></a>隐函数及参数方程的导数</h3><ul><li><p>隐函数</p><blockquote><p>例子：$e^y+xy-e=0，两边对x求导：e^yy’+(y+xy’)=0，分离变量：y’=-\frac{y}{x+e^y}$</p></blockquote></li><li><p>参数方程</p><blockquote><p>$y’=\frac{dy}{dx}=\frac{\frac{dy}{dt}}{\frac{dx}{dt}}$</p></blockquote></li></ul><h2 id="微分中值定理与导数的应用"><a href="#微分中值定理与导数的应用" class="headerlink" title="微分中值定理与导数的应用"></a>微分中值定理与导数的应用</h2><h3 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h3><h4 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h4><blockquote><p>$f(x)$满足：1：在$[a,b]$连续；2：在(a,b)可导<br>则：$∃ξ∈(a,b)，st.f(b)-f(a)=f’(ξ)(b-a)$</p></blockquote><h4 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h4><blockquote><p>$f(x)和F(x)$满足：1：在$[a,b]$连续；2：在$(a,b)$可导；3：$∀x∈(a,b)，F’(x)\neq 0$<br>则：$∃ξ∈(a,b)，st.\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f’(ξ)}{F’(ξ)}$</p></blockquote><h3 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h3><blockquote><p>设：<br>(1) $\lim\limits_{x\Rightarrow a}f(x)=\lim\limits_{x\Rightarrow a}F(x)=0$<br>(2) $a$的某去心领域内，$f’(x)，F’(x)$都存在且$F’(x)\neq 0$<br>(3) $\lim\limits_{x\Rightarrow a}\frac{f’(x)}{F’(x)}$存在或为无穷大<br>则：$\lim\limits_{x\Rightarrow a}\frac{f(x)}{F(x)}=\lim\limits_{x\Rightarrow a}\frac{f’(x)}{F’(x)}$</p></blockquote><h3 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h3><p>$f(x)$在$x_0$处具有$n$阶导$\Rightarrow ∃x∈U(x_0)，st. f(x)=\sum_{i=0}^{n}\frac{f^{(i)}(x_0)}{i!}(x-x_0)^i+o((x-x_0)^n)$</p><p>取$x_0=0$得<strong>n阶局部迈克劳林公式：</strong>$f(x)=\sum_{i=0}^{n}\frac{f^{(i)}(0)}{i!}x^i+o(x^n)$ </p><h4 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h4><ul><li>$\frac{1}{1-x}=\sum_{i=0}^{n}x^i+o(x^n)=\frac{1-x^n}{1-x}+o(x^n)$</li><li>推出$\frac{a}{1-x}=\frac{a(1-x^n)}{1-x}+o(x^n)$，即<strong>a为首项，x为公比的等比数列的前n项和</strong></li><li>$e^x=\sum_{i=0}^{n}\frac{x^i}{i!}+o(x^n)$（借此可推出欧拉公式）</li><li>$sinx=\sum_{i=0}^{n}\frac{(-1)^i}{(2i+1)!}+o(x^{2n+1})$</li><li>$cosx=\sum_{i=0}^{n}\frac{(-1)^i}{(2i)!}+o(x^{2n})$</li></ul><h3 id="单调性与极值、凹凸区间与拐点"><a href="#单调性与极值、凹凸区间与拐点" class="headerlink" title="单调性与极值、凹凸区间与拐点"></a>单调性与极值、凹凸区间与拐点</h3><p>$f(x)在[a,b]连续，在(a,b)内具有一阶和二阶导，那么：$</p><ul><li>$若∀x∈(a,b)，f’’(x)&gt;0\Rightarrow f(x)在[a,b]是上凹的$</li><li>$若∀x∈(a,b)，f’’(x)&lt;0\Rightarrow f(x)在[a,b]是上凸的$</li><li>$若∃x_0∈(a,b)，f’’(x)在x_0左右异号\Rightarrow (x_0,f(x_0))是拐点$</li></ul><p><strong>注意：凹凸区间包含端点，拐点是坐标</strong></p><p>单调性的考虑点：驻点（二阶导为0）、不可导点；（<strong>两者都是x=x_0</strong>）</p><p>极值：先求单调性，列表求极值</p><h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><h3 id="换元积分法"><a href="#换元积分法" class="headerlink" title="换元积分法"></a>换元积分法</h3><p>$\int u_v’v’_xdx=\int u_v’dv=u+C$</p><h4 id="常用公式-1"><a href="#常用公式-1" class="headerlink" title="常用公式"></a>常用公式</h4><ul><li>$\int\frac{1}{x}=ln|x|+C$</li><li>$\int tanxdx=\int\frac{1}{cosx}sinxdx=-\int\frac{1}{cosx}dcosx=-ln|cosx|+C$</li><li>$\int cotxdx=\int\frac{1}{sinx}cosxdx=\int\frac{1}{sinx}dsinx=ln|sinx|+C$</li><li>$\int secxdx=ln|secx+tanx|+C$</li><li>$\int cscxdx=-ln|cscx+tanx|+C$</li></ul><p>推导：</p><blockquote><p>$$\begin{split}<br>\int secxdx&amp;=\int\frac{1}{cosx}dx\\<br>&amp;=\int\frac{1}{cos^2x}cosxdx\\<br>&amp;=\int\frac{1}{1-sin^2x}dsinx\\<br>&amp;=\frac{1}{2}\int\frac{(1-sinx)+(1+sinx)}{(1-sinx)(1+sinx)}dsinx\\<br>&amp;=\frac{1}{2}\int(\frac{1}{1+sinx}+\frac{1}{1-sinx})dsinx\\<br>&amp;=\frac{1}{2}(ln|1+sinx|-ln|1-sinx|)+C\\<br>&amp;=ln|\frac{\sqrt{1+sinx}}{\sqrt{1-sinx}}|+C\\<br>&amp;=ln|\frac{\sqrt{(1+sinx)^2}}{\sqrt{(1+sinx)(1-sinx)}}|+C\\<br>&amp;=ln|\frac{1+sinx}{cosx}|+C\\<br>&amp;=ln|secx+tanx|+C<br>\end{split}$$</p></blockquote><h3 id="分部积分法"><a href="#分部积分法" class="headerlink" title="分部积分法"></a>分部积分法</h3><p>$\int udv=uv-\int vdu$：<strong>对反幂三指，排前作u排后作v</strong></p><h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><h3 id="定积分的换元积分法和分部积分法"><a href="#定积分的换元积分法和分部积分法" class="headerlink" title="定积分的换元积分法和分部积分法"></a>定积分的换元积分法和分部积分法</h3><ul><li>换元公式$\int_{a}^{b}(x)dx=\int_{α}^{β}f(φ(t))φ’(t)dt$</li><li>分部积分公式$\int_{a}^{b}udv=(u(b)v(b)-u(a)v(a))-\int_{a}^{b}vdu$</li></ul><h3 id="反常积分"><a href="#反常积分" class="headerlink" title="反常积分"></a>反常积分</h3><p>$\frac{d\int_{α(x)}^{β(x)}f(t)dt}{dx}=β’(x)f(β(x))-α’(x)f(α(x))$</p><h3 id="定积分几何"><a href="#定积分几何" class="headerlink" title="定积分几何"></a>定积分几何</h3><p>曲线弧长：</p><ul><li>直角：$s=\int_{a}^{b}\sqrt{1+y’^2}dx$</li><li>参数：$s=\int_{a}^{b}\sqrt{φ’^2(t)+ψ’^2(t)}dt$</li><li>极坐标：$s=\int_{a}^{b}\sqrt{ρ^2(θ)+ρ’^2(θ)}dθ$</li></ul><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><h3 id="一阶线性微分方程"><a href="#一阶线性微分方程" class="headerlink" title="一阶线性微分方程"></a>一阶线性微分方程</h3><p>$y’+P(x)y=Q(x)\Rightarrow y=(C+\int Q(x)e^{\int P(x)dx}dx)e^{-\int P(x)dx}$</p><h3 id="可降阶的高阶微分方程"><a href="#可降阶的高阶微分方程" class="headerlink" title="可降阶的高阶微分方程"></a>可降阶的高阶微分方程</h3><h4 id="y-n-f-x-（只含-x-型）"><a href="#y-n-f-x-（只含-x-型）" class="headerlink" title="$y^{(n)}=f(x)$（只含$x$型）"></a>$y^{(n)}=f(x)$（只含$x$型）</h4><blockquote><p>$$\begin{split}<br>&amp;y’’=x+sinx\\<br>令：&amp;p=y’，y’’=p’=x+sinx\\<br>两侧积分得：&amp;p=\frac{x^2}{2}-cosx+C_1=y’\\<br>两侧积分得：&amp;y=\frac{x^3}{6}-sinx+C_1x+C_2\\<br>\end{split}$$</p></blockquote><h4 id="y’’-f-x-y’-（含-x，y-型）"><a href="#y’’-f-x-y’-（含-x，y-型）" class="headerlink" title="$y’’=f(x,y’)$（含$x，y$型）"></a>$y’’=f(x,y’)$（含$x，y$型）</h4><blockquote><p>$$\begin{split}<br>&amp;y’’=y’+x\\<br>令：&amp;p=y’，y’’=p’\\<br>原方程化为：&amp;p’-p=x\\<br>一阶线性微分方程公式：&amp;y’+P(x)y=Q(x)\Rightarrow y=(C+\int Q(x)e^{\int P(x)dx}dx)e^{-\int P(x)dx}\\<br>代入：&amp;P(x)=-1，Q(x)=x，C=C_1\\<br>可得：&amp;p=(C_1+\int xe^{\int (-1)dx}dx)e^{-\int (-1)dx}\\<br>&amp;\ =(C_1+\int xe^{-x}dx)e^x\\<br>&amp;\ =(C_1-\int xde^{-x})e^x\\<br>&amp;\ =(C_1-(xe^{-x}-\int e^{-x}dx))e^x\\<br>&amp;\ =(-xe^{-x}-e^{-x}+C_1)e^x\\<br>&amp;\ =-x-1+C_1e^x\\<br>即：&amp;y’=p=-x-1+C_1e^x\\<br>两侧积分得：&amp;y=\int (C_1e^x-x-1)dx=C_1e^x-\frac{x^2}{2}-x+C^2<br>\end{split}$$</p></blockquote><h4 id="y’’-f-y-y’-（不含-x-型）"><a href="#y’’-f-y-y’-（不含-x-型）" class="headerlink" title="$y’’=f(y,y’)$（不含$x$型）"></a>$y’’=f(y,y’)$（不含$x$型）</h4><blockquote><p>$$\begin{split}<br>&amp;yy’’+2y’^2=0\\<br>令：&amp;p=y’，y’’=p’=\frac{dp}{dy}\frac{dy}{dx}=\frac{dp}{dy}p\\<br>原方程化为：&amp;y\frac{dp}{dy}p+2p^2=0\\<br>分离变量得：&amp;\frac{dp}{p}=-2\frac{dy}{y}\\<br>两侧积分得：&amp;ln|p|=ln\frac{1}{y^2}+C_1\\<br>即：&amp;p=\frac{C_0}{y^2}=y’=\frac{dy}{dx}\\<br>分离变量得：&amp;y^2dy=C_0dx\\<br>两侧积分得：&amp;y^3=C_1x+C_2<br>\end{split}$$</p></blockquote><h3 id="常系数齐次线性微分方程"><a href="#常系数齐次线性微分方程" class="headerlink" title="常系数齐次线性微分方程"></a>常系数齐次线性微分方程</h3><h4 id="二阶"><a href="#二阶" class="headerlink" title="二阶"></a>二阶</h4><p>令$y’’+py’+qy=0\Rightarrow 特征方程：r^2+pr+q=0，考虑其解的情况：$</p><table><thead><tr><th>特征方程的解</th><th>通解</th></tr></thead><tbody><tr><td>$r_1\neq r_2∈R$</td><td>$y=C_1e^{r_1x}+C_2e^{r_2x}$</td></tr><tr><td>$r_1=r_2=r∈R$</td><td>$y=C_1e^{rx}+C_2xe^{rx}$</td></tr><tr><td>$r_1=α+iβ，r_2=α-iβ$</td><td>$y=C_1e^{αx}cosβx+C_2e^{αx}sinβx$</td></tr></tbody></table><h4 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h4><p>第$i$重根就乘$x^i$</p><table><thead><tr><th>特征方程的解</th><th>通解</th></tr></thead><tbody><tr><td>$r_1=-1，r_2=r_3=i，r_4=r_5=-i$</td><td>$y=C_1e^{-x}+C_2cosx+C_3sinx+C_4xcosx+C_5xsinx$</td></tr><tr><td>$r_1=r_2=r_3=r$</td><td>$y=C_1e^{rx}+C_2xe^{rx}+C_3x^2e^{rx}$</td></tr></tbody></table><h3 id="常系数非齐次线性微分方程"><a href="#常系数非齐次线性微分方程" class="headerlink" title="常系数非齐次线性微分方程"></a>常系数非齐次线性微分方程</h3><p>$y’’+py’+qy=P_m(x)e^{λx}\Rightarrow 特解y^*=x^kQ_m(x)e^{λx}（k：λ是特征方程的k重根）$</p><p>一般做法：</p><ul><li>先令$y’’+py’+qy=0$，求其特征方程的根</li><li>右侧化为$P_m(x)e^{λx}$（有$sinx或cosx时λ$设为复数），得到$λ$是$k$重根</li><li>设出特解$y^*=x^kQ_m(x)e^{λx}（有sinx或cosx时为\overline{y}）$</li><li>$y^*代入y$解出$Q_m(x)$的系数，得到特解（有$cosx时为\overline{y}$的实部；有$sinx时为\overline{y}$的虚部）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMQ</title>
      <link href="/rmq/"/>
      <url>/rmq/</url>
      
        <content type="html"><![CDATA[<h2 id="区间最大（最小）值查询"><a href="#区间最大（最小）值查询" class="headerlink" title="区间最大（最小）值查询"></a>区间最大（最小）值查询</h2><p>给定一个大小为$n$的数组，及$m$组询问，每次询问求区间$[l,r]$的最大（最小）值</p><h3 id="暴力算法"><a href="#暴力算法" class="headerlink" title="暴力算法"></a>暴力算法</h3><p>以区间最大值查询为例：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// a[n + 1]：给定数组</span><span class="token comment" spellcheck="true">// max[n + 1][n + 1]：max[l][r]记录a中区间[l,r]的最小值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暴力算法的时间和空间复杂度都为：$O(n^2)$</p><h3 id="优化思路：分治法，记忆化搜索"><a href="#优化思路：分治法，记忆化搜索" class="headerlink" title="优化思路：分治法，记忆化搜索"></a>优化思路：分治法，记忆化搜索</h3><p>先考虑求单次查询时显然有：$Min(a[i]|l\leq i\leq r)=Min(Min(a[i]|l\leq i\leq ⌊\frac{l+r}{2}⌋), Min(a[i]|⌈\frac{l+r}{2}⌉\leq i\leq r))$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">RMQMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">RMQMax</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">RMQMax</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单次查询的时间复杂度是：$O(logn)$</p><p>但如何把分治法用于多次查询呢？考虑<strong>记忆化搜索</strong>：在分治过程中打表</p><ul><li><code>RMQMax</code>的时间复杂度是$O(logn)$，故考虑$O(nlogn)$的表</li><li>每次递归都把区间对半分割，故可考虑省去右端点，而改为记录区间长度$2^loglen$，这样每次递归只需把$loglen-=1$</li><li>当区间长度不是$2$的整数次幂时，只需要把原区间划分成两个长为$2$的整数次幂的区间即可</li></ul><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p><a href="https://vjudge.net/problem/HRBUST-1189">模板题：HRBUST1189 区间最大值II</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Init</span>std<span class="token operator">::</span><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">RMQDAC</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>loglen<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>loglen<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>loglen<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>loglen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>loglen<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">RMQMax</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> loglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                  <span class="token function">RMQMax</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>loglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">RMQMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> loglen <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">RMQDAC</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> loglen<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">RMQDAC</span><span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>loglen<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> loglen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态规划的Sparse-Table（ST）算法"><a href="#动态规划的Sparse-Table（ST）算法" class="headerlink" title="动态规划的Sparse Table（ST）算法"></a>动态规划的Sparse Table（ST）算法</h3><p>分析一下记忆化搜索，就可以把它化作多态规划的ST算法</p><h4 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">Pow2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">RMQST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">RMQMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> loglen <span class="token operator">=</span> <span class="token function">log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>loglen<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>loglen<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>loglen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">RMQMin</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> loglen <span class="token operator">=</span> <span class="token function">log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>loglen<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token function">Pow2</span><span class="token punctuation">(</span>loglen<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> ST算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Knapsack Problem</title>
      <link href="/knapsack-problem/"/>
      <url>/knapsack-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><h3 id="从搜索说起"><a href="#从搜索说起" class="headerlink" title="从搜索说起"></a>从搜索说起</h3><h4 id="简化问题"><a href="#简化问题" class="headerlink" title="简化问题"></a>简化问题</h4><blockquote><p>考虑这样一个问题：有一个背包和有$N$个物品，单价为$V_i$（<strong>可负</strong>），求装进背包的最大价值</p></blockquote><ul><li>递归的重复逻辑：对于任一物品，有选与不选两种情况；而解是这两种情况中的大者</li><li>递归的边界：没有更多物品了</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Dfs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第 x 个物品</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// x = 0 不是物品</span>  <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选与不选的大者为解</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Call: Dfs(N);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="暴力01背包"><a href="#暴力01背包" class="headerlink" title="暴力01背包"></a>暴力01背包</h4><blockquote><p>再把这个问题升级，加入一个限制条件：背包最大负重为$W_{max}$，以及每个物品都有一定重量<br>也就是说：有一个最大负重为$W_{max}$的背包，和$N$<strong>个</strong>物品，单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p></blockquote><ul><li>加入这个限制条件后，递归函数需要一个额外的参数：剩余的背包负重，以判断是否放得下这个物品</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Dfs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 剩余的背包负重为 y</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放不下了，看看下一个</span>  <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// call: Dfs(N, Wmax)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以解01背包了，但是，算法的时间复杂度是$O(2^n)$（深度为n的二叉树），难以接受</p><h4 id="优化：记忆化-贪心"><a href="#优化：记忆化-贪心" class="headerlink" title="优化：记忆化+贪心"></a>优化：记忆化+贪心</h4><ul><li>深度为n的二叉树中，可以用一个3元组记录每个节点：<code>(x, y, res)</code>，其中<code>x, y</code>意义与<code>Dfs(x, y)</code>相同，决定了以此节点为根的子树的结构；<code>res</code>则为其解。</li><li>利用贪心可以进行剪枝：若有3元组<code>t1, t2</code>，且<code>t1.x = t2.x, t1.x = t2.y</code>，则它们的子树结构相同。而此时抛弃<code>res</code>小的节点而选择大者是不会影响根节点的结果值的。</li><li>故可以用一个二维数组<code>dp[x][y] = res</code>记录节点<code>(x, y, res)</code>，并维护<code>res</code>最大</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// memset(dp, 0xff, sizeof(dp));</span><span class="token keyword">int</span> <span class="token function">Dfs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 剩余的背包负重为 y</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放不下了，看看下一个</span>  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">-</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// call: Dfs(N, Wmax)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度是$O(nW)$（对于每个<code>x, y</code>，<code>dp[x][y]</code>只会进入递归一次（当其值为初始时））</p><h3 id="动态规划的01背包"><a href="#动态规划的01背包" class="headerlink" title="动态规划的01背包"></a>动态规划的01背包</h3><p>经过优化后的算法，其解不再是一颗二叉树了，剪枝之后成为一个表；而用循环的写法更加简单直观，可以改写成以下的形式：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// const int kInf = -0x3f3f3f3f;</span><span class="token keyword">int</span> <span class="token function">SolveZeroOneKnapsack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>kInf<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>Wmax<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是所谓的<strong>动态规划</strong>了，其与递归的不同也可以直观的看出来：<strong>递归是从大到小的，而动态规划是从小到大的</strong>（递归在填表时也是从小到大的）。</p><p>$dp[i][j]=Max(dp[i-1][j],dp[i-1][j-w[i]]+v[i]);$被称作<strong>状态转移方程，负责从小推大</strong></p><p>小的状态有二：其中$dp[i-1][j]$对应不选第$i$件，$dp[i-1][j-w[i]]+v[i]$对应选的情况</p><h4 id="记忆化-贪心与动态规划的关系"><a href="#记忆化-贪心与动态规划的关系" class="headerlink" title="记忆化+贪心与动态规划的关系"></a>记忆化+贪心与动态规划的关系</h4><p>能采用动态规划解决的问题，一般要具有三个性质：<a href="https://zhuanlan.zhihu.com/p/126361983">来源</a></p><blockquote><ol><li>最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</li><li>无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</li><li>有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）</li></ol></blockquote><p>分析01背包的记忆化搜索+贪心算法与以上3点的关系，可以发现：</p><blockquote><ol><li>最优化原理由贪心满足了</li><li>搜索过程中的类似<strong>后续遍历</strong>的顺序，决定了状态<code>x-1</code>在状态<code>x</code>之前确定，并不再改变，即满足无后效性</li><li>显然</li></ol></blockquote><h4 id="压缩数组"><a href="#压缩数组" class="headerlink" title="压缩数组"></a>压缩数组</h4><p>分析状态转移方程，发现：</p><ul><li>状态$(i,j)$仅由$(i-1,j),\ (i-1,j-w[i])$转移得来</li><li>故处于状态$(i,j)$时，可以省去$(i-1,x)(x&gt;j)$，从而降低空间复杂度</li><li>使用二维数组实现时，$j$的顺序无关紧要</li><li>使用一维数组实现时，$j$的顺序变得重要了：省去的是$(i-1,x)(x&gt;j)$，<strong>故应倒序</strong></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Init</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DP</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> Wmax<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="满载限制"><a href="#满载限制" class="headerlink" title="满载限制"></a>满载限制</h4><p>添加一个限制条件：只有装满背包的方案才是合法的，装不满输出<code>-1</code></p><p>解法是：初始化时<code>dp[i] = -kInf, dp[0] = 0</code>，这样，最终DP完成后判断<code>dp[Wmax] &lt; 0</code>即可</p><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><blockquote><p>有一个最大负重为$W_{max}$的背包，和$N$<strong>种</strong>物品，<strong>每种无限个</strong>，单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p></blockquote><p>有状态转移方程：$dp[i][j]=Max(dp[i-1][j],dp[i][j-w[i]]+v[i]);$</p><p>其中$dp[i-1][j]$对应不选第$i$件，$dp[i][j-w[i]]+v[i]$对应选的情况</p><p>因为<strong>每种无限个</strong>的条件，又有$dp[i][x] (x&lt;j)$由当前种类的选择转移而来，故应是$dp[i]$而非$dp[i-1]$</p><p>与01背包相同，仍可进行空间压缩，此时省去的是$(i-1,x)(x&lt;j)$，<strong>故应正序</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Init</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DP</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Wmax <span class="token operator">++</span>j<span class="token punctuation">)</span>    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><blockquote><p>有一个最大负重为$W_{max}$的背包，和$N$种物品，<strong>每种个数为$C_i$</strong>、单重为$W_i$、单价为$V_i$，求装进背包的最大价值</p></blockquote><h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h3><p>对01背包的原理略有理解之后，可以这样写：变为共有$\sum_{i=1}^{N}C[i]$个物品的01背包：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Init</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DP</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> Wmax<span class="token punctuation">;</span> k <span class="token operator">>=</span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以这样理解：对于每种物品，枚举选取几个，视作单价=单价×个数，重量=重量x个数的单个物品，即变成01背包问题：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Init</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DP</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> j <span class="token operator">*</span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> j <span class="token operator">*</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> Wmax<span class="token punctuation">;</span> k <span class="token operator">>=</span> w<span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> w<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两种的时间复杂度，都为$O(W\sum_{i=1}^{N}C[i])$，第二种常数略低一点</p><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><p>当$C[i]$增大时，上面的算法时间复杂度可能会很高，有没有什么优化空间？</p><p>对于第一种做法：选取了第一种的第一件与第二件，与选取了第一种的第二件和第三件，这两种状态是相同的</p><blockquote><p>例如：对于$W_{max}=3, C[1]=3,\ W[1]=1, V[1]=1$<br>选$1$个：$dp[3]=dp[3-1]+1=1,\ dp[2]=dp[2-1]+1=1,\ dp[1]=dp[1-1]+1=1$<br>选$2$个：$dp[3]=dp[3-1]+1=2,\ dp[2]=dp[2-1]+1=2,\ dp[1]=dp[1-1]+1=1$<br>选$3$个：$dp[3]=dp[3-1]+1=3,\ dp[2]=dp[2-1]+1=2,\ dp[2]=dp[1-1]+1=1$</p></blockquote><p>对于第二种做法：当依次选取$x$、$y$个、和$z$个时，若有$z=x+y$，显然在完成$x$的基础上选取$y$时，会经过状态$x+y$即$z$，那么状态$z$<strong>被访问了不止一次，这就是可优化之处</strong></p><blockquote><p>例如：对于$W_{max}=3,\ C[1]=3,\ W[1]=1,\ V[1]=1$<br>选$1$个：$dp[3]=dp[3-1]+1=1,\ dp[2]=dp[2-1]+1=1,\ dp[1]=dp[1-1]+1=1$<br>选$2$个：<strong>$dp[3]=dp[3-2]+2=3$</strong>$,\ dp[2]=dp[2-2]+2=2$<br>选$3$个：<strong>$dp[3]=dp[3-3]+3=3$</strong></p></blockquote><p><strong>想要优化，就要让每个状态被访问的次数尽可能的少</strong>，考虑第二种做法，有没有办法让每个$z=x+y$，被唯一的一对$x&lt;y$表示呢？$答案就是二进制$：</p><blockquote><p>对于任意$x&lt;=2^n(n∈N^+)$，有$x=\sum_{i=0}^{n-1}p_i2^i(p_i=1\ or\ 0)$，也就是说$x$只能被每个$2^i$相加至多$1$次得到</p></blockquote><p>那么考虑$C[i]=2^n$的情况：将$C[i]$拆分成$2^0,2^1…2^{n-1}$件，就能让每个状态只被访问一次了</p><p>而$C[i]$不是$2$的整数次幂时怎么办？在<strong>末尾</strong>加上非整数部分即可（<strong>注意一定要末尾，否则会导致某些状态被重复访问</strong>）</p><p>时间复杂度，$O(W\sum_{i=1}^{N}logC[i])$</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p><a href="https://www.luogu.com.cn/problem/P1776">模板题：洛谷P1776 宝物筛选</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> kN <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> Wmax<span class="token punctuation">,</span> V<span class="token punctuation">[</span>kN<span class="token punctuation">]</span><span class="token punctuation">,</span> W<span class="token punctuation">[</span>kN<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>kN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>kN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> size_t <span class="token function">HighBit</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> Wmax<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> std<span class="token operator">::</span>cin <span class="token operator">>></span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hb <span class="token operator">=</span> <span class="token function">HighBit</span><span class="token punctuation">(</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> remainder <span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> hb<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> hb<span class="token punctuation">;</span> j <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> w <span class="token operator">=</span> j <span class="token operator">*</span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> j <span class="token operator">*</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> Wmax<span class="token punctuation">;</span> k <span class="token operator">>=</span> w<span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> w<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> w <span class="token operator">=</span> remainder <span class="token operator">*</span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">=</span> remainder <span class="token operator">*</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> Wmax<span class="token punctuation">;</span> k <span class="token operator">>=</span> w<span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> w<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>Wmax<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为了实现了这样的效果：<br>14 = 7 + (7)<br>15 = 15 + (0)<br>16 = 15 + (1)<br>17 = 15 + (2)<br>使用<code>HighBit(x)</code>函数取出<code>x</code>的二进制最高位，其原理是：将最高位1扩散到低位，之后右移1位再加1进位即可</p></blockquote><h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><blockquote><p>有一个最大负重为$W_{max}$的背包，和$N$<strong>件</strong>物品，单重为$W_i$、单价为$V_i$；同时这些物品被划分为多组，<strong>同组的最多选一个</strong>，求装进背包的最大价值</p></blockquote><p>就是变成了将<strong>组</strong>视作01背包中的<strong>个</strong>，同时这些<strong>个</strong>的重量和价值不一定相等</p><p><a href="https://www.luogu.com.cn/problem/P1757">模板题：洛谷P1757 通天之分组背包</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Wmax<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> G<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// G是组的集合，i是一个组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> Wmax<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>k <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// i是一个组，k是组中物品的索引</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> W<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> W<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> V<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="贪心优化"><a href="#贪心优化" class="headerlink" title="贪心优化"></a>贪心优化</h3><p>显然，对于同组的物品：</p><ul><li>当重量相同时，选择价值最大的总是最好的</li><li>当价值相同时，选择重量最小的总是最好的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Indexed Tree</title>
      <link href="/binary-indexed-tree/"/>
      <url>/binary-indexed-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p><a href="binary-indexed-tree.png">树状数组</a></p><blockquote><p>按照Peter M. Fenwick的说法，正如所有的整数都可以表示成2的幂和，我们也可以把一串序列表示成一系列子序列的和。采用这个想法，我们可将一个前缀和划分成多个子序列的和，而划分的方法与数的2的幂和具有极其相似的方式。一方面，子序列的个数是其二进制表示中1的个数，另一方面，子序列代表的f[i]的个数也是2的幂。</p></blockquote><p>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><p>按照定义可以实现：</p><ul><li>单点修改，区间查询</li></ul></li><li><p>加上<a href="/prefix-sum-and-finite-difference/" title="前缀和与差分">前缀和与差分</a>可以实现：</p><ul><li>区间修改，单点查询</li><li>区间修改，区间查询</li></ul></li></ul><h3 id="单点修改，区间查询"><a href="#单点修改，区间查询" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h3><p>修改一个子节点时，会影响其父节点的值；而如何从子节点索引到父节点的？</p><p><strong>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</strong></p><ul><li>故，欲索引到父节点，即索引到上层，只需将其最低位1加1进位</li><li>而反之将最低位1置0,则索引到当前节点上层的，非当前节点之父的节点</li><li>可用LowBit函数取出最低位1</li></ul><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p><a href="https://vjudge.net/problem/LibreOJ-130">模板题：树状数组1：单点修改，区间查询</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> size_t <span class="token function">LowBit</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">BinaryIndexedTree</span> final <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DataT <span class="token operator">*</span>data_<span class="token punctuation">;</span>  size_t size_<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">BinaryIndexedTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span><span class="token keyword">new</span> DataT<span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">ArrT</span><span class="token operator">></span>  <span class="token function">BinaryIndexedTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrT <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">BinaryIndexedTree</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      data_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      size_t <span class="token operator">&amp;&amp;</span>p <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> size_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">BinaryIndexedTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span>size_t p<span class="token punctuation">,</span> <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> size_<span class="token punctuation">;</span> p <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> data_<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  DataT <span class="token function">GetSum</span><span class="token punctuation">(</span>size_t p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DataT res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token punctuation">;</span> p <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  DataT <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间修改，单点查询"><a href="#区间修改，单点查询" class="headerlink" title="区间修改，单点查询"></a>区间修改，单点查询</h3><p>对差分数组建立树状数组即可</p><h4 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h4><p><a href="https://vjudge.net/problem/LibreOJ-131">模板题：树状数组2：区间修改，单点查询</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// auto diff = BinaryIndexedTree&lt;int>(n + 1);</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify</span><span class="token punctuation">(</span>BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">*</span>diff<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>l<span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间修改，区间查询"><a href="#区间修改，区间查询" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h3><blockquote><p>考虑$a[]$的前缀和与差分数组$diff[]$的关系：</p><p>$\sum_{i=1}^{n}a[i]$</p><p>$=\sum_{i=1}^{n}\sum_{j=1}^{i}diff[j]$</p><p>$=\sum_{i=1}^{n}diff[i]*(n-i+1)$</p><p>$=(n+1)\sum_{i=1}^{n}diff[i] - \sum_{i=1}^{n}diff[i]*i$</p></blockquote><p>所以，可以对$diff[i]$和$diff[i]*i$分别建立树状数组</p><h4 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h4><p><a href="https://vjudge.net/problem/LibreOJ-132">模板题：树状数组3：区间修改，区间查询</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// GenerateBinaryIndexedTree(diff_tree, nullptr, size);</span><span class="token comment" spellcheck="true">// GenerateBinaryIndexedTree(diff_muti, nullptr, size);</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">Modify</span><span class="token punctuation">(</span>BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">*</span>diff_tree<span class="token punctuation">,</span>            BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">*</span>diff_muti<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>l<span class="token punctuation">,</span>            <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff_tree<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff_tree<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff_muti<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> val <span class="token operator">*</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff_muti<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> DataT <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">&amp;</span>diff_tree<span class="token punctuation">,</span>                   <span class="token keyword">const</span> BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">&amp;</span>diff_muti<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> diff_muti<span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> DataT <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">&amp;</span>diff_tree<span class="token punctuation">,</span>                   <span class="token keyword">const</span> BinaryIndexedTree<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">&amp;</span>diff_muti<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>l<span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> diff_tree<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> diff_muti<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h2><p><strong>二进制最低位的1所处的位置，表示这个节点处在树的倒数第几层，同时表示其管理的区间长度</strong></p><p>一维树状数组$tree[i]$记录了右端点为$i$，长度为$LowBit(i)$的区间和</p><p>二维树状数组$tree[y][x]$记录了右下角为$(y, x)$，高为$LowBit(y)$，宽为$LowBit(x)$的二维区间和</p><h3 id="单点修改，区间查询-1"><a href="#单点修改，区间查询-1" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h3><p>只需要按照定义，使用容斥原理，对一维树状数组修改</p><p><a href="https://vjudge.net/problem/LibreOJ-133">模板题：二维树状数组1：单点修改，区间查询</a></p><h4 id="模板-3"><a href="#模板-3" class="headerlink" title="模板"></a>模板</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> size_t <span class="token function">LowBit</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">BinaryIndexedTree2D</span> final <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DataT <span class="token operator">*</span><span class="token operator">*</span>data_<span class="token punctuation">;</span>  size_t size_y_<span class="token punctuation">,</span> size_x_<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_x<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span><span class="token keyword">new</span> DataT <span class="token operator">*</span><span class="token punctuation">[</span>size_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_y_</span><span class="token punctuation">(</span>size_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_x_</span><span class="token punctuation">(</span>size_x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> DataT <span class="token punctuation">[</span>size_x_ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Arr2DT</span><span class="token operator">></span>  <span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span><span class="token keyword">const</span> Arr2DT <span class="token operator">&amp;</span>arr2d<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_y<span class="token punctuation">,</span>                      <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_x<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span>size_y<span class="token punctuation">,</span> size_x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> arr2d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        size_t <span class="token operator">&amp;&amp;</span>xx <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        size_t <span class="token operator">&amp;&amp;</span>yy <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>yy <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;=</span> size_x_ <span class="token operator">&amp;&amp;</span> yy <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t yy <span class="token operator">=</span> y<span class="token punctuation">;</span> yy <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> yy <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t xx <span class="token operator">=</span> x<span class="token punctuation">;</span> xx <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">;</span> xx <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  DataT <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DataT res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t yy <span class="token operator">=</span> y<span class="token punctuation">;</span> yy<span class="token punctuation">;</span> yy <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t xx <span class="token operator">=</span> x<span class="token punctuation">;</span> xx<span class="token punctuation">;</span> xx <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  DataT <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span>               <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>           <span class="token function">GetSum</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间修改，单点查询-1"><a href="#区间修改，单点查询-1" class="headerlink" title="区间修改，单点查询"></a>区间修改，单点查询</h3><p>对二维差分数组建立二维树状数组即可</p><h4 id="模板-4"><a href="#模板-4" class="headerlink" title="模板"></a>模板</h4><p><a href="https://vjudge.net/problem/LibreOJ-134">模板题：二维树状数组2：区间修改，单点查询</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// auto diff = BinaryIndexedTree2D&lt;int64_t>(n, m);</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify2D</span><span class="token punctuation">(</span>BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> <span class="token operator">*</span>diff<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span>                   <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token operator">-</span><span class="token operator">></span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间修改，区间查询-1"><a href="#区间修改，区间查询-1" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h3><p><strong>这个厉害了！</strong></p><p>依然按照一维树状数组-区间修改，区间查询的思路；先看看数学</p><blockquote><p>考虑$a[][]$的前缀和与差分数组$diff[][]$的关系：</p><p>$\sum_{y=1}^{Y}\sum_{x=1}^{X}a[y][x]$</p><p>$=\sum_{y=1}^{Y}\sum_{x=1}^{X}\sum_{yy=1}^{y}\sum_{xx=1}^{x}diff[yy][xx]$</p><p>$=\sum_{y=1}^{Y}\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$</p><p>因为$(Y-y+1)(X-x+1)=(Y+1)(X+1)-(Y+1)x-(X+1)y+xy$，所以：</p><p>$\sum_{y=1}^{Y}\sum_{x=1}^{X}diff[y][x]*(Y-y+1)(X-x+1)$</p><p>$=(Y+1)(X+1)\sum_{y=1}^{Y}\sum_{x=1}^{X}diff[y][x]$</p><p>$-(Y+1)\sum_{y=1}^{Y}\sum_{x=1}^{X}diff[y][x]*x$</p><p>$-(X+1)\sum_{y=1}^{Y}\sum_{x=1}^{X}diff[y][x]*y$</p><p>$+\sum_{y=1}^{Y}\sum_{x=1}^{X}diff[y][x]*yx$</p></blockquote><p>所以，建立四个二维树状数组：</p><ul><li><p>$diff[y][x]$</p></li><li><p>$diff[y][x]*x$</p></li><li><p>$diff[y][x]*y$</p></li><li><p>$diff[y][x]*yx$</p></li></ul><h4 id="模板-5"><a href="#模板-5" class="headerlink" title="模板"></a>模板</h4><p><a href="https://vjudge.net/problem/LibreOJ-135">模板题：二维树状数组3：区间修改，区间查询</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify2D</span><span class="token punctuation">(</span>BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> diff<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span>                     <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span>                     <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val <span class="token operator">*</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val <span class="token operator">*</span> y0 <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> y0 <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> DataT <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> diff_tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span>         <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span>         <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> diff_tree<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> DataT <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> diff_tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span>         <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">inline</span> size_t <span class="token function">LowBit</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">BinaryIndexedTree2D</span> final <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  DataT <span class="token operator">*</span><span class="token operator">*</span>data_<span class="token punctuation">;</span>  size_t size_y_<span class="token punctuation">,</span> size_x_<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_x<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span><span class="token keyword">new</span> DataT <span class="token operator">*</span><span class="token punctuation">[</span>size_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_y_</span><span class="token punctuation">(</span>size_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_x_</span><span class="token punctuation">(</span>size_x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> DataT<span class="token punctuation">[</span>size_x_ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Arr2DT</span><span class="token operator">></span>  <span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span><span class="token keyword">const</span> Arr2DT <span class="token operator">&amp;</span>arr2d<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_y<span class="token punctuation">,</span>                      <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>size_x<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span>size_y<span class="token punctuation">,</span> size_x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> arr2d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        size_t <span class="token operator">&amp;&amp;</span>xx <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        size_t <span class="token operator">&amp;&amp;</span>yy <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>yy <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;=</span> size_x_ <span class="token operator">&amp;&amp;</span> yy <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">)</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">BinaryIndexedTree2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t yy <span class="token operator">=</span> y<span class="token punctuation">;</span> yy <span class="token operator">&lt;=</span> size_y_<span class="token punctuation">;</span> yy <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t xx <span class="token operator">=</span> x<span class="token punctuation">;</span> xx <span class="token operator">&lt;=</span> size_x_<span class="token punctuation">;</span> xx <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  DataT <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DataT res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t yy <span class="token operator">=</span> y<span class="token punctuation">;</span> yy<span class="token punctuation">;</span> yy <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t xx <span class="token operator">=</span> x<span class="token punctuation">;</span> xx<span class="token punctuation">;</span> xx <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">LowBit</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> data_<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  DataT <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span>               <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GetSum</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>           <span class="token function">GetSum</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify2D</span><span class="token punctuation">(</span>BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> diff<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span>                     <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span>                     <span class="token keyword">const</span> DataT <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val <span class="token operator">*</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> y0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> val <span class="token operator">*</span> y0 <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>val <span class="token operator">*</span> y0 <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> <span class="token punctuation">(</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> DataT <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> diff_tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span>         <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-</span>         <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff_tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> diff_tree<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetSum</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">DataT</span><span class="token operator">></span><span class="token keyword">inline</span> DataT <span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinaryIndexedTree2D<span class="token operator">&lt;</span>DataT<span class="token operator">></span> diff_tree<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span>                   <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>x1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span> <span class="token operator">-</span>         <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff_tree<span class="token punctuation">,</span> y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  BinaryIndexedTree2D<span class="token operator">&lt;</span>int64_t<span class="token operator">></span> diff<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      BinaryIndexedTree2D<span class="token operator">&lt;</span>int64_t<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> BinaryIndexedTree2D<span class="token operator">&lt;</span>int64_t<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span>      BinaryIndexedTree2D<span class="token operator">&lt;</span>int64_t<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">,</span> BinaryIndexedTree2D<span class="token operator">&lt;</span>int64_t<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span> std<span class="token operator">::</span>cin <span class="token operator">>></span> t <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      std<span class="token operator">::</span>cin <span class="token operator">>></span> w<span class="token punctuation">;</span>      Modify2D<span class="token operator">&lt;</span>int64_t<span class="token operator">></span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Query</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prefix Sum and Finite Difference</title>
      <link href="/prefix-sum-and-finite-difference/"/>
      <url>/prefix-sum-and-finite-difference/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>$$<br>sum[i]=<br>\begin{cases}<br>0&amp;                   {i=0}\\<br>\sum_{j=1}^{i}a[j]&amp;  {i\geq 1}<br>\end{cases}<br>$$</p><p>写成代码是：<br><code>sum[0] = 0;</code><br><code>sum[i] = sum[i - 1] + a[i]</code></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>快速求区间和</li></ul><p>根据定义，有 $\sum_{i=l}^{r}a[i] = sum[r] - sum[l - 1]$</p><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p><img src="Inclusion%E2%80%93exclusion%20principle.png" alt="$A\cup B = A + B - A\cap B$"></p><p>$$<br>sum[y][x]=<br>\begin{cases}<br>0&amp;                   {y=0\ or\ x=0}\\<br>\sum_{i=1}^{y}\sum_{j=1}^{x}a[i][j]&amp;  {y\geq 1\ and\ x\geq 1}<br>\end{cases}<br>$$</p><p>根据容斥原理，有：<br><code>sum[y][0] = sum[0][x] = 0</code><br><code>sum[y][x] = sum[y - 1][x] + sum[y][x - 1] - sum[y - 1][x - 1] + a[y][x]</code></p><ul><li>快速求二维区间和</li></ul><p>根据定义，有 $\sum_{y=y_0}^{y1}\sum_{x=x_0}^{x1}a[y][x] = sum[y1][x1] - sum[y0 - 1][x1] - sum[y1][x0 - 1] + sum[y0 - 1][x0 - 1]$</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">GeneratePrefixSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">GetSum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GeneratePrefixSum2D</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>size_y<span class="token punctuation">,</span>                         <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>size_x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span>      sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">GetSum2D</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>y0<span class="token punctuation">]</span><span class="token punctuation">[</span>x0<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>$diff[i]=a[i] - a[i-1] (i\geq 1且a[0] = 0)$</p><p>差分是前缀和的逆运算，$a[]$是$diff[]$的前缀和</p><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><ul><li>区间染色转端点染色</li></ul><p>若有操作 $a[i] += t x\leq i\leq y$，可以令 $diff[x] += t, diff[y + 1] -= t$，对$diff$求前缀和，$sum[i]$即得所有操作对$a[i]$的影响</p><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>二维前缀和的逆运算</p><p><code>diff[y][x] = a[y][x] - a[y - 1][x] - a[y][x - 1] + a[y - 1][x - 1]</code></p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">GenerateFiniteDiff</span><span class="token punctuation">(</span><span class="token keyword">int</span> diff<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> diff<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">,</span> diff<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">GenerateFiniteDiff2D</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>diff<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>size_y<span class="token punctuation">,</span>                          <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>size_x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> size_y<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> size_x<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span>      diff<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify2D</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>diff<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y0<span class="token punctuation">]</span><span class="token punctuation">[</span>x0<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x0<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y0<span class="token punctuation">]</span><span class="token punctuation">[</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p><a href="https://codeforces.com/problemset/problem/1262/E">CF1262E. Arson In Berland Forest</a></p><p>题意：给一张有<code>x</code>和<code>.</code>两个标记的图，已知每单位时间<code>X</code>会扩散到周围8格，求最长的扩散时间及此时初始的图</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>数据规模是$10^6$，考虑用<strong>二分答案</strong>求可能的时间，下界为0，上界为$max(m, n)$。</li><li>确定<code>Judge(t)</code>函数：<ul><li>对于答案的<code>X</code>点，在时间为$t$时，以其为左上角，$2t+1$为边长的正方形在输入图中都必须是<code>X</code></li><li>那么可以枚举所有的<code>X</code>点，符合条件（输入图中以其为左上角的<code>X</code>必须有$(2t+1)^2$个）时对以其为左上角，边长为$2t+1$的正方形进行染色</li><li>最终若有输入图的<code>X</code>未被染色（染色数量小于输入图<code>X</code>的数量）则<code>Judge(t)</code>失败，反之成功</li></ul></li><li>考虑对其进行优化：<ul><li>枚举符合条件的点时，如何快速计算输入图中以其为中心的<code>X</code>的数量？使用<strong>二维前缀和</strong>处理输入图</li><li>如何计算染色数量？使用<strong>二维差分</strong>进行端点染色，对差分计算<strong>二维前缀和</strong>后，将非0转为1，再计算一次<strong>二维前缀和</strong></li></ul></li><li>时间复杂度：$O(nmlogn)$ 大约是$10^7$，本题 time limit per test: 2s</li></ul><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">typedef</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>int64_t<span class="token operator">></span> <span class="token operator">></span> V<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>V sum<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> ds<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> int64_t <span class="token function">GetSum2D</span><span class="token punctuation">(</span><span class="token keyword">const</span> V <span class="token operator">&amp;</span>sum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span>                        <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>y0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x0 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Modify2D</span><span class="token punctuation">(</span>V <span class="token operator">&amp;</span>diff<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token keyword">const</span> int64_t <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y0<span class="token punctuation">]</span><span class="token punctuation">[</span>x0<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x0<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  diff<span class="token punctuation">[</span>y0<span class="token punctuation">]</span><span class="token punctuation">[</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">Judge</span><span class="token punctuation">(</span><span class="token keyword">const</span> int64_t <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sz_i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sz_i<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sz_j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sz_j<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetSum2D</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span>          <span class="token function">int64_t</span><span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">Modify2D</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> diff<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> diff<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      ds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>          ds<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> ds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ds<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">GetSum2D</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">GetSum2D</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 计算输入图中'X'数量的前缀和</span>  sum<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cin <span class="token operator">>></span> str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>          sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化差分及其前缀和</span>  diff<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ds<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">></span> m <span class="token operator">?</span> n <span class="token operator">:</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Judge</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">--</span>r <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sz_i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sz_i<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sz_j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sz_j<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetSum2D</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        diff<span class="token punctuation">[</span>i <span class="token operator">+</span> r<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">"X"</span> <span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM Freshmen Mistake Collection</title>
      <link href="/acm-freshmen-mistake-collection/"/>
      <url>/acm-freshmen-mistake-collection/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=551339691&auto=1&height=66"></iframe></div><h2 id="做梦"><a href="#做梦" class="headerlink" title="做梦"></a>做梦</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>忙碌了一天的lzh疲惫地躺在床上，但还念念不忘白天的习题，渐渐地，他的视野逐渐模糊，随之而来的是另一幅场景……</p><p>在一片祥和的森林里，有一群头顶为黑色菌盖(菌盖就是像顶帽子的那部分)或者白色菌盖的蘑菇人，它们是lzh梦中的生物，其中黑色的蘑菇人有3个、白色的蘑菇人有5个，它们除了头顶的蘑菇颜色不同外，没有什么不同，甚至连思维方式都是一样的！它们通过视觉可以看到除自己以外的其它所有蘑菇人的颜色，现在它们想按颜色分类，白色的蘑菇人为一堆，黑色的蘑菇人为另一堆，但是它们不会说话，也看不到自己的颜色，所以现在它们散乱的坐在一块草坪上，仿佛在思考着什么。</p><p>不知过了多久，处于上帝视角的lzh随口说了句“至少有1个黑色的”，突然蘑菇人们都站了起来，第1分钟过去了，所有蘑菇人没有什么行动……第2分钟过去了，蘑菇人还是没有什么行动……第3分钟后，3个黑色的蘑菇人突然想懂了什么，一蹦一跳地跳出了草坪，坐在了一棵树桩下。作为梦的主人的lzh，也突然明白了这些蘑菇人的行为，因为刚刚谈论的是黑色的蘑菇人，所以当黑色的蘑菇人意识到自己是黑色的时候，就会离开草坪，而蘑菇人思考得很慢，1分钟才能想懂一个问题，但是它们的换位思考能力和逻辑推理能力很不错，并且lzh相信蘑菇人十分聪明，不会相信毫无逻辑的话。</p><p>又不知过了多久，清晨7点的闹钟像往常一样将lzh唤醒，lzh对这个梦还意犹未尽，觉得这个梦真的是太有趣了，所以他将这个梦分享给你，并笑着问你如果总共有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”，那么至少在多少分钟后蘑菇人能分成黑白两部分（草坪内的为一部分，草坪外的为另一部分，黑白蘑菇人不在同一部分时则认为是分成黑白两部分了）。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入只有一行，输入3个整数，依次为a，b，c。(1≤a≤100),(0≤b≤a),(1≤c≤1000)。<br>表示有a个蘑菇人，其中有b个白色蘑菇人，蘑菇人们听到的是“至少有c个黑色蘑菇人”。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>如果你认为在lzh说话之前，蘑菇人早已经分成两部分，那么输出整数0;<br>如果你认为在lzh说完话后，蘑菇人仍然不能分成两部分，那么输出lzh的一小段记忆片段“0x3f3f3f3f……”（不包括引号，但是包括省略号）;<br>如果你认为在lzh说完话后的ans分钟后，蘑菇人才能分成两部分，输出ans。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><p>1 1 1<br>2 1 1000<br>8 5 1<br>3 1 1</p><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><p>0<br>0x3f3f3f3f……<br>3<br>2</p><h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><p>对于a=3,b=1,num=1的情况，也就是只有1个白色蘑菇人，2个黑色蘑菇人的情况，它们听到“至少有1个黑色蘑菇人”。<br>它们的心理活动如下：<br>在听到lzh说话之前，<br>A(黑)：abab……<br>B(黑)：abab……<br>C(白)：abab……<br>在听到lzh说话之后，<br>A(黑)：我要走吗？<br>B(黑)：我要走吗？<br>C(白)：我要走吗？<br>第一分钟后，<br>A(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？<br>B(黑)：有1个黑色的，它应该走的啊，但是它怎么不走啊？<br>C(白)：有2个黑色的，它们应该会在下一分钟后走。<br>第二分钟后，<br>A(黑)：哦，我也是黑色的，溜了溜了。<br>B(黑)：哦，我也是黑色的，溜了溜了。<br>C(白)：(<del>O</del>)，继续睡觉吧！</p><h3 id="错点"><a href="#错点" class="headerlink" title="错点"></a>错点</h3><ul><li>5小时实在是累得，没看到<strong>黑蘑菇是从草坪上离开，结果判了<code>if (a-b == b == 1) ans = 0</code></strong></li><li>蘑菇们都长着眼睛，那“至少有c个蘑菇”这个信息其实是没有用的；因为<strong>蘑菇们看到的是a-b或a-b-1个黑蘑菇</strong></li><li>所以在解题时，没有用到c，猜数据直接输出了a-b。。导致AK失败</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="首先处理两个特殊情况："><a href="#首先处理两个特殊情况：" class="headerlink" title="首先处理两个特殊情况："></a>首先处理两个特殊情况：</h4><ul><li>当蘑菇人只有一种颜色时，<code>ans=0</code>（<strong>注意，题意是黑蘑菇离开草坪；当<code>黑=白=1</code>时，他们都在草坪上而没有分开</strong>）</li><li>当<code>c</code>大于<code>黑色的数量</code>时，输出<code>0x3f3f3f3f......</code></li></ul><h4 id="然后是错点"><a href="#然后是错点" class="headerlink" title="然后是错点"></a>然后是错点</h4><ul><li><strong>蘑菇们看到的是a-b或a-b-1个黑蘑菇</strong>，<strong><em>但其实，谁也无法确定究竟是多少，也就是薛定谔的猫</em></strong></li><li>所有蘑菇都很懒，它们都会优先认为自己是白的</li><li>一个白/黑的蘑菇看到了n个黑蘑菇，那么它会认为这些黑蘑菇只看到了n-1个黑蘑菇</li><li>同时，它将这个想法套用到它看到的黑蘑菇身上，也就是说，它认为这些黑蘑菇认为它的同伴们看到了n-2个</li><li>这就是一个递归，而在没有c时，结束条件是0：最后有一个蘑菇<strong>被认为</strong>看到0个黑蘑菇，这样大家都认为自己是白的。</li><li>而当至少有c个黑蘑菇时，递归结束条件是c：有蘑菇<strong>被认为看到了c-1个黑蘑菇</strong>，它一定会发现自己是黑的。</li></ul><h4 id="c-1的情况"><a href="#c-1的情况" class="headerlink" title="c=1的情况"></a>c=1的情况</h4><ul><li>只有1个时，那么第一分钟会有1个唯一的黑蘑菇反应，因为这个黑蘑菇只能看到白的</li><li>而如果它没有反应，只看到1个黑蘑菇的就会有反应：这个黑的没反应，是因为它觉得我应该有反应，那么我是黑的</li><li>而如果2个黑蘑菇都没反应：是因为看到2个黑蘑菇的蘑菇希望他们在第2分钟反应。说明在他们以外也看到了2个黑的，那么我是黑的</li><li>而3个、4个、N个同理。</li></ul><p>最后是c&gt;1，其实就是加速了进程：从有c个蘑菇开始上面的递推。</p><p><strong>最后得出结果：<code>ans=a-b-c+1</code></strong></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> std<span class="token operator">::</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span> std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">-</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0x3f3f3f3f......"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">-</span> b <span class="token operator">-</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合唱队形"><a href="#合唱队形" class="headerlink" title="合唱队形"></a>合唱队形</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。<br>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK，则他们的身高满足T1 &lt; T2 &lt; … &lt; Ti , Ti &gt; Ti+1 &gt; … &gt; TK (1 &lt;= i &lt;= K)。<br>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><p>输入的第一行是一个整数N（2 &lt;= N &lt;= 100），表示同学的总数。<br>第一行有n个整数，用空格分隔，第i个整数Ti（130 &lt;= Ti &lt;= 230）是第i位同学的身高（厘米）。</p><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>可能包括多组测试数据，对于每组数据，<br>输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。</p><h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h4><p>3<br>174 208 219<br>6<br>145 206 193 171 187 167<br>0</p><h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h4><p>0<br>1</p><h3 id="错点-1"><a href="#错点-1" class="headerlink" title="错点"></a>错点</h3><p>好好人想什么区间DP呢。。。还是做过的原题。。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><a href="/longest-monotone-subsequence/" title="最长单调子序列">最长单调子序列</a><ul><li>队形呈现一个峰</li><li>考虑身高严单增时：那么就是求最长严单增子序列</li><li>考虑身高严单减时：将其反序求最长严单增子序列即可</li><li>最后合并两者，取出最大值</li></ul><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>int32_t n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int32_t dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LongestIncreasingSubsequence</span><span class="token punctuation">(</span><span class="token keyword">const</span> int32_t <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> int32_t <span class="token operator">*</span>dp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     std<span class="token operator">::</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">LongestIncreasingSubsequence</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LongestIncreasingSubsequence</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  int32_t res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> res <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> res <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建设电力系统"><a href="#建设电力系统" class="headerlink" title="建设电力系统"></a>建设电力系统</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>小明所在的城市由于下暴雪的原因，电力系统严重受损。许多电力线路被破坏，因此许多村庄与主电网失去了联系。政府想尽快重建电力系统，所以，身为程序员的你被赋予了一项任务，就是编程计算重建电力系统的最少花费，重建的电力系统必须保证任意两个村庄之间至少存在一条通路。</p><h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><p>输入的第一行为一个整数T（1&lt;=T&lt;=50），表示有T组测试数据。</p><p>每组输入第一行是两个正整数N，E（2&lt;=N&lt;=500，N&lt;=E&lt;=N*(N-1)/2），分别表示村庄的个数和原有电力线路的个数。</p><p>接下来的E行，每行包含三个整数A，B，K（0&lt;=A,B&lt;N，0&lt;=K&lt;1000）。A和B分别表示电力线路的起始村庄代号。如果K=0，表示这条线路仍然正常。如果K是一个正整数，表示这条线路需要花费K的代价来重建。</p><p>题目保证输入中没有重边，也没有起始村庄相同的边。</p><h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><p>对于每组输入，输出重建电力系统所需的最小花费，以此来保证任意两个村庄之间至少存在一条通路。</p><h4 id="Sample-Input-1-1"><a href="#Sample-Input-1-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h4><p>1<br>3 3<br>0 1 5<br>0 2 0<br>1 2 9</p><h4 id="Sample-Output-1-1"><a href="#Sample-Output-1-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h4><p>5</p><h3 id="错点-2"><a href="#错点-2" class="headerlink" title="错点"></a>错点</h3><p>看出来是最小生成树了，但是忘了怎么写</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>最小生成树的模板题</p><a href="/minimum-spanning-tree/" title="最小生成树">最小生成树</a><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> kN <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> kM <span class="token operator">=</span> kN <span class="token operator">*</span> <span class="token punctuation">(</span>kN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> E<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>kN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Edge <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> val<span class="token punctuation">;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Edge <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> val <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> edges<span class="token punctuation">[</span>kM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> fa<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> edges <span class="token operator">+</span> E<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    int32_t src <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span> dst <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token operator">==</span> dst<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token function">Merge</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+</span><span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>cin <span class="token operator">>></span> T<span class="token punctuation">;</span> T<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> E<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>      std<span class="token operator">::</span>cin <span class="token operator">>></span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">>></span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dst <span class="token operator">>></span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 错题本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimum Spanning Tree</title>
      <link href="/minimum-spanning-tree/"/>
      <url>/minimum-spanning-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>有<code>n</code>个城市，任意两个城市间修路要花钱，用<code>n-1</code>条路在最小开销的情况下连通所有城市，就是最小生成树</p><p><a href="https://www.luogu.com.cn/problem/P3366">模板题：洛谷P3366 【模板】最小生成树</a></p><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>此算法又称作加点法</p><ol><li>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$</li><li>初始化：$V_{new} = ${$x$}，其中$x$为$V$的任一节点（起始点），$E_{new} = ${}</li><li>重复下列操作，直到$V_{new} = V$<ol><li>在$E$中选取权值最小的边$(u, v)$，其中$u∈V_{new}$且$v∉V_{new}$</li><li>将$v$加入$V_{new}$，将$(u, v)加入E_{new}$</li></ol></li><li>输出：使用$V_{new}和E_{new}来描述所得到的最小生成树$</li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li><p>维护一个数组<code>vis[]</code>，令所有$u∈V_{new}$的<code>vis[u] = true</code></p></li><li><p>维护一个数组<code>dist[]</code>，使得<code>dist[v]</code>是以访问过的点为出点，v为入点的最小边长</p></li><li><p>这样，在执行Prim算法3.1时，我们只需要寻找满足<code>vis[v] = false</code>和<code>dist[v]</code>最小的<code>v</code></p></li><li><p>每次找到<code>v</code>后，执行Prim算法3.2，令<code>vis[v] = 1</code>，并且<code>res += dist[v]</code></p></li><li><p>为了维护<code>dist[]</code>，每次找到<code>v</code>后，<code>v</code>变为访问过的出点，则更新以<code>v</code>为出点未访问过的为入点的最小边长</p></li><li><p>空间复杂度：$O(V^2)$</p></li><li><p>时间复杂度：$O(V^2)$</p></li></ul><h3 id="Prim模板"><a href="#Prim模板" class="headerlink" title="Prim模板"></a>Prim模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>int32_t <span class="token function">Prim</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>graph<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  int32_t res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">bool</span> <span class="token operator">*</span>vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  int32_t <span class="token operator">*</span>dist <span class="token operator">=</span> <span class="token keyword">new</span> int32_t<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> kInf<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    int32_t x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> x <span class="token operator">=</span> j<span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    res <span class="token operator">+</span><span class="token operator">=</span> dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis<span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆优化"><a href="#堆优化" class="headerlink" title="堆优化"></a>堆优化</h3><ul><li><p>执行Prim算法3.1时，我们只需要寻找满足<code>vis[v] = false</code>和<code>dist[v]</code>最小的<code>v</code></p></li><li><p>根据<code>dist[]</code>的性质，可对其使用堆排序</p></li><li><p>这样，在执行Prim算法3.1时，从堆中取出记录有入点和权值的边</p></li><li><p>若入点已访问，则舍弃；否则，执行Prim算法3.2，令<code>vis[v] = 1</code>，并且<code>res += 权值</code></p></li><li><p>每次找到<code>v</code>后，<code>v</code>变为访问过的出点，则更新以<code>v</code>为出点未访问过的为入点的最小边长，将其放入堆中</p></li><li><p>空间复杂度：$O(V^2)$</p></li><li><p>时间复杂度：$O(ElogV)$（通常要使用邻接矩阵）</p></li></ul><h3 id="堆优化Prim模板"><a href="#堆优化Prim模板" class="headerlink" title="堆优化Prim模板"></a>堆优化Prim模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Node <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> val<span class="token punctuation">,</span> p<span class="token punctuation">;</span>  <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> val <span class="token operator">></span> other<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>int32_t <span class="token function">HeapPrim</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>graph<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  int32_t res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">bool</span> <span class="token operator">*</span>vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>priority_queue<span class="token operator">&lt;</span>Node<span class="token operator">></span> heap<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node node <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>node<span class="token punctuation">.</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>node<span class="token punctuation">.</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    res <span class="token operator">+</span><span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>node<span class="token punctuation">.</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> kInf<span class="token punctuation">)</span> heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Node<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>graph<span class="token punctuation">[</span>node<span class="token punctuation">.</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis<span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>此算法又称作加边法</p><ol><li>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$</li><li>初始化：新建图G，G中拥有原图中相同的节点，但没有边</li><li>重复以下步骤，知道G中所有节点都在同一个连同分量中<ol><li>取出权值最小的边</li><li>如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中</li></ol></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>使用并查集来维护连通分量</p></li><li><p>空间复杂度：$O(E+V)$</p></li><li><p>时间复杂度：$O(ElogE)$</p></li></ul><h3 id="Kruskal模板"><a href="#Kruskal模板" class="headerlink" title="Kruskal模板"></a>Kruskal模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DisjointSet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  int32_t <span class="token operator">*</span>_<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">DisjointSet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token keyword">new</span> int32_t<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> _<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">DisjointSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> _<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  int32_t <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">==</span> _<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> _<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>_<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> _<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Edge <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> val<span class="token punctuation">;</span>  <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Edge <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> val <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>val<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>int32_t <span class="token function">Kruskal</span><span class="token punctuation">(</span>Edge <span class="token operator">*</span>edges<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  int32_t res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  DisjointSet <span class="token function">disjoint_set</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>edges <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> edges <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    int32_t src <span class="token operator">=</span> disjoint_set<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span>            dst <span class="token operator">=</span> disjoint_set<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token operator">==</span> dst<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    disjoint_set<span class="token punctuation">.</span><span class="token function">Merge</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+</span><span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Kruskal易于理解，且容易实现</li><li>Prim算法在边密集的图中效率更高</li><li>Kruskal在边稀疏的图中中效率更高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 堆排序 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Longest Monotone Subsequence</title>
      <link href="/longest-monotone-subsequence/"/>
      <url>/longest-monotone-subsequence/</url>
      
        <content type="html"><![CDATA[<h2 id="严格单调递增子序列"><a href="#严格单调递增子序列" class="headerlink" title="严格单调递增子序列"></a>严格单调递增子序列</h2><p>求<code>a[n]</code>的最长严格单调递增子序列长度，简称严单增子序长</p><h2 id="思路1：动态规划"><a href="#思路1：动态规划" class="headerlink" title="思路1：动态规划"></a>思路1：动态规划</h2><p>考虑<code>dp[i]=以a[i]结尾的最长严单增子序长</code></p><ul><li>首先，对于<code>a[1]</code>，最长严单增子序显然是它本身，也就是长度为<code>dp[1]=1</code></li><li>对于i&gt;1，考虑<code>a[i]</code>与<code>a[j], 1 &lt;= j &lt; i</code><ul><li>如果<code>a[j] &lt; a[i]</code>，那么显然<code>a[j]</code>结尾的最长严单增子序，尾部再加上一个<code>a[i]</code>，仍然严单增</li><li>如果<code>a[j] &gt;= a[i]</code>，那么反之，<code>a[i]</code>不能与<code>a[j]</code>结尾的子序列构成最长严单增子序</li></ul></li><li>则有dp方程：<code>dp[i] = Max&#123;dp[i], dp[j] + 1 if a[j] &lt; a[i] else 1&#125;</code></li></ul><p>时间复杂度：<code>O(n^2)</code></p><p>空间复杂度：<code>O(n)</code></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// cmp： &lt; 时为最长严单增子序列； &lt;= 时为最长单增子序列； 反之为相应的递减</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token operator">></span>int32_t <span class="token function">LongestMonotoneSubsequence</span><span class="token punctuation">(</span><span class="token keyword">const</span> int32_t <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">,</span>                                   <span class="token keyword">const</span> Compare <span class="token operator">&amp;</span>cmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  int32_t res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> int32_t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> res <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路2：贪心-二分查找"><a href="#思路2：贪心-二分查找" class="headerlink" title="思路2：贪心+二分查找"></a>思路2：贪心+二分查找</h2><ul><li>考虑计算<code>dp[i]</code>时：</li><li>有<code>x, y &lt; i</code>，且<code>a[x] &lt; a[y] &lt; a[i]</code>，且<code>dp[x] = dp[y]</code>，那么选择<code>x</code>显然比选择<code>y</code>更好</li><li>所以可以使用贪心：维护一个数组<code>b[]</code>，使得<code>b[j], 1&lt;=j&lt;=t</code>为<code>a[i], 1&lt;=i&lt;=n</code>中长度为<code>j</code>的最长单调子序列中尾元素的最小值</li><li>那么，当<code>a[i] &gt; b[t]</code>时，显然<code>dp[i] = b[t]+1</code>，同时要令<code>b[++t] = a[i]</code></li><li>反之，从<code>b[j], 1&lt;=j&lt;=t</code>中找出第一个满足<code>b[j]&gt;=a[i]</code>的，令<code>b[j] = a[i]</code></li><li>可以发现最终<code>dp[n] = t</code>，故可省去<code>dp[i]</code></li><li>可以发现<code>b[]</code>是满足严单增的，故<code>a[i] &lt;= b[t]</code>时可用二分法查找</li></ul><p>时间复杂度：<code>O(nlogn)</code></p><p>空间复杂度：<code>O(n)</code></p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// cmp： &lt; 时为第一个大于key的； &lt;= 时为最后一个等于或第一个大于； 反之为相应的</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token operator">></span>int32_t <span class="token function">BinarySearch</span><span class="token punctuation">(</span><span class="token keyword">const</span> int32_t <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">const</span> int32_t <span class="token operator">&amp;</span>key<span class="token punctuation">,</span>              <span class="token keyword">const</span> Compare <span class="token operator">&amp;</span>cmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  size_t lp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rp <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mp<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">!=</span> rp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    mp <span class="token operator">=</span> <span class="token punctuation">(</span>lp <span class="token operator">+</span> rp<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mp<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      lp <span class="token operator">=</span> mp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      rp <span class="token operator">=</span> mp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> lp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// cmp： &lt; 时为最长严单增子序列； &lt;= 时为最长单增子序列； 反之为相应的递减</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token operator">></span>int32_t <span class="token function">LongestMonotoneSubsequence</span><span class="token punctuation">(</span><span class="token keyword">const</span> int32_t <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> size_t <span class="token operator">&amp;</span>n<span class="token punctuation">,</span>                                   <span class="token keyword">const</span> Compare <span class="token operator">&amp;</span>cmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  int32_t res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> int32_t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      b<span class="token punctuation">[</span><span class="token operator">++</span>res<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      b<span class="token punctuation">[</span><span class="token function">BinarySearch</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> res<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF List and JarvisOJ:stheasy</title>
      <link href="/ctf-list-and-jarvisoj-stheasy/"/>
      <url>/ctf-list-and-jarvisoj-stheasy/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2020-11-27下午CTF课上的小实验</p><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><ul><li>数据结构：将两个升序链表合并为一个新的升序链表</li><li>逆向：JarvisOJ:stheasy</li></ul><h2 id="数据结构：将两个升序链表合并为一个新的升序链表"><a href="#数据结构：将两个升序链表合并为一个新的升序链表" class="headerlink" title="数据结构：将两个升序链表合并为一个新的升序链表"></a>数据结构：将两个升序链表合并为一个新的升序链表</h2><h3 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h3><a href="/ctf-tictactoe-game-ce-hacking/" title="参见我的上一篇文章">参见我的上一篇文章</a><h4 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h4><ul><li>一个节点有且仅有两个属性：它存储的值，它的下一个节点（还可以有它的上一个节点，但在本题没必要）</li></ul><h4 id="链表的功能"><a href="#链表的功能" class="headerlink" title="链表的功能"></a>链表的功能</h4><p>结构决定功能</p><ul><li>提供高效（O(1)）的任意位置插入与删除（显然，执行这两个操作时只需要简单的改变上/下一个结点指向的位置）</li><li>遍历访问而不可随机访问（对于任意的n，你无法直接确定第n个节点到底是哪一个，除非从头开始遍历）</li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">Leetcode题目</a></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> ListNode <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  int32_t val<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前节点的值</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前节点的下一个节点</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个有且仅有一个节点的链表</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span><span class="token function">NewListNode</span><span class="token punctuation">(</span>int32_t val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>  node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在链表中插入一个新节点，返回新节点的地址</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span><span class="token function">InsetrtListNode</span><span class="token punctuation">(</span>int32_t val<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>after<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>after <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Unexpected</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">NewListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  node<span class="token operator">-></span>next <span class="token operator">=</span> after<span class="token operator">-></span>next<span class="token punctuation">;</span>  after<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 释放链表占用的内存</span><span class="token keyword">void</span> <span class="token function">FreeList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span> head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> head <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从stdin读取一个链表</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span><span class="token function">ReadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>tail <span class="token operator">=</span> head<span class="token punctuation">;</span>  int32_t val<span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 输入一个整数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 还没有链表</span>      tail <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token function">NewListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 创建一个链表</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 有链表了</span>      tail <span class="token operator">=</span> <span class="token function">InsetrtListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 插入到尾部之后</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 读取两个字符来忽略掉"->"</span>  <span class="token comment" spellcheck="true">// 当读取到换行符（"\n"(AKA: LF)或"\r\n"(AKA: LRLF)）时，一个链表结束</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">PrintList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> head<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"->%d"</span><span class="token punctuation">,</span> head<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并两个已排序的链表</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span><span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 直接创建一个链表方便操作，此时链表头是无用的0</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token function">NewListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>tail <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> b <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当b为空时，从a取值；当a为空时，从b取值；两个都非空时，取值较小者</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> a <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>val <span class="token operator">&lt;</span> b<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      tail <span class="token operator">=</span> <span class="token function">InsetrtListNode</span><span class="token punctuation">(</span>a<span class="token operator">-></span>val<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>      a <span class="token operator">=</span> a<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      tail <span class="token operator">=</span> <span class="token function">InsetrtListNode</span><span class="token punctuation">(</span>b<span class="token operator">-></span>val<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>      b <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  tail <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 删掉刚刚无用的链表头</span>  <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> tail<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token function">ReadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token function">ReadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">PrintList</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">FreeList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">FreeList</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">FreeList</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python对比"><a href="#Python对比" class="headerlink" title="Python对比"></a>Python对比</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 抽象内存，有效位置从1开始</span>Memory <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Invalid"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># C中的 node->val，node->next，就表示为 Memory[node][0]，Memory[node][1]</span><span class="token comment" spellcheck="true"># 使用一个三元素的列表来表示链表节点</span><span class="token comment" spellcheck="true"># 列表[0]：节点的值</span><span class="token comment" spellcheck="true"># 列表[1]：为下一个节点在Memory的位置</span><span class="token keyword">def</span> <span class="token function">NewListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 创建一个链表节点</span>    address <span class="token operator">=</span> len<span class="token punctuation">(</span>Memory<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 内存中的位置，即C中的指针值</span>    Memory<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>val<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 内存中加入一个新的列表节点</span>    <span class="token keyword">return</span> address<span class="token comment" spellcheck="true"># val：节点的值</span><span class="token comment" spellcheck="true"># after：另外一个节点在Memory的位置（0为无效位置）（即指针）</span><span class="token keyword">def</span> <span class="token function">InsertListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> after <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 无效位置</span>        <span class="token keyword">return</span> <span class="token number">0</span>    new_node_address <span class="token operator">=</span> NewListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># struct ListNode *node = NewListNode(val);</span>    Memory<span class="token punctuation">[</span>new_node_address<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Memory<span class="token punctuation">[</span>after<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># node->next = after->next;</span>    Memory<span class="token punctuation">[</span>after<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_node_address                 <span class="token comment" spellcheck="true"># after->next = node;</span>    <span class="token keyword">return</span> new_node_address<span class="token keyword">def</span> <span class="token function">FreeList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> head <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        next <span class="token operator">=</span> Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        head <span class="token operator">=</span> next<span class="token keyword">def</span> <span class="token function">ReadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> tail <span class="token operator">=</span> None    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 输入一个整数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 输入End结束输入</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> head <span class="token operator">=</span> NewListNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> InsertListNode<span class="token punctuation">(</span>int<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span>    <span class="token keyword">return</span> head<span class="token keyword">def</span> <span class="token function">PrintList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    head <span class="token operator">=</span> Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> head <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">,</span> end<span class="token operator">=</span>str<span class="token punctuation">(</span>Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> tail <span class="token operator">=</span> NewListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个无用的0节点，简化代码</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">or</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># a = 0 代表着 a列表的结尾</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> a <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> Memory<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> Memory<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> InsertListNode<span class="token punctuation">(</span>Memory<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span>            a <span class="token operator">=</span> Memory<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> InsertListNode<span class="token punctuation">(</span>Memory<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span>            b <span class="token operator">=</span> Memory<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    tail <span class="token operator">=</span> Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># 删掉无用的0节点</span>    Memory<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>               <span class="token comment" spellcheck="true"># free(head)</span>    <span class="token keyword">return</span> tail<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> ReadList<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ReadList<span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> Merge<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    PrintList<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    FreeList<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    FreeList<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    FreeList<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 二进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Tictactoe Game CE Hacking</title>
      <link href="/ctf-tictactoe-game-ce-hacking/"/>
      <url>/ctf-tictactoe-game-ce-hacking/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2020-11-20下午CTF课上的小实验</p><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><ul><li><strong>C语言数组及其在内存中的结构</strong></li><li>开发一个井字棋游戏</li><li>用CE进行破解</li></ul><h2 id="C语言的数组"><a href="#C语言的数组" class="headerlink" title="C语言的数组"></a>C语言的数组</h2><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><blockquote><p>高三时同学们统一购买了一本必背64篇的小本本，而转学来的李四书上的顺序与同学们不同。<br>为了跟同学们同步，ta想出了个好办法：<strong>在每篇古文上，记下它在同学们书上的上下篇，对应到李四书上的页码</strong>。<br>如：生于忧患，死于安乐   上一篇P23，下一篇P233<br>所以，当同学们从一篇<strong>翻页</strong>到下一篇时，李四<strong>通过”下一篇”的页码来定位</strong>。</p><ol><li>李四很快就发现，当他<strong>定位到“下一篇时”，同学们都念完第一段了</strong></li><li>某天学渣张三被抓去念早读<br>张三：<strong>“同学们，翻开第20篇”</strong><br>李四：<strong>啪一下就站起来了</strong></li></ol></blockquote><p><strong>同学们的书就是数组，李四的书就是链表</strong></p><table><thead><tr><th></th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>存储方式</td><td>连续</td><td>离散，通过寻址的方式链接</td></tr><tr><td>随机访问速度</td><td><strong>极快</strong></td><td>很慢</td></tr><tr><td>遍历速度</td><td><strong>极快</strong></td><td>快</td></tr><tr><td>可变性</td><td>仅支持改</td><td><strong>任意位置增删改</strong></td></tr></tbody></table><p>所以数组有什么用？</p><ul><li>数组是在内存中<strong>整块</strong>存储的<strong>运行时大小不可变</strong>的数据结构</li><li>因为这个特性，数组是<strong>访问速度最快的数据结构</strong></li><li>事实上，李四的<strong>链表</strong>还是基于<strong>数组</strong>的。众多的数据结构都能使用数组来实现。</li></ul><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><ul><li><strong>数组是内存中的一小块，而指针用于描述内存中的一个点</strong></li><li>因此，数组用于存储，指针主要用于访问</li><li>描述C的数组，只需要一个指针表示起始地址，一个整数表示长度</li><li>指针加法：偏移sizeof(指针类型)的量</li></ul><p>C语言数组取地址的小细节</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Arrays in Memory</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> array_2d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 二维数组</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x %x\n"</span><span class="token punctuation">,</span> array_2d<span class="token punctuation">,</span> array_2d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x %x\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>array_2d<span class="token punctuation">,</span> <span class="token operator">&amp;</span>array_2d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">$ gcc main.c -o main <span class="token operator">&amp;&amp;</span> ./main594af137 594af13a594af137 594af140<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>array_2d, array_2d + 1</code>两个值相差3，说明数组名被转换为char[3]的指针（等价于&amp;array_2d[0]）<br><code>&amp;array_2d, &amp;array_2d + 1</code>两个值相差9，说明数组名的取地址为char[3][3]的指针<br><code>array_2d</code>和<code>&amp;array_2d</code>相等，而且都是第一个元素的地址</p><h3 id="数组在内存中"><a href="#数组在内存中" class="headerlink" title="数组在内存中"></a>数组在内存中</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Arrays in Memory</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">PrintMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出一块长度为len的内存中的数据</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一维数组</span>  <span class="token keyword">int</span> array_2d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">// 二维数组</span>  <span class="token comment" spellcheck="true">// 按期望的二维数组在内存中的分布，将一维数组元素的值赋给二维数组</span>  <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> array_2d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 分别输出两个数组内存中的数据</span>  <span class="token function">PrintMem</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">PrintMem</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>array_2d<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">$ gcc main.c -o main <span class="token operator">&amp;&amp;</span> ./main11 12 13 21 22 23 31 32 33 11 12 13 21 22 23 31 32 33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>这块内存划重点</strong></p><p><img src="array.png" alt="一维数组"><br><img src="2D_array.png" alt="二维数组"></p><h2 id="开发一个井字棋游戏"><a href="#开发一个井字棋游戏" class="headerlink" title="开发一个井字棋游戏"></a>开发一个井字棋游戏</h2><h3 id="什么是井字棋"><a href="#什么是井字棋" class="headerlink" title="什么是井字棋"></a>什么是井字棋</h3><table><thead><tr><th>因为</th><th>所以</th></tr></thead><tbody><tr><td>一个3x3的平面游戏</td><td>用一个3x3的数组存储</td></tr><tr><td>有两位玩家，XO两种棋子，同时还有未放置棋子的空白</td><td>数组类型为char</td></tr><tr><td>当3个棋子连成线时获胜</td><td>游戏获胜的逻辑判断</td></tr><tr><td>当9个格子都被占用且没人获胜时平局</td><td>游戏平局的逻辑判断</td></tr></tbody></table><h3 id="第一步：确定如何存储游戏的数据"><a href="#第一步：确定如何存储游戏的数据" class="headerlink" title="第一步：确定如何存储游戏的数据"></a>第一步：确定如何存储游戏的数据</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> kMap<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> bool <span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> sign<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在y行x列放置sign棋子</span>  <span class="token comment" spellcheck="true">// 危险代码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 有棋子了</span>  <span class="token keyword">return</span> kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sign<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 放置棋子</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步：将数据输出到屏幕上"><a href="#第二步：将数据输出到屏幕上" class="headerlink" title="第二步：将数据输出到屏幕上"></a>第二步：将数据输出到屏幕上</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ClearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// printf("\033[2J\033[0;0H");  // On Linux</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// On Windows</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">ClearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Tictactoe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c|%c|%c\n"</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"一一一\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步：处理玩家控制"><a href="#第三步：处理玩家控制" class="headerlink" title="第三步：处理玩家控制"></a>第三步：处理玩家控制</h3><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显然，有效输入不会超过9次</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput (Y X) to set %c: "</span><span class="token punctuation">,</span> cnt <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 奇数次为O，偶数次为X</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Set</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Unexpected input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 无效输入</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 每次输入完后输出画面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 判断游戏获胜</span>    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四步：判断游戏结束的条件"><a href="#第四步：判断游戏结束的条件" class="headerlink" title="第四步：判断游戏结束的条件"></a>第四步：判断游戏结束的条件</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">inline</span> bool <span class="token function">Equal</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方便判断3个字符</span>  <span class="token keyword">return</span> x <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> y <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> z<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 左斜</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 右斜</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 列</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在main函数中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 获胜结束</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nPlayer %c Win!\n\n"</span><span class="token punctuation">,</span> cnt <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 平局结束</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nDraw Game!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> kMap<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> bool <span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> sign<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在y行x列放置sign棋子</span>  <span class="token comment" spellcheck="true">// 危险代码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 有棋子了</span>  <span class="token keyword">return</span> kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sign<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 放置棋子</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中，当<code>x &gt;= 3</code>时会发生什么？<br><img src="2D_array.png" alt="二维数组"><br>输入1，6时，y=0，x=5，覆盖到图中a23的位置</p><pre><code>Tictactoe | | 一一一 | | 一一一 | | Input (Y X) to set O: 1 6</code></pre><pre><code>Tictactoe | | 一一一 | |O一一一 | | Input (Y X) to set X: </code></pre><p>如果输入-1000000 1呢？程序将会崩溃</p><pre><code>Tictactoe | | 一一一 | | 一一一 | | Input (Y X) to set O: -1000000 1  [1]    6357 segmentation fault  ./main</code></pre><p><strong>所以要访问数组时要注意边界</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> kMap<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> bool <span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> sign<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在y行x列放置sign棋子</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">||</span> kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 有棋子了</span>  <span class="token keyword">return</span> kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sign<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">// 放置棋子</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> kMap<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> bool <span class="token function">Set</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> sign<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在y行x列放置sign棋子</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">||</span> kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 有棋子了</span>  <span class="token keyword">return</span> kMap<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sign<span class="token punctuation">;</span>                                               <span class="token comment" spellcheck="true">// 放置棋子</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">ClearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// printf("\033[2J\033[0;0H");  // On Linux</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// On Windows</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">ClearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Tictactoe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c|%c|%c\n"</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-+-+-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> bool <span class="token function">Equal</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方便判断3个字符</span>  <span class="token keyword">return</span> x <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> y <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> z<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bool <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 左斜</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 右斜</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Equal</span><span class="token punctuation">(</span>kMap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> kMap<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 列</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>kMap<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>kMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 显然，有效输入不会超过9次</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInput (Y X) to set %c: "</span><span class="token punctuation">,</span> cnt <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 奇数次为O，偶数次为X</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Set</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Unexpected input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 无效输入</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 每次输入完后输出画面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 判断游戏获胜</span>    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nPlayer %c Win!\n\n"</span><span class="token punctuation">,</span> cnt <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nDraw Game!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// On Windows</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用CE进行破解"><a href="#用CE进行破解" class="headerlink" title="用CE进行破解"></a>用CE进行破解</h2><p>学CE有什么用？在4399和单机游戏中当科学家。。。</p><p>其实人家主要用来分析和修改内存。</p><p><a href="https://www.cheatengine.org/">下载CE</a></p><h3 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h3><p><img src="ce_1.png" alt="打开进程"></p><br /><p><img src="ce_2.png" alt="搜索数组"></p><p>起始时数组为9个空格</p><p>输出字符对应的十六进制ASCII码（O：4f，X：58，空格：20）</p><pre class="line-numbers language-bash"><code class="language-bash">python3 -c <span class="token string">'print(hex(ord(input())))'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br /><p><img src="ce_3.png" alt="缩小范围"></p><p>出现了一大堆数据，其中只有一个是我们想要的，可以通过改变它的值再次搜索</p><p>在游戏中输入：1 1，然后返回CE操作</p><p><img src="ce_4.png" alt="修改"></p><p>修改到达成胜利条件，之后在游戏中输入2 2</p><p><img src="ce_5.png" alt="修改成功"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Post Blogs With Hexo</title>
      <link href="/post-blogs-with-hexo/"/>
      <url>/post-blogs-with-hexo/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=858520&auto=1&height=66"></iframe></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a></p><h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><p>先<a href="https://nodejs.org/download/release/v12.16.3/node-v12.16.3-x64.msi">安装node.js</a>（注意版本不同会存在问题）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># clone我的分支</span><span class="token function">git</span> clone https://github.com/alexander7xu/alexander7xu.github.io -b raw ./hexo<span class="token function">cd</span> hexo<span class="token comment" spellcheck="true"># 运行python脚本，填写信息</span>python ./runme.py<span class="token comment" spellcheck="true"># 安装hexo及组件；启动本地服务器，在`localhost:4000`预览效果</span><span class="token function">npm</span> i hexo-cli -g<span class="token function">npm</span> <span class="token function">install</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span class="token comment" spellcheck="true"># 一切正常，修改对应位置为你的github用户名，再push到你的GitHub</span><span class="token function">rm</span> ./_config.yml.src ./themes/matery/_config.yml.src ./themes/matery/layout/_partial/footer.ejs.src<span class="token function">git</span> add *<span class="token function">git</span> commit -m <span class="token string">"From alexander7xu"</span><span class="token function">git</span> branch -D raw<span class="token function">git</span> branch -m hexo<span class="token function">git</span> remote remove origin<span class="token function">git</span> remote add origin https://github.com/你的github用户名<span class="token function">git</span> push origin hexo:hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$blog_root</span>hexo new post <span class="token string">"post title"</span><span class="token function">ls</span> source\_posts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成了<code>post-title</code>文件夹存放资源文件；<code>post-title.md</code>文件存放文章。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$blog_root</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>localhost:4000</code>预览效果</p><pre class="line-numbers language-bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传到GitHub</p><h2 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token variable">$blog_root</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"message here"</span><span class="token function">git</span> push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
